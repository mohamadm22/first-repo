
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006314  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00006314  000063a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000094  008000cc  008000cc  00006414  2**0
                  ALLOC
  3 .stab         00006d5c  00000000  00000000  00006414  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ebe  00000000  00000000  0000d170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000f02e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000f18e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000f31d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00011362  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00012463  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000133e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00013568  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0001382a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000140b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 f9 10 	jmp	0x21f2	; 0x21f2 <__vector_4>
      14:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__vector_5>
      18:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__vector_6>
      1c:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__vector_7>
      20:	0c 94 7b 10 	jmp	0x20f6	; 0x20f6 <__vector_8>
      24:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__vector_9>
      28:	0c 94 3c 10 	jmp	0x2078	; 0x2078 <__vector_10>
      2c:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f3 e6       	ldi	r31, 0x63	; 99
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 36       	cpi	r26, 0x60	; 96
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 2c 	call	0x599a	; 0x599a <main>
      8a:	0c 94 88 31 	jmp	0x6310	; 0x6310 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ea       	ldi	r26, 0xA1	; 161
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6d 31 	jmp	0x62da	; 0x62da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5d 31 	jmp	0x62ba	; 0x62ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 79 31 	jmp	0x62f2	; 0x62f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5d 31 	jmp	0x62ba	; 0x62ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 79 31 	jmp	0x62f2	; 0x62f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ea       	ldi	r24, 0xA1	; 161
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6d 31 	jmp	0x62da	; 0x62da <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 59 31 	jmp	0x62b2	; 0x62b2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 ea       	ldi	r22, 0xA1	; 161
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 75 31 	jmp	0x62ea	; 0x62ea <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5d 31 	jmp	0x62ba	; 0x62ba <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 79 31 	jmp	0x62f2	; 0x62f2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5d 31 	jmp	0x62ba	; 0x62ba <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 79 31 	jmp	0x62f2	; 0x62f2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5d 31 	jmp	0x62ba	; 0x62ba <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 79 31 	jmp	0x62f2	; 0x62f2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 61 31 	jmp	0x62c2	; 0x62c2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7d 31 	jmp	0x62fa	; 0x62fa <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TWI_vInit>:




void TWI_vInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * 1- interrupt enable/disable
	 */
	CLR_BIT(TWCR,TWIE);
     ca6:	a6 e5       	ldi	r26, 0x56	; 86
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e6 e5       	ldi	r30, 0x56	; 86
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8e 7f       	andi	r24, 0xFE	; 254
     cb2:	8c 93       	st	X, r24


	 /*
	 * 2- bit rate
	 */
	TWBR = 10 ;
     cb4:	e0 e2       	ldi	r30, 0x20	; 32
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	8a e0       	ldi	r24, 0x0A	; 10
     cba:	80 83       	st	Z, r24


}
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <TWI_u08SendStartCondition>:

u08 TWI_u08SendStartCondition(void)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1<<TWINT)|(1<<TWSTA)| (1<<TWEN) ;//TWINT cleared to send data
     cca:	e6 e5       	ldi	r30, 0x56	; 86
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	84 ea       	ldi	r24, 0xA4	; 164
     cd0:	80 83       	st	Z, r24

	while (!(TWCR & (1<<TWINT)));
     cd2:	e6 e5       	ldi	r30, 0x56	; 86
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	88 23       	and	r24, r24
     cda:	dc f7       	brge	.-10     	; 0xcd2 <TWI_u08SendStartCondition+0x10>

	/*check status code */

	return (TWSR & 0xF8) ;
     cdc:	e1 e2       	ldi	r30, 0x21	; 33
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	88 7f       	andi	r24, 0xF8	; 248
}
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <TWI_u08SendRepeatedStartCondition>:


u08 TWI_u08SendRepeatedStartCondition(void)
{
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWSTA)| (1<<TWEN) ;//TWINT cleared to send data
     cf2:	e6 e5       	ldi	r30, 0x56	; 86
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	84 ea       	ldi	r24, 0xA4	; 164
     cf8:	80 83       	st	Z, r24

	while (!(TWCR & (1<<TWINT)));
     cfa:	e6 e5       	ldi	r30, 0x56	; 86
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	88 23       	and	r24, r24
     d02:	dc f7       	brge	.-10     	; 0xcfa <TWI_u08SendRepeatedStartCondition+0x10>

	/*check status code */

	return (TWSR & 0xF8) ;
     d04:	e1 e2       	ldi	r30, 0x21	; 33
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	88 7f       	andi	r24, 0xF8	; 248


}
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <TWI_u08SendSlaveAddressRW>:



u08 TWI_u08SendSlaveAddressRW(u08 A_u08SLA , u08 A_u08RW)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	00 d0       	rcall	.+0      	; 0xd18 <TWI_u08SendSlaveAddressRW+0x6>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
	TWDR = (A_u08SLA << 1) | (A_u08RW) ; //7bits of slave & RW
     d20:	e3 e2       	ldi	r30, 0x23	; 35
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	98 2f       	mov	r25, r24
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	89 2b       	or	r24, r25
     d34:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     d36:	e6 e5       	ldi	r30, 0x56	; 86
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	84 e8       	ldi	r24, 0x84	; 132
     d3c:	80 83       	st	Z, r24

	CLR_BIT(TWCR ,TWSTA) ; //once you sent start condition pulse you have to start
     d3e:	a6 e5       	ldi	r26, 0x56	; 86
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e6 e5       	ldi	r30, 0x56	; 86
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	8f 7d       	andi	r24, 0xDF	; 223
     d4a:	8c 93       	st	X, r24


	while (!(TWCR & (1<<TWINT))) ;
     d4c:	e6 e5       	ldi	r30, 0x56	; 86
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	88 23       	and	r24, r24
     d54:	dc f7       	brge	.-10     	; 0xd4c <TWI_u08SendSlaveAddressRW+0x3a>

	/*check status code */

	return (TWSR & 0xF8) ;
     d56:	e1 e2       	ldi	r30, 0x21	; 33
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	88 7f       	andi	r24, 0xF8	; 248
}
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <TWI_u08SendByte>:


u08 TWI_u08SendByte(u08 A_u08Byte)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	0f 92       	push	r0
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	89 83       	std	Y+1, r24	; 0x01
	TWDR = A_u08Byte ; //7bits of slave & RW
     d74:	e3 e2       	ldi	r30, 0x23	; 35
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     d7c:	e6 e5       	ldi	r30, 0x56	; 86
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	84 e8       	ldi	r24, 0x84	; 132
     d82:	80 83       	st	Z, r24

	CLR_BIT(TWCR ,TWSTA) ; //once you sent start condition pulse you have to start
     d84:	a6 e5       	ldi	r26, 0x56	; 86
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e6 e5       	ldi	r30, 0x56	; 86
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	8f 7d       	andi	r24, 0xDF	; 223
     d90:	8c 93       	st	X, r24


	while (!(TWCR & (1<<TWINT))) ;
     d92:	e6 e5       	ldi	r30, 0x56	; 86
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	88 23       	and	r24, r24
     d9a:	dc f7       	brge	.-10     	; 0xd92 <TWI_u08SendByte+0x2a>

	/*check status code */

	return (TWSR & 0xF8) ;
     d9c:	e1 e2       	ldi	r30, 0x21	; 33
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	88 7f       	andi	r24, 0xF8	; 248


}
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <TWI_u08ReceiveByte>:

u08 TWI_u08ReceiveByte(u08* A_pu08Byte ,u08 A_u08ACK)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <TWI_u08ReceiveByte+0x6>
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <TWI_u08ReceiveByte+0x8>
     db4:	0f 92       	push	r0
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	6b 83       	std	Y+3, r22	; 0x03
	switch(A_u08ACK)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	3d 83       	std	Y+5, r19	; 0x05
     dc8:	2c 83       	std	Y+4, r18	; 0x04
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	51 f0       	breq	.+20     	; 0xde6 <TWI_u08ReceiveByte+0x3a>
     dd2:	2c 81       	ldd	r18, Y+4	; 0x04
     dd4:	3d 81       	ldd	r19, Y+5	; 0x05
     dd6:	21 30       	cpi	r18, 0x01	; 1
     dd8:	31 05       	cpc	r19, r1
     dda:	81 f4       	brne	.+32     	; 0xdfc <TWI_u08ReceiveByte+0x50>
	{
	case TWI_ACK :
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     ddc:	e6 e5       	ldi	r30, 0x56	; 86
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	84 ec       	ldi	r24, 0xC4	; 196
     de2:	80 83       	st	Z, r24
     de4:	0b c0       	rjmp	.+22     	; 0xdfc <TWI_u08ReceiveByte+0x50>
		break;
	case TWI_NACK:
		TWCR = (1<<TWINT) | (1<<TWEN) ;
     de6:	e6 e5       	ldi	r30, 0x56	; 86
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	84 e8       	ldi	r24, 0x84	; 132
     dec:	80 83       	st	Z, r24
		CLR_BIT(TWCR ,TWEA);
     dee:	a6 e5       	ldi	r26, 0x56	; 86
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e6 e5       	ldi	r30, 0x56	; 86
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8f 7b       	andi	r24, 0xBF	; 191
     dfa:	8c 93       	st	X, r24
		break;
	}

	while (!(TWCR & (1<<TWINT))) ;
     dfc:	e6 e5       	ldi	r30, 0x56	; 86
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	88 23       	and	r24, r24
     e04:	dc f7       	brge	.-10     	; 0xdfc <TWI_u08ReceiveByte+0x50>


	*A_pu08Byte = TWDR ;
     e06:	e3 e2       	ldi	r30, 0x23	; 35
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	e9 81       	ldd	r30, Y+1	; 0x01
     e0e:	fa 81       	ldd	r31, Y+2	; 0x02
     e10:	80 83       	st	Z, r24

	/*check status code */

	return (TWSR & 0xF8) ;
     e12:	e1 e2       	ldi	r30, 0x21	; 33
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	88 7f       	andi	r24, 0xF8	; 248


}
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <TWI_u08SendStopCondition>:


u08 TWI_u08SendStopCondition(void)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     e32:	e6 e5       	ldi	r30, 0x56	; 86
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	84 e9       	ldi	r24, 0x94	; 148
     e38:	80 83       	st	Z, r24

	return (TWSR & 0xF8) ;
     e3a:	e1 e2       	ldi	r30, 0x21	; 33
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 7f       	andi	r24, 0xF8	; 248
}
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <MTMR_vChangeMood>:
u08 G_u8I2;



void MTMR_vChangeMood(u08 A_u8TimerNO,u08 A_u8Mood)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <MTMR_vChangeMood+0x6>
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	89 83       	std	Y+1, r24	; 0x01
     e54:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8TimerNO==Timer0)
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 23       	and	r24, r24
     e5a:	09 f0       	breq	.+2      	; 0xe5e <MTMR_vChangeMood+0x16>
     e5c:	97 c0       	rjmp	.+302    	; 0xf8c <MTMR_vChangeMood+0x144>
	{
		if(A_u8Mood==NORMAL)
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	88 23       	and	r24, r24
     e62:	21 f5       	brne	.+72     	; 0xeac <MTMR_vChangeMood+0x64>
		{
			/*choose the normal mood*/
				CLR_BIT(TCCR0, WGM01) ;
     e64:	a3 e5       	ldi	r26, 0x53	; 83
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e3 e5       	ldi	r30, 0x53	; 83
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	87 7f       	andi	r24, 0xF7	; 247
     e70:	8c 93       	st	X, r24
				CLR_BIT(TCCR0, WGM00) ;
     e72:	a3 e5       	ldi	r26, 0x53	; 83
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e3 e5       	ldi	r30, 0x53	; 83
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	8f 7b       	andi	r24, 0xBF	; 191
     e7e:	8c 93       	st	X, r24
			/*dont need it in normal mode*/
				CLR_BIT(TCCR0, COM00) ;
     e80:	a3 e5       	ldi	r26, 0x53	; 83
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e3 e5       	ldi	r30, 0x53	; 83
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	8f 7e       	andi	r24, 0xEF	; 239
     e8c:	8c 93       	st	X, r24
				CLR_BIT(TCCR0, COM01) ;
     e8e:	a3 e5       	ldi	r26, 0x53	; 83
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e3 e5       	ldi	r30, 0x53	; 83
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	8f 7d       	andi	r24, 0xDF	; 223
     e9a:	8c 93       	st	X, r24
			/*enable TMR0 OVF interrupt*/
				SET_BIT(TIMSK, TOIE0) ;
     e9c:	a9 e5       	ldi	r26, 0x59	; 89
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e9 e5       	ldi	r30, 0x59	; 89
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	81 60       	ori	r24, 0x01	; 1
     ea8:	8c 93       	st	X, r24
     eaa:	70 c0       	rjmp	.+224    	; 0xf8c <MTMR_vChangeMood+0x144>
		}
		else if(A_u8Mood==PWM)
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	82 30       	cpi	r24, 0x02	; 2
     eb0:	11 f5       	brne	.+68     	; 0xef6 <MTMR_vChangeMood+0xae>
		{
			CLR_BIT(TCCR0, WGM01) ;
     eb2:	a3 e5       	ldi	r26, 0x53	; 83
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e3 e5       	ldi	r30, 0x53	; 83
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	87 7f       	andi	r24, 0xF7	; 247
     ebe:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM00) ;
     ec0:	a3 e5       	ldi	r26, 0x53	; 83
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e3 e5       	ldi	r30, 0x53	; 83
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 64       	ori	r24, 0x40	; 64
     ecc:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM00) ;
     ece:	a3 e5       	ldi	r26, 0x53	; 83
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e3 e5       	ldi	r30, 0x53	; 83
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	8f 7e       	andi	r24, 0xEF	; 239
     eda:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01) ;
     edc:	a3 e5       	ldi	r26, 0x53	; 83
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e3 e5       	ldi	r30, 0x53	; 83
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 62       	ori	r24, 0x20	; 32
     ee8:	8c 93       	st	X, r24
			MDIO_vSetPinDir(DIO_PORTB,DIO_PIN3,DIO_Output);
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	63 e0       	ldi	r22, 0x03	; 3
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
     ef4:	4b c0       	rjmp	.+150    	; 0xf8c <MTMR_vChangeMood+0x144>
		}
		else if(A_u8Mood==FAST_PWM)
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	83 30       	cpi	r24, 0x03	; 3
     efa:	11 f5       	brne	.+68     	; 0xf40 <MTMR_vChangeMood+0xf8>
		{
			SET_BIT(TCCR0, WGM01) ;
     efc:	a3 e5       	ldi	r26, 0x53	; 83
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e3 e5       	ldi	r30, 0x53	; 83
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	88 60       	ori	r24, 0x08	; 8
     f08:	8c 93       	st	X, r24
			SET_BIT(TCCR0, WGM00) ;
     f0a:	a3 e5       	ldi	r26, 0x53	; 83
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e3 e5       	ldi	r30, 0x53	; 83
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 64       	ori	r24, 0x40	; 64
     f16:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, COM00) ;
     f18:	a3 e5       	ldi	r26, 0x53	; 83
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e3 e5       	ldi	r30, 0x53	; 83
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8f 7e       	andi	r24, 0xEF	; 239
     f24:	8c 93       	st	X, r24
			SET_BIT(TCCR0, COM01) ;
     f26:	a3 e5       	ldi	r26, 0x53	; 83
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e3 e5       	ldi	r30, 0x53	; 83
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	80 62       	ori	r24, 0x20	; 32
     f32:	8c 93       	st	X, r24
			MDIO_vSetPinDir(DIO_PORTB,DIO_PIN3,DIO_Output);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	63 e0       	ldi	r22, 0x03	; 3
     f38:	41 e0       	ldi	r20, 0x01	; 1
     f3a:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
     f3e:	26 c0       	rjmp	.+76     	; 0xf8c <MTMR_vChangeMood+0x144>
		}
		else if(A_u8Mood==COMPARE)
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	19 f5       	brne	.+70     	; 0xf8c <MTMR_vChangeMood+0x144>
		{
			/*choose the CTC mood*/
				SET_BIT(TCCR0, WGM01) ;
     f46:	a3 e5       	ldi	r26, 0x53	; 83
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e3 e5       	ldi	r30, 0x53	; 83
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	88 60       	ori	r24, 0x08	; 8
     f52:	8c 93       	st	X, r24
				CLR_BIT(TCCR0, WGM00) ;
     f54:	a3 e5       	ldi	r26, 0x53	; 83
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e3 e5       	ldi	r30, 0x53	; 83
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8f 7b       	andi	r24, 0xBF	; 191
     f60:	8c 93       	st	X, r24
			/*dont need it in CTC mode*/
				CLR_BIT(TCCR0, COM00) ;
     f62:	a3 e5       	ldi	r26, 0x53	; 83
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e3 e5       	ldi	r30, 0x53	; 83
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8f 7e       	andi	r24, 0xEF	; 239
     f6e:	8c 93       	st	X, r24
				CLR_BIT(TCCR0, COM01) ;
     f70:	a3 e5       	ldi	r26, 0x53	; 83
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e3 e5       	ldi	r30, 0x53	; 83
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8f 7d       	andi	r24, 0xDF	; 223
     f7c:	8c 93       	st	X, r24
			/*enable TMR0 CTC interrupt*/
				SET_BIT(TIMSK,OCIE0);
     f7e:	a9 e5       	ldi	r26, 0x59	; 89
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e9 e5       	ldi	r30, 0x59	; 89
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	8c 93       	st	X, r24
		}
	}
	if(A_u8TimerNO==Timer1)
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	09 f0       	breq	.+2      	; 0xf94 <MTMR_vChangeMood+0x14c>
     f92:	fe c0       	rjmp	.+508    	; 0x1190 <MTMR_vChangeMood+0x348>
	{
		if(A_u8Mood==NORMAL)
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	88 23       	and	r24, r24
     f98:	09 f0       	breq	.+2      	; 0xf9c <MTMR_vChangeMood+0x154>
     f9a:	40 c0       	rjmp	.+128    	; 0x101c <MTMR_vChangeMood+0x1d4>
		{
			/*dont need it in normal mode*/
				CLR_BIT(TCCR1A, COM1A1) ;
     f9c:	af e4       	ldi	r26, 0x4F	; 79
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	ef e4       	ldi	r30, 0x4F	; 79
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8f 77       	andi	r24, 0x7F	; 127
     fa8:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A, COM1A0) ;
     faa:	af e4       	ldi	r26, 0x4F	; 79
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	ef e4       	ldi	r30, 0x4F	; 79
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	8f 7b       	andi	r24, 0xBF	; 191
     fb6:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A, COM1B1) ;
     fb8:	af e4       	ldi	r26, 0x4F	; 79
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ef e4       	ldi	r30, 0x4F	; 79
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8f 7d       	andi	r24, 0xDF	; 223
     fc4:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A, COM1B0) ;
     fc6:	af e4       	ldi	r26, 0x4F	; 79
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	ef e4       	ldi	r30, 0x4F	; 79
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8f 7e       	andi	r24, 0xEF	; 239
     fd2:	8c 93       	st	X, r24
			/*choose the normal mood*/
				CLR_BIT(TCCR1A, WGM11) ;
     fd4:	af e4       	ldi	r26, 0x4F	; 79
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ef e4       	ldi	r30, 0x4F	; 79
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8d 7f       	andi	r24, 0xFD	; 253
     fe0:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A, WGM10) ;
     fe2:	af e4       	ldi	r26, 0x4F	; 79
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	ef e4       	ldi	r30, 0x4F	; 79
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	8e 7f       	andi	r24, 0xFE	; 254
     fee:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B, WGM12) ;
     ff0:	ae e4       	ldi	r26, 0x4E	; 78
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ee e4       	ldi	r30, 0x4E	; 78
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	87 7f       	andi	r24, 0xF7	; 247
     ffc:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B, WGM13) ;
     ffe:	ae e4       	ldi	r26, 0x4E	; 78
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ee e4       	ldi	r30, 0x4E	; 78
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8f 7e       	andi	r24, 0xEF	; 239
    100a:	8c 93       	st	X, r24
			/*enable TMR1 OVF interrupt*/
				SET_BIT(TIMSK, TOIE1) ;
    100c:	a9 e5       	ldi	r26, 0x59	; 89
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e9 e5       	ldi	r30, 0x59	; 89
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	84 60       	ori	r24, 0x04	; 4
    1018:	8c 93       	st	X, r24
    101a:	ba c0       	rjmp	.+372    	; 0x1190 <MTMR_vChangeMood+0x348>
		}
		else if(A_u8Mood==FAST_PWM)
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	09 f0       	breq	.+2      	; 0x1024 <MTMR_vChangeMood+0x1dc>
    1022:	4b c0       	rjmp	.+150    	; 0x10ba <MTMR_vChangeMood+0x272>
		{
			/*set direction of PWM signal in normal not reversed*/
				SET_BIT(TCCR1A, COM1A1) ;
    1024:	af e4       	ldi	r26, 0x4F	; 79
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	ef e4       	ldi	r30, 0x4F	; 79
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	80 68       	ori	r24, 0x80	; 128
    1030:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A, COM1A0) ;
    1032:	af e4       	ldi	r26, 0x4F	; 79
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ef e4       	ldi	r30, 0x4F	; 79
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8f 7b       	andi	r24, 0xBF	; 191
    103e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, COM1B1) ;
    1040:	af e4       	ldi	r26, 0x4F	; 79
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	ef e4       	ldi	r30, 0x4F	; 79
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	80 62       	ori	r24, 0x20	; 32
    104c:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A, COM1B0) ;
    104e:	af e4       	ldi	r26, 0x4F	; 79
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	ef e4       	ldi	r30, 0x4F	; 79
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	8f 7e       	andi	r24, 0xEF	; 239
    105a:	8c 93       	st	X, r24
			/*choose the Fast PWM mood which i can define top value*/

			/*i choose her mood which i put top value in icr and compare value in ocr to activate pwm in 2 pins*/
				SET_BIT(TCCR1A, WGM11) ;
    105c:	af e4       	ldi	r26, 0x4F	; 79
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	ef e4       	ldi	r30, 0x4F	; 79
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	82 60       	ori	r24, 0x02	; 2
    1068:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A, WGM10) ;
    106a:	af e4       	ldi	r26, 0x4F	; 79
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	ef e4       	ldi	r30, 0x4F	; 79
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	8e 7f       	andi	r24, 0xFE	; 254
    1076:	8c 93       	st	X, r24
				SET_BIT(TCCR1B, WGM12) ;
    1078:	ae e4       	ldi	r26, 0x4E	; 78
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	ee e4       	ldi	r30, 0x4E	; 78
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	88 60       	ori	r24, 0x08	; 8
    1084:	8c 93       	st	X, r24
				SET_BIT(TCCR1B, WGM13) ;
    1086:	ae e4       	ldi	r26, 0x4E	; 78
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	ee e4       	ldi	r30, 0x4E	; 78
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	80 61       	ori	r24, 0x10	; 16
    1092:	8c 93       	st	X, r24
				TCCR1B = (TCCR1B & 0xF8) | Prescaler_1_8 ;
    1094:	ae e4       	ldi	r26, 0x4E	; 78
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	ee e4       	ldi	r30, 0x4E	; 78
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	88 7f       	andi	r24, 0xF8	; 248
    10a0:	82 60       	ori	r24, 0x02	; 2
    10a2:	8c 93       	st	X, r24

				MDIO_vSetPinDir(DIO_PORTD,DIO_PIN4,DIO_Output);
    10a4:	83 e0       	ldi	r24, 0x03	; 3
    10a6:	64 e0       	ldi	r22, 0x04	; 4
    10a8:	41 e0       	ldi	r20, 0x01	; 1
    10aa:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
				MDIO_vSetPinDir(DIO_PORTD,DIO_PIN5,DIO_Output);
    10ae:	83 e0       	ldi	r24, 0x03	; 3
    10b0:	65 e0       	ldi	r22, 0x05	; 5
    10b2:	41 e0       	ldi	r20, 0x01	; 1
    10b4:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
    10b8:	6b c0       	rjmp	.+214    	; 0x1190 <MTMR_vChangeMood+0x348>
		}
		else if(A_u8Mood==COMPARE)
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	09 f0       	breq	.+2      	; 0x10c2 <MTMR_vChangeMood+0x27a>
    10c0:	47 c0       	rjmp	.+142    	; 0x1150 <MTMR_vChangeMood+0x308>
		{
			/*dont need it in CTC mode*/
				CLR_BIT(TCCR1A, COM1A1) ;
    10c2:	af e4       	ldi	r26, 0x4F	; 79
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ef e4       	ldi	r30, 0x4F	; 79
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8f 77       	andi	r24, 0x7F	; 127
    10ce:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A, COM1A0) ;
    10d0:	af e4       	ldi	r26, 0x4F	; 79
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ef e4       	ldi	r30, 0x4F	; 79
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	8f 7b       	andi	r24, 0xBF	; 191
    10dc:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A, COM1B1) ;
    10de:	af e4       	ldi	r26, 0x4F	; 79
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	ef e4       	ldi	r30, 0x4F	; 79
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8f 7d       	andi	r24, 0xDF	; 223
    10ea:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A, COM1B0) ;
    10ec:	af e4       	ldi	r26, 0x4F	; 79
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	ef e4       	ldi	r30, 0x4F	; 79
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	8f 7e       	andi	r24, 0xEF	; 239
    10f8:	8c 93       	st	X, r24
			/*choose the CTC mood*/
				CLR_BIT(TCCR1A, WGM11) ;
    10fa:	af e4       	ldi	r26, 0x4F	; 79
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	ef e4       	ldi	r30, 0x4F	; 79
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8d 7f       	andi	r24, 0xFD	; 253
    1106:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A, WGM10) ;
    1108:	af e4       	ldi	r26, 0x4F	; 79
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	ef e4       	ldi	r30, 0x4F	; 79
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	8e 7f       	andi	r24, 0xFE	; 254
    1114:	8c 93       	st	X, r24
				SET_BIT(TCCR1B, WGM12) ;
    1116:	ae e4       	ldi	r26, 0x4E	; 78
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	ee e4       	ldi	r30, 0x4E	; 78
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	88 60       	ori	r24, 0x08	; 8
    1122:	8c 93       	st	X, r24
				SET_BIT(TCCR1B, WGM13) ;
    1124:	ae e4       	ldi	r26, 0x4E	; 78
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	ee e4       	ldi	r30, 0x4E	; 78
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 61       	ori	r24, 0x10	; 16
    1130:	8c 93       	st	X, r24
			/*enable TMR1 CTC A and B interrupt*/
				SET_BIT(TIMSK, OCIE1A) ;
    1132:	a9 e5       	ldi	r26, 0x59	; 89
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e9 e5       	ldi	r30, 0x59	; 89
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 61       	ori	r24, 0x10	; 16
    113e:	8c 93       	st	X, r24
				SET_BIT(TIMSK, OCIE1B) ;
    1140:	a9 e5       	ldi	r26, 0x59	; 89
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e9 e5       	ldi	r30, 0x59	; 89
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	88 60       	ori	r24, 0x08	; 8
    114c:	8c 93       	st	X, r24
    114e:	20 c0       	rjmp	.+64     	; 0x1190 <MTMR_vChangeMood+0x348>
		}
		else if(A_u8Mood==ICU)
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	e9 f4       	brne	.+58     	; 0x1190 <MTMR_vChangeMood+0x348>
		{
			TCCR1A = 0;
    1156:	ef e4       	ldi	r30, 0x4F	; 79
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	10 82       	st	Z, r1
			TCCR1B = 0b01000001;
    115c:	ee e4       	ldi	r30, 0x4E	; 78
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	81 e4       	ldi	r24, 0x41	; 65
    1162:	80 83       	st	Z, r24

			SET_BIT(TIMSK, TICIE1) ;
    1164:	a9 e5       	ldi	r26, 0x59	; 89
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e9 e5       	ldi	r30, 0x59	; 89
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	80 62       	ori	r24, 0x20	; 32
    1170:	8c 93       	st	X, r24
			SET_BIT(TIFR,5);
    1172:	a8 e5       	ldi	r26, 0x58	; 88
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e8 e5       	ldi	r30, 0x58	; 88
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	80 62       	ori	r24, 0x20	; 32
    117e:	8c 93       	st	X, r24
			TCCR1B = (TCCR1B & 0xF8) | Prescaler_1_64 ;
    1180:	ae e4       	ldi	r26, 0x4E	; 78
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	ee e4       	ldi	r30, 0x4E	; 78
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	88 7f       	andi	r24, 0xF8	; 248
    118c:	83 60       	ori	r24, 0x03	; 3
    118e:	8c 93       	st	X, r24

		}
	}
	if(A_u8TimerNO==Timer2)
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	09 f0       	breq	.+2      	; 0x1198 <MTMR_vChangeMood+0x350>
    1196:	7b c0       	rjmp	.+246    	; 0x128e <MTMR_vChangeMood+0x446>
	{
		if(A_u8Mood==NORMAL)
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	88 23       	and	r24, r24
    119c:	b1 f4       	brne	.+44     	; 0x11ca <MTMR_vChangeMood+0x382>
		{
			/*choose the normal mood*/
				CLR_BIT(TCCR2, WGM21) ;
    119e:	a5 e4       	ldi	r26, 0x45	; 69
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e5 e4       	ldi	r30, 0x45	; 69
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	87 7f       	andi	r24, 0xF7	; 247
    11aa:	8c 93       	st	X, r24
				CLR_BIT(TCCR2, WGM20) ;
    11ac:	a5 e4       	ldi	r26, 0x45	; 69
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e5 e4       	ldi	r30, 0x45	; 69
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8f 7b       	andi	r24, 0xBF	; 191
    11b8:	8c 93       	st	X, r24
			/*enable TMR2 OVF interrupt*/
				SET_BIT(TIMSK, TOIE2) ;
    11ba:	a9 e5       	ldi	r26, 0x59	; 89
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e9 e5       	ldi	r30, 0x59	; 89
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	80 64       	ori	r24, 0x40	; 64
    11c6:	8c 93       	st	X, r24
    11c8:	62 c0       	rjmp	.+196    	; 0x128e <MTMR_vChangeMood+0x446>
		}
		else if(A_u8Mood==PWM)
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	11 f5       	brne	.+68     	; 0x1214 <MTMR_vChangeMood+0x3cc>
		{
			/*choose the PWM phase correct mood*/
				CLR_BIT(TCCR2, WGM21) ;
    11d0:	a5 e4       	ldi	r26, 0x45	; 69
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e5 e4       	ldi	r30, 0x45	; 69
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	87 7f       	andi	r24, 0xF7	; 247
    11dc:	8c 93       	st	X, r24
				SET_BIT(TCCR2, WGM20) ;
    11de:	a5 e4       	ldi	r26, 0x45	; 69
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e4       	ldi	r30, 0x45	; 69
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	80 64       	ori	r24, 0x40	; 64
    11ea:	8c 93       	st	X, r24
				CLR_BIT(TCCR2, COM20) ;
    11ec:	a5 e4       	ldi	r26, 0x45	; 69
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e5 e4       	ldi	r30, 0x45	; 69
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	8f 7e       	andi	r24, 0xEF	; 239
    11f8:	8c 93       	st	X, r24
				SET_BIT(TCCR2, COM21) ;
    11fa:	a5 e4       	ldi	r26, 0x45	; 69
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e5 e4       	ldi	r30, 0x45	; 69
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	80 62       	ori	r24, 0x20	; 32
    1206:	8c 93       	st	X, r24
				MDIO_vSetPinDir(DIO_PORTD,DIO_PIN7,DIO_Output);
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	67 e0       	ldi	r22, 0x07	; 7
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
    1212:	3d c0       	rjmp	.+122    	; 0x128e <MTMR_vChangeMood+0x446>
		}
		else if(A_u8Mood==FAST_PWM)
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	83 30       	cpi	r24, 0x03	; 3
    1218:	11 f5       	brne	.+68     	; 0x125e <MTMR_vChangeMood+0x416>
		{
			/*choose the Fast PWM mood*/
			SET_BIT(TCCR2, WGM21) ;
    121a:	a5 e4       	ldi	r26, 0x45	; 69
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e5 e4       	ldi	r30, 0x45	; 69
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	88 60       	ori	r24, 0x08	; 8
    1226:	8c 93       	st	X, r24
			SET_BIT(TCCR2, WGM20) ;
    1228:	a5 e4       	ldi	r26, 0x45	; 69
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e5 e4       	ldi	r30, 0x45	; 69
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	80 64       	ori	r24, 0x40	; 64
    1234:	8c 93       	st	X, r24
			CLR_BIT(TCCR2, COM20) ;
    1236:	a5 e4       	ldi	r26, 0x45	; 69
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e5 e4       	ldi	r30, 0x45	; 69
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	8f 7e       	andi	r24, 0xEF	; 239
    1242:	8c 93       	st	X, r24
			SET_BIT(TCCR2, COM21) ;
    1244:	a5 e4       	ldi	r26, 0x45	; 69
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e5 e4       	ldi	r30, 0x45	; 69
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	80 62       	ori	r24, 0x20	; 32
    1250:	8c 93       	st	X, r24
			MDIO_vSetPinDir(DIO_PORTD,DIO_PIN7,DIO_Output);
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	67 e0       	ldi	r22, 0x07	; 7
    1256:	41 e0       	ldi	r20, 0x01	; 1
    1258:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
    125c:	18 c0       	rjmp	.+48     	; 0x128e <MTMR_vChangeMood+0x446>
		}
		else if(A_u8Mood==COMPARE)
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	a9 f4       	brne	.+42     	; 0x128e <MTMR_vChangeMood+0x446>
		{
			/*choose the CTC mood*/
				SET_BIT(TCCR2, WGM21) ;
    1264:	a5 e4       	ldi	r26, 0x45	; 69
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e5 e4       	ldi	r30, 0x45	; 69
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	88 60       	ori	r24, 0x08	; 8
    1270:	8c 93       	st	X, r24
				CLR_BIT(TCCR2, WGM20) ;
    1272:	a5 e4       	ldi	r26, 0x45	; 69
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e5 e4       	ldi	r30, 0x45	; 69
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	8f 7b       	andi	r24, 0xBF	; 191
    127e:	8c 93       	st	X, r24
			/*enable TMR2 CTC interrupt*/
				SET_BIT(TIMSK,OCIE2);
    1280:	a9 e5       	ldi	r26, 0x59	; 89
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e9 e5       	ldi	r30, 0x59	; 89
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	80 68       	ori	r24, 0x80	; 128
    128c:	8c 93       	st	X, r24
		}

	}


}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <MTMR_vInit>:
void MTMR_vInit(void)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_ENABLE==ENABLE
#if TIMER0_MODE==NORMAL
/*choose the normal mood*/
	CLR_BIT(TCCR0, WGM01) ;
    12a0:	a3 e5       	ldi	r26, 0x53	; 83
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e3 e5       	ldi	r30, 0x53	; 83
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	87 7f       	andi	r24, 0xF7	; 247
    12ac:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM00) ;
    12ae:	a3 e5       	ldi	r26, 0x53	; 83
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e3 e5       	ldi	r30, 0x53	; 83
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 7b       	andi	r24, 0xBF	; 191
    12ba:	8c 93       	st	X, r24
/*dont need it in normal mode*/
	CLR_BIT(TCCR0, COM00) ;
    12bc:	a3 e5       	ldi	r26, 0x53	; 83
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e3 e5       	ldi	r30, 0x53	; 83
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	8f 7e       	andi	r24, 0xEF	; 239
    12c8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM01) ;
    12ca:	a3 e5       	ldi	r26, 0x53	; 83
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e3 e5       	ldi	r30, 0x53	; 83
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	8f 7d       	andi	r24, 0xDF	; 223
    12d6:	8c 93       	st	X, r24
/*enable TMR0 OVF interrupt*/
	SET_BIT(TIMSK, TOIE0) ;
    12d8:	a9 e5       	ldi	r26, 0x59	; 89
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e9 e5       	ldi	r30, 0x59	; 89
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	81 60       	ori	r24, 0x01	; 1
    12e4:	8c 93       	st	X, r24
	TCCR1A = 0;
	TCCR1B = 0b01000001;

#endif
#if ICU_ENABLE==ENABLE
	SET_BIT(TIMSK, TICIE1) ;
    12e6:	a9 e5       	ldi	r26, 0x59	; 89
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e9 e5       	ldi	r30, 0x59	; 89
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 62       	ori	r24, 0x20	; 32
    12f2:	8c 93       	st	X, r24
	SET_BIT(TIFR,5);
    12f4:	a8 e5       	ldi	r26, 0x58	; 88
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e8 e5       	ldi	r30, 0x58	; 88
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 62       	ori	r24, 0x20	; 32
    1300:	8c 93       	st	X, r24

#if TIMER2_ENABLE==ENABLE
#if TIMER2_MODE==NORMAL

/*choose the normal mood*/
	CLR_BIT(TCCR2, WGM21) ;
    1302:	a5 e4       	ldi	r26, 0x45	; 69
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e5 e4       	ldi	r30, 0x45	; 69
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	87 7f       	andi	r24, 0xF7	; 247
    130e:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, WGM20) ;
    1310:	a5 e4       	ldi	r26, 0x45	; 69
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e4       	ldi	r30, 0x45	; 69
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8f 7b       	andi	r24, 0xBF	; 191
    131c:	8c 93       	st	X, r24
/*enable TMR2 OVF interrupt*/
	SET_BIT(TIMSK, TOIE2) ;
    131e:	a9 e5       	ldi	r26, 0x59	; 89
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e9 e5       	ldi	r30, 0x59	; 89
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	80 64       	ori	r24, 0x40	; 64
    132a:	8c 93       	st	X, r24
	SET_BIT(TIMSK,OCIE2);

#endif
#endif

}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <MTMR_vSetPreloadValue>:

void MTMR_vSetPreloadValue(u08 A_u8TimerNO,u16 A_u16Preload)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <MTMR_vSetPreloadValue+0x6>
    1338:	00 d0       	rcall	.+0      	; 0x133a <MTMR_vSetPreloadValue+0x8>
    133a:	0f 92       	push	r0
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	7b 83       	std	Y+3, r23	; 0x03
    1344:	6a 83       	std	Y+2, r22	; 0x02
//TCNT is regester used in preload
	switch (A_u8TimerNO)
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3d 83       	std	Y+5, r19	; 0x05
    134e:	2c 83       	std	Y+4, r18	; 0x04
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	71 f0       	breq	.+28     	; 0x1376 <MTMR_vSetPreloadValue+0x44>
    135a:	2c 81       	ldd	r18, Y+4	; 0x04
    135c:	3d 81       	ldd	r19, Y+5	; 0x05
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	81 f0       	breq	.+32     	; 0x1384 <MTMR_vSetPreloadValue+0x52>
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	81 f4       	brne	.+32     	; 0x138c <MTMR_vSetPreloadValue+0x5a>
		{
		case Timer0:
			TCNT0 = A_u16Preload ;
    136c:	e2 e5       	ldi	r30, 0x52	; 82
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	80 83       	st	Z, r24
    1374:	0b c0       	rjmp	.+22     	; 0x138c <MTMR_vSetPreloadValue+0x5a>
			break;

		case Timer1:
			TCNT1 = A_u16Preload ;
    1376:	ec e4       	ldi	r30, 0x4C	; 76
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	9b 81       	ldd	r25, Y+3	; 0x03
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	80 83       	st	Z, r24
    1382:	04 c0       	rjmp	.+8      	; 0x138c <MTMR_vSetPreloadValue+0x5a>
			break;

		case Timer2:
			TCNT2 = A_u16Preload ;
    1384:	e4 e4       	ldi	r30, 0x44	; 68
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	80 83       	st	Z, r24
			break;
		}
}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <MTMR_vSetCompareValue>:

void MTMR_vSetCompareValue(u08 A_u8TimerNO,u16 A_u16CompareValue)
{
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <MTMR_vSetCompareValue+0x6>
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <MTMR_vSetCompareValue+0x8>
    13a4:	0f 92       	push	r0
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	7b 83       	std	Y+3, r23	; 0x03
    13ae:	6a 83       	std	Y+2, r22	; 0x02
//OCR is regester used in set compare value in
	switch (A_u8TimerNO)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3d 83       	std	Y+5, r19	; 0x05
    13b8:	2c 83       	std	Y+4, r18	; 0x04
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	91 05       	cpc	r25, r1
    13c2:	71 f0       	breq	.+28     	; 0x13e0 <MTMR_vSetCompareValue+0x44>
    13c4:	2c 81       	ldd	r18, Y+4	; 0x04
    13c6:	3d 81       	ldd	r19, Y+5	; 0x05
    13c8:	22 30       	cpi	r18, 0x02	; 2
    13ca:	31 05       	cpc	r19, r1
    13cc:	b1 f0       	breq	.+44     	; 0x13fa <MTMR_vSetCompareValue+0x5e>
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	9d 81       	ldd	r25, Y+5	; 0x05
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	b1 f4       	brne	.+44     	; 0x1402 <MTMR_vSetCompareValue+0x66>
			{
			case Timer0:
				OCR0=A_u16CompareValue;
    13d6:	ec e5       	ldi	r30, 0x5C	; 92
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	80 83       	st	Z, r24
    13de:	11 c0       	rjmp	.+34     	; 0x1402 <MTMR_vSetCompareValue+0x66>
				break;

			case Timer1:
				OCR1A=A_u16CompareValue;
    13e0:	ea e4       	ldi	r30, 0x4A	; 74
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	9b 81       	ldd	r25, Y+3	; 0x03
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	80 83       	st	Z, r24
				OCR1B=A_u16CompareValue;
    13ec:	e8 e4       	ldi	r30, 0x48	; 72
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	9b 81       	ldd	r25, Y+3	; 0x03
    13f4:	91 83       	std	Z+1, r25	; 0x01
    13f6:	80 83       	st	Z, r24
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <MTMR_vSetCompareValue+0x66>
				break;

			case Timer2:
				OCR2=A_u16CompareValue;
    13fa:	e3 e4       	ldi	r30, 0x43	; 67
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	80 83       	st	Z, r24
				break;

			}
}
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <MTMR_vSetTopValue>:

void MTMR_vSetTopValue(u16 A_u16TopValue)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <MTMR_vSetTopValue+0x6>
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	89 83       	std	Y+1, r24	; 0x01
//this function use with timer 1 only
	ICR1 = A_u16TopValue ;
    1420:	e6 e4       	ldi	r30, 0x46	; 70
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	91 83       	std	Z+1, r25	; 0x01
    142a:	80 83       	st	Z, r24
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <MTMR_vStartTimer>:

void MTMR_vStartTimer(u08 A_u8TimerNO)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <MTMR_vStartTimer+0x6>
    143c:	0f 92       	push	r0
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
//set prescaler in regester tccr to activate timer prephral
	switch (A_u8TimerNO)
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	3b 83       	std	Y+3, r19	; 0x03
    144c:	2a 83       	std	Y+2, r18	; 0x02
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	9b 81       	ldd	r25, Y+3	; 0x03
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	91 05       	cpc	r25, r1
    1456:	91 f0       	breq	.+36     	; 0x147c <MTMR_vStartTimer+0x46>
    1458:	2a 81       	ldd	r18, Y+2	; 0x02
    145a:	3b 81       	ldd	r19, Y+3	; 0x03
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	b1 f0       	breq	.+44     	; 0x148e <MTMR_vStartTimer+0x58>
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	9b 81       	ldd	r25, Y+3	; 0x03
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	d1 f4       	brne	.+52     	; 0x149e <MTMR_vStartTimer+0x68>
	{
	case Timer0:
		TCCR0 = (TCCR0 & 0xF8) | Prescaler_0 ;
    146a:	a3 e5       	ldi	r26, 0x53	; 83
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e3 e5       	ldi	r30, 0x53	; 83
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	88 7f       	andi	r24, 0xF8	; 248
    1476:	82 60       	ori	r24, 0x02	; 2
    1478:	8c 93       	st	X, r24
    147a:	11 c0       	rjmp	.+34     	; 0x149e <MTMR_vStartTimer+0x68>
		break;

	case Timer1:
		TCCR1B = (TCCR1B & 0xF8) | Prescaler_1 ;
    147c:	ae e4       	ldi	r26, 0x4E	; 78
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	ee e4       	ldi	r30, 0x4E	; 78
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	88 7f       	andi	r24, 0xF8	; 248
    1488:	83 60       	ori	r24, 0x03	; 3
    148a:	8c 93       	st	X, r24
    148c:	08 c0       	rjmp	.+16     	; 0x149e <MTMR_vStartTimer+0x68>
		break;

	case Timer2:
		TCCR2 = (TCCR2 & 0xF8) | Prescaler_2 ;
    148e:	a5 e4       	ldi	r26, 0x45	; 69
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e5 e4       	ldi	r30, 0x45	; 69
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	88 7f       	andi	r24, 0xF8	; 248
    149a:	82 60       	ori	r24, 0x02	; 2
    149c:	8c 93       	st	X, r24
		break;
	}

}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <MTMR_vEndTimer>:

void MTMR_vEndTimer(u08 A_u8TimerNO)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <MTMR_vEndTimer+0x6>
    14b0:	0f 92       	push	r0
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	89 83       	std	Y+1, r24	; 0x01
//clear prescaler in regester tccr to dictivate timer prephral
	switch (A_u8TimerNO)
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	3b 83       	std	Y+3, r19	; 0x03
    14c0:	2a 83       	std	Y+2, r18	; 0x02
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	9b 81       	ldd	r25, Y+3	; 0x03
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	91 05       	cpc	r25, r1
    14ca:	89 f0       	breq	.+34     	; 0x14ee <MTMR_vEndTimer+0x44>
    14cc:	2a 81       	ldd	r18, Y+2	; 0x02
    14ce:	3b 81       	ldd	r19, Y+3	; 0x03
    14d0:	22 30       	cpi	r18, 0x02	; 2
    14d2:	31 05       	cpc	r19, r1
    14d4:	a1 f0       	breq	.+40     	; 0x14fe <MTMR_vEndTimer+0x54>
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	9b 81       	ldd	r25, Y+3	; 0x03
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	b9 f4       	brne	.+46     	; 0x150c <MTMR_vEndTimer+0x62>
		{
		case Timer0:
			TCCR0 = (TCCR0 & 0xF8)  ;
    14de:	a3 e5       	ldi	r26, 0x53	; 83
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e3 e5       	ldi	r30, 0x53	; 83
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	88 7f       	andi	r24, 0xF8	; 248
    14ea:	8c 93       	st	X, r24
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <MTMR_vEndTimer+0x62>
			break;

		case Timer1:
			TCCR1B = (TCCR1B & 0xF8)  ;
    14ee:	ae e4       	ldi	r26, 0x4E	; 78
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ee e4       	ldi	r30, 0x4E	; 78
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	88 7f       	andi	r24, 0xF8	; 248
    14fa:	8c 93       	st	X, r24
    14fc:	07 c0       	rjmp	.+14     	; 0x150c <MTMR_vEndTimer+0x62>
			break;
		case Timer2:
			TCCR2 = (TCCR2 & 0xF8)  ;
    14fe:	a5 e4       	ldi	r26, 0x45	; 69
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e4       	ldi	r30, 0x45	; 69
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	88 7f       	andi	r24, 0xF8	; 248
    150a:	8c 93       	st	X, r24
			break;

		}
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <MTMR_vDelayOVF>:

void MTMR_vDelayOVF(u08 A_u8TimerNO,u16 A_u16Time,void(*ptr)(void))
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	27 97       	sbiw	r28, 0x07	; 7
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	7b 83       	std	Y+3, r23	; 0x03
    1530:	6a 83       	std	Y+2, r22	; 0x02
    1532:	5d 83       	std	Y+5, r21	; 0x05
    1534:	4c 83       	std	Y+4, r20	; 0x04
/* i tried to make timer 0&2 count to 250 micro second by calc:
 * preload value= ((2 power(regester size))-(250/1000000)*frecuency/prescaler)
 */
	switch (A_u8TimerNO)
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3f 83       	std	Y+7, r19	; 0x07
    153e:	2e 83       	std	Y+6, r18	; 0x06
    1540:	6e 81       	ldd	r22, Y+6	; 0x06
    1542:	7f 81       	ldd	r23, Y+7	; 0x07
    1544:	61 30       	cpi	r22, 0x01	; 1
    1546:	71 05       	cpc	r23, r1
    1548:	09 f4       	brne	.+2      	; 0x154c <MTMR_vDelayOVF+0x34>
    154a:	4c c0       	rjmp	.+152    	; 0x15e4 <MTMR_vDelayOVF+0xcc>
    154c:	8e 81       	ldd	r24, Y+6	; 0x06
    154e:	9f 81       	ldd	r25, Y+7	; 0x07
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	91 05       	cpc	r25, r1
    1554:	09 f4       	brne	.+2      	; 0x1558 <MTMR_vDelayOVF+0x40>
    1556:	93 c0       	rjmp	.+294    	; 0x167e <MTMR_vDelayOVF+0x166>
    1558:	2e 81       	ldd	r18, Y+6	; 0x06
    155a:	3f 81       	ldd	r19, Y+7	; 0x07
    155c:	21 15       	cp	r18, r1
    155e:	31 05       	cpc	r19, r1
    1560:	09 f0       	breq	.+2      	; 0x1564 <MTMR_vDelayOVF+0x4c>
    1562:	b7 c0       	rjmp	.+366    	; 0x16d2 <MTMR_vDelayOVF+0x1ba>
	case Timer0:
/* time measure by ms and timer prephral count to 250 micro so:
1ms=1000 micro
counter = 1000micro/250 micro
*/
		G_u16CounterOVF0[G_u8I0] = A_u16Time*4 ;
    1564:	80 91 3e 01 	lds	r24, 0x013E
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	9b 81       	ldd	r25, Y+3	; 0x03
    1570:	ac 01       	movw	r20, r24
    1572:	44 0f       	add	r20, r20
    1574:	55 1f       	adc	r21, r21
    1576:	44 0f       	add	r20, r20
    1578:	55 1f       	adc	r21, r21
    157a:	c9 01       	movw	r24, r18
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	fc 01       	movw	r30, r24
    1582:	ee 5f       	subi	r30, 0xFE	; 254
    1584:	fe 4f       	sbci	r31, 0xFE	; 254
    1586:	51 83       	std	Z+1, r21	; 0x01
    1588:	40 83       	st	Z, r20
		TMR0_OVF_callback[G_u8I0] = ptr ;
    158a:	80 91 3e 01 	lds	r24, 0x013E
    158e:	88 2f       	mov	r24, r24
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	fc 01       	movw	r30, r24
    1598:	ec 5c       	subi	r30, 0xCC	; 204
    159a:	fe 4f       	sbci	r31, 0xFE	; 254
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	91 83       	std	Z+1, r25	; 0x01
    15a2:	80 83       	st	Z, r24
		Pointer_deg++;
    15a4:	80 91 d6 00 	lds	r24, 0x00D6
    15a8:	8f 5f       	subi	r24, 0xFF	; 255
    15aa:	80 93 d6 00 	sts	0x00D6, r24
		TMR0_OVF_Pointer[G_u8I0]=Pointer_deg;
    15ae:	80 91 3e 01 	lds	r24, 0x013E
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	20 91 d6 00 	lds	r18, 0x00D6
    15ba:	fc 01       	movw	r30, r24
    15bc:	ef 52       	subi	r30, 0x2F	; 47
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	20 83       	st	Z, r18
#if Prescaler_0==Prescaler_1
// prescaler 1 count less than 250 micro so i make i edited counter to make it count to 250 micro
		G_u16CounterOVF0[G_u8I0] = (G_u16CounterOVF0[G_u8I0]*125)/16 ;
#elif Prescaler_0==Prescaler_0_8
		MTMR_vSetPreloadValue(Timer0,6);
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	66 e0       	ldi	r22, 0x06	; 6
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	0e 94 99 09 	call	0x1332	; 0x1332 <MTMR_vSetPreloadValue>
#elif Prescaler_0==Prescaler_0_256
		MTMR_vSetPreloadValue(Timer0,248);
#elif Prescaler_0==PPrescaler_0_1024
		MTMR_vSetPreloadValue(Timer0,254);
#endif
		if(G_u8I0==5)
    15cc:	80 91 3e 01 	lds	r24, 0x013E
    15d0:	85 30       	cpi	r24, 0x05	; 5
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <MTMR_vDelayOVF+0xc0>
			G_u8I0=0;
    15d4:	10 92 3e 01 	sts	0x013E, r1
		G_u8I0++;
    15d8:	80 91 3e 01 	lds	r24, 0x013E
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
    15de:	80 93 3e 01 	sts	0x013E, r24
    15e2:	77 c0       	rjmp	.+238    	; 0x16d2 <MTMR_vDelayOVF+0x1ba>
		break;
/* i tried to make timer 1 count to 50 ms by calc:
 * preload value= ((2 power(regester size))-(50/1000)*frecuency/prescaler)
 */
	case Timer1:
		G_u16CounterOVF1[G_u8I1] = A_u16Time/50 ;
    15e4:	80 91 18 01 	lds	r24, 0x0118
    15e8:	e8 2f       	mov	r30, r24
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	9b 81       	ldd	r25, Y+3	; 0x03
    15f0:	22 e3       	ldi	r18, 0x32	; 50
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	b9 01       	movw	r22, r18
    15f6:	0e 94 ed 30 	call	0x61da	; 0x61da <__udivmodhi4>
    15fa:	cb 01       	movw	r24, r22
    15fc:	9c 01       	movw	r18, r24
    15fe:	cf 01       	movw	r24, r30
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	fc 01       	movw	r30, r24
    1606:	e5 5e       	subi	r30, 0xE5	; 229
    1608:	fe 4f       	sbci	r31, 0xFE	; 254
    160a:	31 83       	std	Z+1, r19	; 0x01
    160c:	20 83       	st	Z, r18
		TMR1_OVF_callback[G_u8I1] = ptr ;
    160e:	80 91 18 01 	lds	r24, 0x0118
    1612:	88 2f       	mov	r24, r24
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	fc 01       	movw	r30, r24
    161c:	e4 5f       	subi	r30, 0xF4	; 244
    161e:	fe 4f       	sbci	r31, 0xFE	; 254
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	9d 81       	ldd	r25, Y+5	; 0x05
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	80 83       	st	Z, r24
#if Prescaler_1==Prescaler_1
// prescaler 1 count less than 50ms so i make i edited counter to make it count to 50ms
		G_u16CounterOVF1[G_u8I1] = (G_u16CounterOVF1[G_u8I1]*3125)/512 ;
    1628:	80 91 18 01 	lds	r24, 0x0118
    162c:	48 2f       	mov	r20, r24
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	80 91 18 01 	lds	r24, 0x0118
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	fc 01       	movw	r30, r24
    163e:	e5 5e       	subi	r30, 0xE5	; 229
    1640:	fe 4f       	sbci	r31, 0xFE	; 254
    1642:	20 81       	ld	r18, Z
    1644:	31 81       	ldd	r19, Z+1	; 0x01
    1646:	85 e3       	ldi	r24, 0x35	; 53
    1648:	9c e0       	ldi	r25, 0x0C	; 12
    164a:	bc 01       	movw	r22, r24
    164c:	26 9f       	mul	r18, r22
    164e:	c0 01       	movw	r24, r0
    1650:	27 9f       	mul	r18, r23
    1652:	90 0d       	add	r25, r0
    1654:	36 9f       	mul	r19, r22
    1656:	90 0d       	add	r25, r0
    1658:	11 24       	eor	r1, r1
    165a:	9c 01       	movw	r18, r24
    165c:	23 2f       	mov	r18, r19
    165e:	33 27       	eor	r19, r19
    1660:	26 95       	lsr	r18
    1662:	ca 01       	movw	r24, r20
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	fc 01       	movw	r30, r24
    166a:	e5 5e       	subi	r30, 0xE5	; 229
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	31 83       	std	Z+1, r19	; 0x01
    1670:	20 83       	st	Z, r18
#elif Prescaler_1==Prescaler_1_256
		MTMR_vSetPreloadValue(Timer1,63973);
#elif Prescaler_1==Prescaler_1_1024
		MTMR_vSetPreloadValue(Timer1,65145);
#endif
		G_u8I1++;
    1672:	80 91 18 01 	lds	r24, 0x0118
    1676:	8f 5f       	subi	r24, 0xFF	; 255
    1678:	80 93 18 01 	sts	0x0118, r24
    167c:	2a c0       	rjmp	.+84     	; 0x16d2 <MTMR_vDelayOVF+0x1ba>
		break;
	case Timer2:
		G_u16CounterOVF2[G_u8I2] = A_u16Time*4 ;
    167e:	80 91 3f 01 	lds	r24, 0x013F
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	9b 81       	ldd	r25, Y+3	; 0x03
    168a:	ac 01       	movw	r20, r24
    168c:	44 0f       	add	r20, r20
    168e:	55 1f       	adc	r21, r21
    1690:	44 0f       	add	r20, r20
    1692:	55 1f       	adc	r21, r21
    1694:	c9 01       	movw	r24, r18
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	fc 01       	movw	r30, r24
    169c:	e0 5c       	subi	r30, 0xC0	; 192
    169e:	fe 4f       	sbci	r31, 0xFE	; 254
    16a0:	51 83       	std	Z+1, r21	; 0x01
    16a2:	40 83       	st	Z, r20
		TMR2_OVF_callback[G_u8I2] = ptr ;
    16a4:	80 91 3f 01 	lds	r24, 0x013F
    16a8:	88 2f       	mov	r24, r24
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	fc 01       	movw	r30, r24
    16b2:	e6 5b       	subi	r30, 0xB6	; 182
    16b4:	fe 4f       	sbci	r31, 0xFE	; 254
    16b6:	8c 81       	ldd	r24, Y+4	; 0x04
    16b8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	80 83       	st	Z, r24
#if Prescaler_2==Prescaler_2_1
		G_u16CounterOVF2[G_u8I2] = (G_u16CounterOVF2[G_u8I2]*125)/16 ;
#elif Prescaler_2==Prescaler_2_8
		MTMR_vSetPreloadValue(Timer2,6);
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	66 e0       	ldi	r22, 0x06	; 6
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	0e 94 99 09 	call	0x1332	; 0x1332 <MTMR_vSetPreloadValue>
#elif Prescaler_2==Prescaler_2_256
		MTMR_vSetPreloadValue(Timer2,248);
#elif Prescaler_2==Prescaler_2_1024
		MTMR_vSetPreloadValue(Timer2,254);
#endif
		G_u8I2++;
    16c8:	80 91 3f 01 	lds	r24, 0x013F
    16cc:	8f 5f       	subi	r24, 0xFF	; 255
    16ce:	80 93 3f 01 	sts	0x013F, r24
		break;
	}
	MTMR_vStartTimer(A_u8TimerNO);
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	0e 94 1b 0a 	call	0x1436	; 0x1436 <MTMR_vStartTimer>





}
    16d8:	27 96       	adiw	r28, 0x07	; 7
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <MTMR_vDeleteTask>:
void MTMR_vDeleteTask(void(*ptr)(void))
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	2a 97       	sbiw	r28, 0x0a	; 10
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	9a 87       	std	Y+10, r25	; 0x0a
    1700:	89 87       	std	Y+9, r24	; 0x09
	u08 arr[5]={0};
    1702:	85 e0       	ldi	r24, 0x05	; 5
    1704:	fe 01       	movw	r30, r28
    1706:	34 96       	adiw	r30, 0x04	; 4
    1708:	df 01       	movw	r26, r30
    170a:	98 2f       	mov	r25, r24
    170c:	1d 92       	st	X+, r1
    170e:	9a 95       	dec	r25
    1710:	e9 f7       	brne	.-6      	; 0x170c <MTMR_vDeleteTask+0x22>
	u08 i=0;
    1712:	1b 82       	std	Y+3, r1	; 0x03
	for(u08 L_u8I=0;L_u8I<5;L_u8I++)
    1714:	1a 82       	std	Y+2, r1	; 0x02
    1716:	28 c0       	rjmp	.+80     	; 0x1768 <MTMR_vDeleteTask+0x7e>
	{

			if(TMR0_OVF_callback[L_u8I] == ptr)
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	fc 01       	movw	r30, r24
    1724:	ec 5c       	subi	r30, 0xCC	; 204
    1726:	fe 4f       	sbci	r31, 0xFE	; 254
    1728:	20 81       	ld	r18, Z
    172a:	31 81       	ldd	r19, Z+1	; 0x01
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	28 17       	cp	r18, r24
    1732:	39 07       	cpc	r19, r25
    1734:	b1 f4       	brne	.+44     	; 0x1762 <MTMR_vDeleteTask+0x78>
			{
				TMR0_OVF_callback[L_u8I]=NULL;
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	fc 01       	movw	r30, r24
    1742:	ec 5c       	subi	r30, 0xCC	; 204
    1744:	fe 4f       	sbci	r31, 0xFE	; 254
    1746:	11 82       	std	Z+1, r1	; 0x01
    1748:	10 82       	st	Z, r1
				TMR0_OVF_Pointer[L_u8I]=0;
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	ef 52       	subi	r30, 0x2F	; 47
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	10 82       	st	Z, r1
				Pointer_deg--;
    1758:	80 91 d6 00 	lds	r24, 0x00D6
    175c:	81 50       	subi	r24, 0x01	; 1
    175e:	80 93 d6 00 	sts	0x00D6, r24
}
void MTMR_vDeleteTask(void(*ptr)(void))
{
	u08 arr[5]={0};
	u08 i=0;
	for(u08 L_u8I=0;L_u8I<5;L_u8I++)
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	8a 83       	std	Y+2, r24	; 0x02
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	85 30       	cpi	r24, 0x05	; 5
    176c:	a8 f2       	brcs	.-86     	; 0x1718 <MTMR_vDeleteTask+0x2e>

			}


	}
	for(u08 L_u8I=0;L_u8I<5;L_u8I++)
    176e:	19 82       	std	Y+1, r1	; 0x01
    1770:	18 c0       	rjmp	.+48     	; 0x17a2 <MTMR_vDeleteTask+0xb8>
	{
		if(TMR0_OVF_Pointer[L_u8I] != 0)
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	fc 01       	movw	r30, r24
    177a:	ef 52       	subi	r30, 0x2F	; 47
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	80 81       	ld	r24, Z
    1780:	88 23       	and	r24, r24
    1782:	61 f0       	breq	.+24     	; 0x179c <MTMR_vDeleteTask+0xb2>
		{
			TMR0_OVF_Pointer[L_u8I]--;
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	f9 01       	movw	r30, r18
    178c:	ef 52       	subi	r30, 0x2F	; 47
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	80 81       	ld	r24, Z
    1792:	81 50       	subi	r24, 0x01	; 1
    1794:	f9 01       	movw	r30, r18
    1796:	ef 52       	subi	r30, 0x2F	; 47
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	80 83       	st	Z, r24

			}


	}
	for(u08 L_u8I=0;L_u8I<5;L_u8I++)
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	8f 5f       	subi	r24, 0xFF	; 255
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	85 30       	cpi	r24, 0x05	; 5
    17a6:	28 f3       	brcs	.-54     	; 0x1772 <MTMR_vDeleteTask+0x88>
			TMR0_OVF_Pointer[L_u8I]--;
		}

	}

}
    17a8:	2a 96       	adiw	r28, 0x0a	; 10
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <MTMR_vCheckTasks>:

void MTMR_vCheckTasks(void(*ptr)(void))
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <MTMR_vCheckTasks+0x6>
    17c0:	0f 92       	push	r0
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	9b 83       	std	Y+3, r25	; 0x03
    17c8:	8a 83       	std	Y+2, r24	; 0x02
	for(u08 L_u8I=0;L_u8I<5;L_u8I++)
    17ca:	19 82       	std	Y+1, r1	; 0x01
    17cc:	43 c0       	rjmp	.+134    	; 0x1854 <MTMR_vCheckTasks+0x9a>
	{

		if((TMR0_OVF_Pointer[L_u8I] == 1)&&(TMR0_OVF_callback[L_u8I] != NULL)&&(G_u8FlagOVF0[L_u8I]==1)&&(ptr!=TMR0_OVF_callback[L_u8I]))
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	fc 01       	movw	r30, r24
    17d6:	ef 52       	subi	r30, 0x2F	; 47
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 81       	ld	r24, Z
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	b9 f5       	brne	.+110    	; 0x184e <MTMR_vCheckTasks+0x94>
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	fc 01       	movw	r30, r24
    17ec:	ec 5c       	subi	r30, 0xCC	; 204
    17ee:	fe 4f       	sbci	r31, 0xFE	; 254
    17f0:	80 81       	ld	r24, Z
    17f2:	91 81       	ldd	r25, Z+1	; 0x01
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	59 f1       	breq	.+86     	; 0x184e <MTMR_vCheckTasks+0x94>
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	88 2f       	mov	r24, r24
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	fc 01       	movw	r30, r24
    1800:	e3 5d       	subi	r30, 0xD3	; 211
    1802:	fe 4f       	sbci	r31, 0xFE	; 254
    1804:	80 81       	ld	r24, Z
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	11 f5       	brne	.+68     	; 0x184e <MTMR_vCheckTasks+0x94>
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	fc 01       	movw	r30, r24
    1816:	ec 5c       	subi	r30, 0xCC	; 204
    1818:	fe 4f       	sbci	r31, 0xFE	; 254
    181a:	20 81       	ld	r18, Z
    181c:	31 81       	ldd	r19, Z+1	; 0x01
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	9b 81       	ldd	r25, Y+3	; 0x03
    1822:	28 17       	cp	r18, r24
    1824:	39 07       	cpc	r19, r25
    1826:	99 f0       	breq	.+38     	; 0x184e <MTMR_vCheckTasks+0x94>
		{
			TMR0_OVF_callback[L_u8I]();
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	88 2f       	mov	r24, r24
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	fc 01       	movw	r30, r24
    1834:	ec 5c       	subi	r30, 0xCC	; 204
    1836:	fe 4f       	sbci	r31, 0xFE	; 254
    1838:	01 90       	ld	r0, Z+
    183a:	f0 81       	ld	r31, Z
    183c:	e0 2d       	mov	r30, r0
    183e:	09 95       	icall
			G_u8FlagOVF0[L_u8I]=0;
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	88 2f       	mov	r24, r24
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	fc 01       	movw	r30, r24
    1848:	e3 5d       	subi	r30, 0xD3	; 211
    184a:	fe 4f       	sbci	r31, 0xFE	; 254
    184c:	10 82       	st	Z, r1

}

void MTMR_vCheckTasks(void(*ptr)(void))
{
	for(u08 L_u8I=0;L_u8I<5;L_u8I++)
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	8f 5f       	subi	r24, 0xFF	; 255
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	85 30       	cpi	r24, 0x05	; 5
    1858:	08 f4       	brcc	.+2      	; 0x185c <MTMR_vCheckTasks+0xa2>
    185a:	b9 cf       	rjmp	.-142    	; 0x17ce <MTMR_vCheckTasks+0x14>
		}


	}

}
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <MTMR_vDelayCTC>:

void MTMR_vDelayCTC(u08 A_u8TimerNO,u16 A_u16Time,u16 A_u16CompareVaule,void(*ptr)(void))
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	29 97       	sbiw	r28, 0x09	; 9
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	7b 83       	std	Y+3, r23	; 0x03
    1880:	6a 83       	std	Y+2, r22	; 0x02
    1882:	5d 83       	std	Y+5, r21	; 0x05
    1884:	4c 83       	std	Y+4, r20	; 0x04
    1886:	3f 83       	std	Y+7, r19	; 0x07
    1888:	2e 83       	std	Y+6, r18	; 0x06
	switch (A_u8TimerNO)
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	39 87       	std	Y+9, r19	; 0x09
    1892:	28 87       	std	Y+8, r18	; 0x08
    1894:	48 85       	ldd	r20, Y+8	; 0x08
    1896:	59 85       	ldd	r21, Y+9	; 0x09
    1898:	41 30       	cpi	r20, 0x01	; 1
    189a:	51 05       	cpc	r21, r1
    189c:	49 f1       	breq	.+82     	; 0x18f0 <MTMR_vDelayCTC+0x88>
    189e:	88 85       	ldd	r24, Y+8	; 0x08
    18a0:	99 85       	ldd	r25, Y+9	; 0x09
    18a2:	82 30       	cpi	r24, 0x02	; 2
    18a4:	91 05       	cpc	r25, r1
    18a6:	09 f4       	brne	.+2      	; 0x18aa <MTMR_vDelayCTC+0x42>
    18a8:	40 c0       	rjmp	.+128    	; 0x192a <MTMR_vDelayCTC+0xc2>
    18aa:	28 85       	ldd	r18, Y+8	; 0x08
    18ac:	39 85       	ldd	r19, Y+9	; 0x09
    18ae:	21 15       	cp	r18, r1
    18b0:	31 05       	cpc	r19, r1
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <MTMR_vDelayCTC+0x4e>
    18b4:	56 c0       	rjmp	.+172    	; 0x1962 <MTMR_vDelayCTC+0xfa>
	{
	case Timer0:
		G_u16CounterCTC0=(A_u16Time*1000)/A_u16CompareVaule;
    18b6:	2a 81       	ldd	r18, Y+2	; 0x02
    18b8:	3b 81       	ldd	r19, Y+3	; 0x03
    18ba:	88 ee       	ldi	r24, 0xE8	; 232
    18bc:	93 e0       	ldi	r25, 0x03	; 3
    18be:	ac 01       	movw	r20, r24
    18c0:	24 9f       	mul	r18, r20
    18c2:	c0 01       	movw	r24, r0
    18c4:	25 9f       	mul	r18, r21
    18c6:	90 0d       	add	r25, r0
    18c8:	34 9f       	mul	r19, r20
    18ca:	90 0d       	add	r25, r0
    18cc:	11 24       	eor	r1, r1
    18ce:	2c 81       	ldd	r18, Y+4	; 0x04
    18d0:	3d 81       	ldd	r19, Y+5	; 0x05
    18d2:	b9 01       	movw	r22, r18
    18d4:	0e 94 ed 30 	call	0x61da	; 0x61da <__udivmodhi4>
    18d8:	cb 01       	movw	r24, r22
    18da:	90 93 1a 01 	sts	0x011A, r25
    18de:	80 93 19 01 	sts	0x0119, r24
		TMR0_CTC_callback=ptr;
    18e2:	8e 81       	ldd	r24, Y+6	; 0x06
    18e4:	9f 81       	ldd	r25, Y+7	; 0x07
    18e6:	90 93 28 01 	sts	0x0128, r25
    18ea:	80 93 27 01 	sts	0x0127, r24
    18ee:	39 c0       	rjmp	.+114    	; 0x1962 <MTMR_vDelayCTC+0xfa>
		break;
	case Timer1:
		G_u16CounterCTC1=(A_u16Time*1000)/A_u16CompareVaule;
    18f0:	2a 81       	ldd	r18, Y+2	; 0x02
    18f2:	3b 81       	ldd	r19, Y+3	; 0x03
    18f4:	88 ee       	ldi	r24, 0xE8	; 232
    18f6:	93 e0       	ldi	r25, 0x03	; 3
    18f8:	ac 01       	movw	r20, r24
    18fa:	24 9f       	mul	r18, r20
    18fc:	c0 01       	movw	r24, r0
    18fe:	25 9f       	mul	r18, r21
    1900:	90 0d       	add	r25, r0
    1902:	34 9f       	mul	r19, r20
    1904:	90 0d       	add	r25, r0
    1906:	11 24       	eor	r1, r1
    1908:	2c 81       	ldd	r18, Y+4	; 0x04
    190a:	3d 81       	ldd	r19, Y+5	; 0x05
    190c:	b9 01       	movw	r22, r18
    190e:	0e 94 ed 30 	call	0x61da	; 0x61da <__udivmodhi4>
    1912:	cb 01       	movw	r24, r22
    1914:	90 93 33 01 	sts	0x0133, r25
    1918:	80 93 32 01 	sts	0x0132, r24
		TMR1_CTC_callback=ptr;
    191c:	8e 81       	ldd	r24, Y+6	; 0x06
    191e:	9f 81       	ldd	r25, Y+7	; 0x07
    1920:	90 93 17 01 	sts	0x0117, r25
    1924:	80 93 16 01 	sts	0x0116, r24
    1928:	1c c0       	rjmp	.+56     	; 0x1962 <MTMR_vDelayCTC+0xfa>
		break;
	case Timer2:
		G_u16CounterCTC2=(A_u16Time*1000)/A_u16CompareVaule;
    192a:	2a 81       	ldd	r18, Y+2	; 0x02
    192c:	3b 81       	ldd	r19, Y+3	; 0x03
    192e:	88 ee       	ldi	r24, 0xE8	; 232
    1930:	93 e0       	ldi	r25, 0x03	; 3
    1932:	ac 01       	movw	r20, r24
    1934:	24 9f       	mul	r18, r20
    1936:	c0 01       	movw	r24, r0
    1938:	25 9f       	mul	r18, r21
    193a:	90 0d       	add	r25, r0
    193c:	34 9f       	mul	r19, r20
    193e:	90 0d       	add	r25, r0
    1940:	11 24       	eor	r1, r1
    1942:	2c 81       	ldd	r18, Y+4	; 0x04
    1944:	3d 81       	ldd	r19, Y+5	; 0x05
    1946:	b9 01       	movw	r22, r18
    1948:	0e 94 ed 30 	call	0x61da	; 0x61da <__udivmodhi4>
    194c:	cb 01       	movw	r24, r22
    194e:	90 93 26 01 	sts	0x0126, r25
    1952:	80 93 25 01 	sts	0x0125, r24
		TMR2_CTC_callback=ptr;
    1956:	8e 81       	ldd	r24, Y+6	; 0x06
    1958:	9f 81       	ldd	r25, Y+7	; 0x07
    195a:	90 93 2c 01 	sts	0x012C, r25
    195e:	80 93 2b 01 	sts	0x012B, r24
		break;
	}
		MTMR_vSetCompareValue(A_u8TimerNO,A_u16CompareVaule);
    1962:	2c 81       	ldd	r18, Y+4	; 0x04
    1964:	3d 81       	ldd	r19, Y+5	; 0x05
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	b9 01       	movw	r22, r18
    196a:	0e 94 ce 09 	call	0x139c	; 0x139c <MTMR_vSetCompareValue>
		MTMR_vStartTimer(A_u8TimerNO);
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	0e 94 1b 0a 	call	0x1436	; 0x1436 <MTMR_vStartTimer>

}
    1974:	29 96       	adiw	r28, 0x09	; 9
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <MTMR_u16GetCaptureTime>:

u16 MTMR_u16GetCaptureTime(void)
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62

	return ICR1;
    198e:	e6 e4       	ldi	r30, 0x46	; 70
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01

}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <MTMR_u8GetTimeValue>:
u08 MTMR_u8GetTimeValue(void)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62

	return TCNT0;
    19a4:	e2 e5       	ldi	r30, 0x52	; 82
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z

}
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <MTMR_vSetIcuTrigger>:
void MTMR_vSetIcuTrigger(ICU_Trigger_t A_xIcuTrigger)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <MTMR_vSetIcuTrigger+0x6>
    19b6:	0f 92       	push	r0
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	89 83       	std	Y+1, r24	; 0x01
//this func used in icu to change trigger mood from rise to fall and from fall to rise
	switch (A_xIcuTrigger)
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	3b 83       	std	Y+3, r19	; 0x03
    19c6:	2a 83       	std	Y+2, r18	; 0x02
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	9b 81       	ldd	r25, Y+3	; 0x03
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	31 f0       	breq	.+12     	; 0x19dc <MTMR_vSetIcuTrigger+0x2c>
    19d0:	2a 81       	ldd	r18, Y+2	; 0x02
    19d2:	3b 81       	ldd	r19, Y+3	; 0x03
    19d4:	21 30       	cpi	r18, 0x01	; 1
    19d6:	31 05       	cpc	r19, r1
    19d8:	49 f0       	breq	.+18     	; 0x19ec <MTMR_vSetIcuTrigger+0x3c>
    19da:	0f c0       	rjmp	.+30     	; 0x19fa <MTMR_vSetIcuTrigger+0x4a>
	{
	case ICU_Falling:
		CLR_BIT(TCCR1B, ICES1) ;
    19dc:	ae e4       	ldi	r26, 0x4E	; 78
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	ee e4       	ldi	r30, 0x4E	; 78
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	8f 7b       	andi	r24, 0xBF	; 191
    19e8:	8c 93       	st	X, r24
    19ea:	07 c0       	rjmp	.+14     	; 0x19fa <MTMR_vSetIcuTrigger+0x4a>
		break;
	case ICU_Rising:
		SET_BIT(TCCR1B, ICES1) ;
    19ec:	ae e4       	ldi	r26, 0x4E	; 78
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ee e4       	ldi	r30, 0x4E	; 78
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	80 64       	ori	r24, 0x40	; 64
    19f8:	8c 93       	st	X, r24
		break;
	}
}
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <MTMR_vEnableInterrupt>:

void MTMR_vEnableInterrupt(u08 A_u8TimerNO,u08 A_u8InterruptType)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	2a 97       	sbiw	r28, 0x0a	; 10
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	6a 83       	std	Y+2, r22	; 0x02
//timsk is regester used to control all timer praphral interrupt
	switch (A_u8TimerNO)
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	3a 87       	std	Y+10, r19	; 0x0a
    1a26:	29 87       	std	Y+9, r18	; 0x09
    1a28:	89 85       	ldd	r24, Y+9	; 0x09
    1a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2c:	81 30       	cpi	r24, 0x01	; 1
    1a2e:	91 05       	cpc	r25, r1
    1a30:	51 f1       	breq	.+84     	; 0x1a86 <MTMR_vEnableInterrupt+0x80>
    1a32:	29 85       	ldd	r18, Y+9	; 0x09
    1a34:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a36:	22 30       	cpi	r18, 0x02	; 2
    1a38:	31 05       	cpc	r19, r1
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <MTMR_vEnableInterrupt+0x38>
    1a3c:	56 c0       	rjmp	.+172    	; 0x1aea <MTMR_vEnableInterrupt+0xe4>
    1a3e:	89 85       	ldd	r24, Y+9	; 0x09
    1a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a42:	00 97       	sbiw	r24, 0x00	; 0
    1a44:	09 f0       	breq	.+2      	; 0x1a48 <MTMR_vEnableInterrupt+0x42>
    1a46:	6f c0       	rjmp	.+222    	; 0x1b26 <MTMR_vEnableInterrupt+0x120>
	{
	case Timer0:
		switch (A_u8InterruptType)
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	38 87       	std	Y+8, r19	; 0x08
    1a50:	2f 83       	std	Y+7, r18	; 0x07
    1a52:	8f 81       	ldd	r24, Y+7	; 0x07
    1a54:	98 85       	ldd	r25, Y+8	; 0x08
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	31 f0       	breq	.+12     	; 0x1a66 <MTMR_vEnableInterrupt+0x60>
    1a5a:	2f 81       	ldd	r18, Y+7	; 0x07
    1a5c:	38 85       	ldd	r19, Y+8	; 0x08
    1a5e:	21 30       	cpi	r18, 0x01	; 1
    1a60:	31 05       	cpc	r19, r1
    1a62:	49 f0       	breq	.+18     	; 0x1a76 <MTMR_vEnableInterrupt+0x70>
    1a64:	60 c0       	rjmp	.+192    	; 0x1b26 <MTMR_vEnableInterrupt+0x120>
		{
		case OVF_INTERRUPT:
			SET_BIT(TIMSK, TOIE0) ;
    1a66:	a9 e5       	ldi	r26, 0x59	; 89
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e9 e5       	ldi	r30, 0x59	; 89
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	81 60       	ori	r24, 0x01	; 1
    1a72:	8c 93       	st	X, r24
    1a74:	58 c0       	rjmp	.+176    	; 0x1b26 <MTMR_vEnableInterrupt+0x120>
			break;
		case CTC_INTERRUPT:
			SET_BIT(TIMSK, OCIE0) ;
    1a76:	a9 e5       	ldi	r26, 0x59	; 89
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e9 e5       	ldi	r30, 0x59	; 89
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	82 60       	ori	r24, 0x02	; 2
    1a82:	8c 93       	st	X, r24
    1a84:	50 c0       	rjmp	.+160    	; 0x1b26 <MTMR_vEnableInterrupt+0x120>
			break;
		}
		break;

		case Timer1:
			switch (A_u8InterruptType)
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	3e 83       	std	Y+6, r19	; 0x06
    1a8e:	2d 83       	std	Y+5, r18	; 0x05
    1a90:	8d 81       	ldd	r24, Y+5	; 0x05
    1a92:	9e 81       	ldd	r25, Y+6	; 0x06
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	91 05       	cpc	r25, r1
    1a98:	89 f0       	breq	.+34     	; 0x1abc <MTMR_vEnableInterrupt+0xb6>
    1a9a:	2d 81       	ldd	r18, Y+5	; 0x05
    1a9c:	3e 81       	ldd	r19, Y+6	; 0x06
    1a9e:	22 30       	cpi	r18, 0x02	; 2
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	d9 f0       	breq	.+54     	; 0x1ada <MTMR_vEnableInterrupt+0xd4>
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	e9 f5       	brne	.+122    	; 0x1b26 <MTMR_vEnableInterrupt+0x120>
			{
			case OVF_INTERRUPT:
				SET_BIT(TIMSK, TOIE1) ;
    1aac:	a9 e5       	ldi	r26, 0x59	; 89
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e9 e5       	ldi	r30, 0x59	; 89
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	84 60       	ori	r24, 0x04	; 4
    1ab8:	8c 93       	st	X, r24
    1aba:	35 c0       	rjmp	.+106    	; 0x1b26 <MTMR_vEnableInterrupt+0x120>
				break;
			case CTC_INTERRUPT:
				SET_BIT(TIMSK, OCIE1A) ;
    1abc:	a9 e5       	ldi	r26, 0x59	; 89
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e9 e5       	ldi	r30, 0x59	; 89
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	80 61       	ori	r24, 0x10	; 16
    1ac8:	8c 93       	st	X, r24
				SET_BIT(TIMSK, OCIE1B) ;
    1aca:	a9 e5       	ldi	r26, 0x59	; 89
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e9 e5       	ldi	r30, 0x59	; 89
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	88 60       	ori	r24, 0x08	; 8
    1ad6:	8c 93       	st	X, r24
    1ad8:	26 c0       	rjmp	.+76     	; 0x1b26 <MTMR_vEnableInterrupt+0x120>
				break;
			case ICU_INTERRUPT:
				SET_BIT(TIMSK, TICIE1) ;
    1ada:	a9 e5       	ldi	r26, 0x59	; 89
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e9 e5       	ldi	r30, 0x59	; 89
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	80 62       	ori	r24, 0x20	; 32
    1ae6:	8c 93       	st	X, r24
    1ae8:	1e c0       	rjmp	.+60     	; 0x1b26 <MTMR_vEnableInterrupt+0x120>
				break;
			}
			break;

			case Timer2:
				switch (A_u8InterruptType)
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3c 83       	std	Y+4, r19	; 0x04
    1af2:	2b 83       	std	Y+3, r18	; 0x03
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	31 f0       	breq	.+12     	; 0x1b08 <MTMR_vEnableInterrupt+0x102>
    1afc:	2b 81       	ldd	r18, Y+3	; 0x03
    1afe:	3c 81       	ldd	r19, Y+4	; 0x04
    1b00:	21 30       	cpi	r18, 0x01	; 1
    1b02:	31 05       	cpc	r19, r1
    1b04:	49 f0       	breq	.+18     	; 0x1b18 <MTMR_vEnableInterrupt+0x112>
    1b06:	0f c0       	rjmp	.+30     	; 0x1b26 <MTMR_vEnableInterrupt+0x120>
				{
				case OVF_INTERRUPT:
					SET_BIT(TIMSK, TOIE2) ;
    1b08:	a9 e5       	ldi	r26, 0x59	; 89
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e9 e5       	ldi	r30, 0x59	; 89
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	80 64       	ori	r24, 0x40	; 64
    1b14:	8c 93       	st	X, r24
    1b16:	07 c0       	rjmp	.+14     	; 0x1b26 <MTMR_vEnableInterrupt+0x120>
					break;
				case CTC_INTERRUPT:
					SET_BIT(TIMSK, OCIE2) ;
    1b18:	a9 e5       	ldi	r26, 0x59	; 89
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e9 e5       	ldi	r30, 0x59	; 89
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	80 68       	ori	r24, 0x80	; 128
    1b24:	8c 93       	st	X, r24
					break;
				}

				break;
	}
}
    1b26:	2a 96       	adiw	r28, 0x0a	; 10
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <MTMR_vDisableInterrupt>:

void MTMR_vDisableInterrupt(u08 A_u8TimerNO,u08 A_u8InterruptType)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	2a 97       	sbiw	r28, 0x0a	; 10
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8TimerNO)
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	3a 87       	std	Y+10, r19	; 0x0a
    1b58:	29 87       	std	Y+9, r18	; 0x09
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	91 05       	cpc	r25, r1
    1b62:	51 f1       	breq	.+84     	; 0x1bb8 <MTMR_vDisableInterrupt+0x80>
    1b64:	29 85       	ldd	r18, Y+9	; 0x09
    1b66:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b68:	22 30       	cpi	r18, 0x02	; 2
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <MTMR_vDisableInterrupt+0x38>
    1b6e:	56 c0       	rjmp	.+172    	; 0x1c1c <MTMR_vDisableInterrupt+0xe4>
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <MTMR_vDisableInterrupt+0x42>
    1b78:	6f c0       	rjmp	.+222    	; 0x1c58 <MTMR_vDisableInterrupt+0x120>
	{
	case Timer0:
		switch (A_u8InterruptType)
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	38 87       	std	Y+8, r19	; 0x08
    1b82:	2f 83       	std	Y+7, r18	; 0x07
    1b84:	8f 81       	ldd	r24, Y+7	; 0x07
    1b86:	98 85       	ldd	r25, Y+8	; 0x08
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	31 f0       	breq	.+12     	; 0x1b98 <MTMR_vDisableInterrupt+0x60>
    1b8c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b8e:	38 85       	ldd	r19, Y+8	; 0x08
    1b90:	21 30       	cpi	r18, 0x01	; 1
    1b92:	31 05       	cpc	r19, r1
    1b94:	49 f0       	breq	.+18     	; 0x1ba8 <MTMR_vDisableInterrupt+0x70>
    1b96:	60 c0       	rjmp	.+192    	; 0x1c58 <MTMR_vDisableInterrupt+0x120>
		{
		case OVF_INTERRUPT:
			CLR_BIT(TIMSK, TOIE0) ;
    1b98:	a9 e5       	ldi	r26, 0x59	; 89
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e9 e5       	ldi	r30, 0x59	; 89
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8e 7f       	andi	r24, 0xFE	; 254
    1ba4:	8c 93       	st	X, r24
    1ba6:	58 c0       	rjmp	.+176    	; 0x1c58 <MTMR_vDisableInterrupt+0x120>
			break;
		case CTC_INTERRUPT:
			CLR_BIT(TIMSK, OCIE0) ;
    1ba8:	a9 e5       	ldi	r26, 0x59	; 89
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e9 e5       	ldi	r30, 0x59	; 89
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8d 7f       	andi	r24, 0xFD	; 253
    1bb4:	8c 93       	st	X, r24
    1bb6:	50 c0       	rjmp	.+160    	; 0x1c58 <MTMR_vDisableInterrupt+0x120>
			break;
		}
		break;

		case Timer1:
			switch (A_u8InterruptType)
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	3e 83       	std	Y+6, r19	; 0x06
    1bc0:	2d 83       	std	Y+5, r18	; 0x05
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	81 30       	cpi	r24, 0x01	; 1
    1bc8:	91 05       	cpc	r25, r1
    1bca:	89 f0       	breq	.+34     	; 0x1bee <MTMR_vDisableInterrupt+0xb6>
    1bcc:	2d 81       	ldd	r18, Y+5	; 0x05
    1bce:	3e 81       	ldd	r19, Y+6	; 0x06
    1bd0:	22 30       	cpi	r18, 0x02	; 2
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	d9 f0       	breq	.+54     	; 0x1c0c <MTMR_vDisableInterrupt+0xd4>
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	e9 f5       	brne	.+122    	; 0x1c58 <MTMR_vDisableInterrupt+0x120>
			{
			case OVF_INTERRUPT:
				CLR_BIT(TIMSK, TOIE1) ;
    1bde:	a9 e5       	ldi	r26, 0x59	; 89
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e9 e5       	ldi	r30, 0x59	; 89
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	8b 7f       	andi	r24, 0xFB	; 251
    1bea:	8c 93       	st	X, r24
    1bec:	35 c0       	rjmp	.+106    	; 0x1c58 <MTMR_vDisableInterrupt+0x120>
				break;
			case CTC_INTERRUPT:
				CLR_BIT(TIMSK, OCIE1A) ;
    1bee:	a9 e5       	ldi	r26, 0x59	; 89
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e9 e5       	ldi	r30, 0x59	; 89
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8f 7e       	andi	r24, 0xEF	; 239
    1bfa:	8c 93       	st	X, r24
				CLR_BIT(TIMSK, OCIE1B) ;
    1bfc:	a9 e5       	ldi	r26, 0x59	; 89
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e9 e5       	ldi	r30, 0x59	; 89
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	87 7f       	andi	r24, 0xF7	; 247
    1c08:	8c 93       	st	X, r24
    1c0a:	26 c0       	rjmp	.+76     	; 0x1c58 <MTMR_vDisableInterrupt+0x120>
				break;
			case ICU_INTERRUPT:
				CLR_BIT(TIMSK, TICIE1) ;
    1c0c:	a9 e5       	ldi	r26, 0x59	; 89
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e9 e5       	ldi	r30, 0x59	; 89
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	8f 7d       	andi	r24, 0xDF	; 223
    1c18:	8c 93       	st	X, r24
    1c1a:	1e c0       	rjmp	.+60     	; 0x1c58 <MTMR_vDisableInterrupt+0x120>
				break;
			}
			break;
			case Timer2:
				switch (A_u8InterruptType)
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	3c 83       	std	Y+4, r19	; 0x04
    1c24:	2b 83       	std	Y+3, r18	; 0x03
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	31 f0       	breq	.+12     	; 0x1c3a <MTMR_vDisableInterrupt+0x102>
    1c2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c30:	3c 81       	ldd	r19, Y+4	; 0x04
    1c32:	21 30       	cpi	r18, 0x01	; 1
    1c34:	31 05       	cpc	r19, r1
    1c36:	49 f0       	breq	.+18     	; 0x1c4a <MTMR_vDisableInterrupt+0x112>
    1c38:	0f c0       	rjmp	.+30     	; 0x1c58 <MTMR_vDisableInterrupt+0x120>
				{
				case OVF_INTERRUPT:
					CLR_BIT(TIMSK, TOIE2) ;
    1c3a:	a9 e5       	ldi	r26, 0x59	; 89
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e9 e5       	ldi	r30, 0x59	; 89
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8f 7b       	andi	r24, 0xBF	; 191
    1c46:	8c 93       	st	X, r24
    1c48:	07 c0       	rjmp	.+14     	; 0x1c58 <MTMR_vDisableInterrupt+0x120>
					break;
				case CTC_INTERRUPT:
					CLR_BIT(TIMSK, OCIE2) ;
    1c4a:	a9 e5       	ldi	r26, 0x59	; 89
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e9 e5       	ldi	r30, 0x59	; 89
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8f 77       	andi	r24, 0x7F	; 127
    1c56:	8c 93       	st	X, r24
					break;
				}
				break;
	}
}
    1c58:	2a 96       	adiw	r28, 0x0a	; 10
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <MTMR_vReadSignals>:

void MTMR_vReadSignals(u16* A_u16TimeOn,u16* A_u16TimeAll)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <MTMR_vReadSignals+0x6>
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <MTMR_vReadSignals+0x8>
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	7c 83       	std	Y+4, r23	; 0x04
    1c7c:	6b 83       	std	Y+3, r22	; 0x03
	ICR1=0;
    1c7e:	e6 e4       	ldi	r30, 0x46	; 70
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	11 82       	std	Z+1, r1	; 0x01
    1c84:	10 82       	st	Z, r1
	MTMR_vEnableInterrupt(Timer1,ICU_INTERRUPT);
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	62 e0       	ldi	r22, 0x02	; 2
    1c8a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <MTMR_vEnableInterrupt>
	//wait icu mission complete
	while(GS_u8ReadFlag==0);
    1c8e:	80 91 d0 00 	lds	r24, 0x00D0
    1c92:	88 23       	and	r24, r24
    1c94:	e1 f3       	breq	.-8      	; 0x1c8e <MTMR_vReadSignals+0x24>


	//to wait again when use this function next time
	GS_u8ReadFlag=0;
    1c96:	10 92 d0 00 	sts	0x00D0, r1
	//return time on and off values
	*A_u16TimeOn=GS_u16ont;
    1c9a:	80 91 ce 00 	lds	r24, 0x00CE
    1c9e:	90 91 cf 00 	lds	r25, 0x00CF
    1ca2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca6:	91 83       	std	Z+1, r25	; 0x01
    1ca8:	80 83       	st	Z, r24
	*A_u16TimeAll=GS_u16pt;
    1caa:	80 91 cc 00 	lds	r24, 0x00CC
    1cae:	90 91 cd 00 	lds	r25, 0x00CD
    1cb2:	eb 81       	ldd	r30, Y+3	; 0x03
    1cb4:	fc 81       	ldd	r31, Y+4	; 0x04
    1cb6:	91 83       	std	Z+1, r25	; 0x01
    1cb8:	80 83       	st	Z, r24
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <__vector_11>:
//interrupts:
void __vector_11(void)  __attribute__((signal));//TMR_0_ovf
void __vector_11(void)
{
    1cc8:	1f 92       	push	r1
    1cca:	0f 92       	push	r0
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	0f 92       	push	r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	ef 92       	push	r14
    1cd4:	ff 92       	push	r15
    1cd6:	0f 93       	push	r16
    1cd8:	1f 93       	push	r17
    1cda:	2f 93       	push	r18
    1cdc:	3f 93       	push	r19
    1cde:	4f 93       	push	r20
    1ce0:	5f 93       	push	r21
    1ce2:	6f 93       	push	r22
    1ce4:	7f 93       	push	r23
    1ce6:	8f 93       	push	r24
    1ce8:	9f 93       	push	r25
    1cea:	af 93       	push	r26
    1cec:	bf 93       	push	r27
    1cee:	ef 93       	push	r30
    1cf0:	ff 93       	push	r31
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	0f 92       	push	r0
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;


#if Prescaler_0==Prescaler_0_8
		MTMR_vSetPreloadValue(Timer0,6);
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	66 e0       	ldi	r22, 0x06	; 6
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	0e 94 99 09 	call	0x1332	; 0x1332 <MTMR_vSetPreloadValue>
		MTMR_vSetPreloadValue(Timer0,248);
#elif Prescaler_0==Prescaler_0_1024
		MTMR_vSetPreloadValue(Timer0,254);
#endif
//searching in functions which saved in array of pointer to function if any of them should run
	for(u08 L_u8I=0;L_u8I<5;L_u8I++)
    1d06:	19 82       	std	Y+1, r1	; 0x01
    1d08:	52 c0       	rjmp	.+164    	; 0x1dae <__vector_11+0xe6>
	{
		if((LS_u32Counter % G_u16CounterOVF0[L_u8I])==0)
    1d0a:	e0 90 d7 00 	lds	r14, 0x00D7
    1d0e:	f0 90 d8 00 	lds	r15, 0x00D8
    1d12:	00 91 d9 00 	lds	r16, 0x00D9
    1d16:	10 91 da 00 	lds	r17, 0x00DA
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	88 2f       	mov	r24, r24
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	fc 01       	movw	r30, r24
    1d26:	ee 5f       	subi	r30, 0xFE	; 254
    1d28:	fe 4f       	sbci	r31, 0xFE	; 254
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	9c 01       	movw	r18, r24
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	c8 01       	movw	r24, r16
    1d36:	b7 01       	movw	r22, r14
    1d38:	0e 94 14 31 	call	0x6228	; 0x6228 <__udivmodsi4>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	a1 05       	cpc	r26, r1
    1d44:	b1 05       	cpc	r27, r1
    1d46:	81 f5       	brne	.+96     	; 0x1da8 <__vector_11+0xe0>
		{
			if((TMR0_OVF_callback[L_u8I] != NULL)&&(G_u8FlagOVF0[L_u8I]==0))
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	fc 01       	movw	r30, r24
    1d54:	ec 5c       	subi	r30, 0xCC	; 204
    1d56:	fe 4f       	sbci	r31, 0xFE	; 254
    1d58:	80 81       	ld	r24, Z
    1d5a:	91 81       	ldd	r25, Z+1	; 0x01
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	21 f1       	breq	.+72     	; 0x1da8 <__vector_11+0xe0>
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	88 2f       	mov	r24, r24
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	fc 01       	movw	r30, r24
    1d68:	e3 5d       	subi	r30, 0xD3	; 211
    1d6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 23       	and	r24, r24
    1d70:	d9 f4       	brne	.+54     	; 0x1da8 <__vector_11+0xe0>
			{
				G_u8FlagOVF0[L_u8I]=1;
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	88 2f       	mov	r24, r24
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	fc 01       	movw	r30, r24
    1d7a:	e3 5d       	subi	r30, 0xD3	; 211
    1d7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	80 83       	st	Z, r24
				TMR0_OVF_callback[L_u8I]();
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	ec 5c       	subi	r30, 0xCC	; 204
    1d90:	fe 4f       	sbci	r31, 0xFE	; 254
    1d92:	01 90       	ld	r0, Z+
    1d94:	f0 81       	ld	r31, Z
    1d96:	e0 2d       	mov	r30, r0
    1d98:	09 95       	icall
				G_u8FlagOVF0[L_u8I]=0;
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	fc 01       	movw	r30, r24
    1da2:	e3 5d       	subi	r30, 0xD3	; 211
    1da4:	fe 4f       	sbci	r31, 0xFE	; 254
    1da6:	10 82       	st	Z, r1
		MTMR_vSetPreloadValue(Timer0,248);
#elif Prescaler_0==Prescaler_0_1024
		MTMR_vSetPreloadValue(Timer0,254);
#endif
//searching in functions which saved in array of pointer to function if any of them should run
	for(u08 L_u8I=0;L_u8I<5;L_u8I++)
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	8f 5f       	subi	r24, 0xFF	; 255
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	85 30       	cpi	r24, 0x05	; 5
    1db2:	08 f4       	brcc	.+2      	; 0x1db6 <__vector_11+0xee>
    1db4:	aa cf       	rjmp	.-172    	; 0x1d0a <__vector_11+0x42>
		}
	}


//make limit to timer 0 to 2w
		if(LS_u32Counter==4294964000)
    1db6:	80 91 d7 00 	lds	r24, 0x00D7
    1dba:	90 91 d8 00 	lds	r25, 0x00D8
    1dbe:	a0 91 d9 00 	lds	r26, 0x00D9
    1dc2:	b0 91 da 00 	lds	r27, 0x00DA
    1dc6:	80 32       	cpi	r24, 0x20	; 32
    1dc8:	23 ef       	ldi	r18, 0xF3	; 243
    1dca:	92 07       	cpc	r25, r18
    1dcc:	2f ef       	ldi	r18, 0xFF	; 255
    1dce:	a2 07       	cpc	r26, r18
    1dd0:	2f ef       	ldi	r18, 0xFF	; 255
    1dd2:	b2 07       	cpc	r27, r18
    1dd4:	41 f4       	brne	.+16     	; 0x1de6 <__vector_11+0x11e>
		{
			LS_u32Counter=0;
    1dd6:	10 92 d7 00 	sts	0x00D7, r1
    1dda:	10 92 d8 00 	sts	0x00D8, r1
    1dde:	10 92 d9 00 	sts	0x00D9, r1
    1de2:	10 92 da 00 	sts	0x00DA, r1
		}
		LS_u32Counter++ ;
    1de6:	80 91 d7 00 	lds	r24, 0x00D7
    1dea:	90 91 d8 00 	lds	r25, 0x00D8
    1dee:	a0 91 d9 00 	lds	r26, 0x00D9
    1df2:	b0 91 da 00 	lds	r27, 0x00DA
    1df6:	01 96       	adiw	r24, 0x01	; 1
    1df8:	a1 1d       	adc	r26, r1
    1dfa:	b1 1d       	adc	r27, r1
    1dfc:	80 93 d7 00 	sts	0x00D7, r24
    1e00:	90 93 d8 00 	sts	0x00D8, r25
    1e04:	a0 93 d9 00 	sts	0x00D9, r26
    1e08:	b0 93 da 00 	sts	0x00DA, r27

}
    1e0c:	0f 90       	pop	r0
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	ff 91       	pop	r31
    1e14:	ef 91       	pop	r30
    1e16:	bf 91       	pop	r27
    1e18:	af 91       	pop	r26
    1e1a:	9f 91       	pop	r25
    1e1c:	8f 91       	pop	r24
    1e1e:	7f 91       	pop	r23
    1e20:	6f 91       	pop	r22
    1e22:	5f 91       	pop	r21
    1e24:	4f 91       	pop	r20
    1e26:	3f 91       	pop	r19
    1e28:	2f 91       	pop	r18
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	ff 90       	pop	r15
    1e30:	ef 90       	pop	r14
    1e32:	0f 90       	pop	r0
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	0f 90       	pop	r0
    1e38:	1f 90       	pop	r1
    1e3a:	18 95       	reti

00001e3c <__vector_9>:
void __vector_9(void)  __attribute__((signal));//TMR_1_ovf
void __vector_9(void)
{
    1e3c:	1f 92       	push	r1
    1e3e:	0f 92       	push	r0
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	0f 92       	push	r0
    1e44:	11 24       	eor	r1, r1
    1e46:	2f 93       	push	r18
    1e48:	3f 93       	push	r19
    1e4a:	4f 93       	push	r20
    1e4c:	5f 93       	push	r21
    1e4e:	6f 93       	push	r22
    1e50:	7f 93       	push	r23
    1e52:	8f 93       	push	r24
    1e54:	9f 93       	push	r25
    1e56:	af 93       	push	r26
    1e58:	bf 93       	push	r27
    1e5a:	ef 93       	push	r30
    1e5c:	ff 93       	push	r31
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	0f 92       	push	r0
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
	static u16 LS_u16Counter = 0;
#if Prescaler_1==Prescaler_1_8
		MTMR_vSetPreloadValue(Timer1,15536);
#elif Prescaler_1==Prescaler_1_64
		MTMR_vSetPreloadValue(Timer1,59286);
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	66 e9       	ldi	r22, 0x96	; 150
    1e6c:	77 ee       	ldi	r23, 0xE7	; 231
    1e6e:	0e 94 99 09 	call	0x1332	; 0x1332 <MTMR_vSetPreloadValue>
#elif Prescaler_1==Prescaler_1_1024
		MTMR_vSetPreloadValue(Timer1,65145);
#endif
//searching in functions which saved in array of pointer to function if any of them should run

	for(u08 L_u8I=0;L_u8I<5;L_u8I++)
    1e72:	19 82       	std	Y+1, r1	; 0x01
    1e74:	2f c0       	rjmp	.+94     	; 0x1ed4 <__vector_9+0x98>
	{
		if((LS_u16Counter % G_u16CounterOVF1[L_u8I])==0)
    1e76:	40 91 db 00 	lds	r20, 0x00DB
    1e7a:	50 91 dc 00 	lds	r21, 0x00DC
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	88 2f       	mov	r24, r24
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	fc 01       	movw	r30, r24
    1e8a:	e5 5e       	subi	r30, 0xE5	; 229
    1e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e8e:	20 81       	ld	r18, Z
    1e90:	31 81       	ldd	r19, Z+1	; 0x01
    1e92:	ca 01       	movw	r24, r20
    1e94:	b9 01       	movw	r22, r18
    1e96:	0e 94 ed 30 	call	0x61da	; 0x61da <__udivmodhi4>
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	c1 f4       	brne	.+48     	; 0x1ece <__vector_9+0x92>
		{
			if(TMR1_OVF_callback[L_u8I] != NULL)
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	e4 5f       	subi	r30, 0xF4	; 244
    1eac:	fe 4f       	sbci	r31, 0xFE	; 254
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	61 f0       	breq	.+24     	; 0x1ece <__vector_9+0x92>
			{
				TMR1_OVF_callback[L_u8I]();
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	e4 5f       	subi	r30, 0xF4	; 244
    1ec4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec6:	01 90       	ld	r0, Z+
    1ec8:	f0 81       	ld	r31, Z
    1eca:	e0 2d       	mov	r30, r0
    1ecc:	09 95       	icall
#elif Prescaler_1==Prescaler_1_1024
		MTMR_vSetPreloadValue(Timer1,65145);
#endif
//searching in functions which saved in array of pointer to function if any of them should run

	for(u08 L_u8I=0;L_u8I<5;L_u8I++)
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	8f 5f       	subi	r24, 0xFF	; 255
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	85 30       	cpi	r24, 0x05	; 5
    1ed8:	70 f2       	brcs	.-100    	; 0x1e76 <__vector_9+0x3a>

		}
	}


		MTMR_vSetPreloadValue(Timer0,6);
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	66 e0       	ldi	r22, 0x06	; 6
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	0e 94 99 09 	call	0x1332	; 0x1332 <MTMR_vSetPreloadValue>

//make limit to timer 1 to 10ms
		if(LS_u16Counter==500)
    1ee4:	80 91 db 00 	lds	r24, 0x00DB
    1ee8:	90 91 dc 00 	lds	r25, 0x00DC
    1eec:	21 e0       	ldi	r18, 0x01	; 1
    1eee:	84 3f       	cpi	r24, 0xF4	; 244
    1ef0:	92 07       	cpc	r25, r18
    1ef2:	21 f4       	brne	.+8      	; 0x1efc <__vector_9+0xc0>
		{
			LS_u16Counter=0;
    1ef4:	10 92 dc 00 	sts	0x00DC, r1
    1ef8:	10 92 db 00 	sts	0x00DB, r1
		}
		LS_u16Counter++ ;
    1efc:	80 91 db 00 	lds	r24, 0x00DB
    1f00:	90 91 dc 00 	lds	r25, 0x00DC
    1f04:	01 96       	adiw	r24, 0x01	; 1
    1f06:	90 93 dc 00 	sts	0x00DC, r25
    1f0a:	80 93 db 00 	sts	0x00DB, r24

}
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	ff 91       	pop	r31
    1f16:	ef 91       	pop	r30
    1f18:	bf 91       	pop	r27
    1f1a:	af 91       	pop	r26
    1f1c:	9f 91       	pop	r25
    1f1e:	8f 91       	pop	r24
    1f20:	7f 91       	pop	r23
    1f22:	6f 91       	pop	r22
    1f24:	5f 91       	pop	r21
    1f26:	4f 91       	pop	r20
    1f28:	3f 91       	pop	r19
    1f2a:	2f 91       	pop	r18
    1f2c:	0f 90       	pop	r0
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	0f 90       	pop	r0
    1f32:	1f 90       	pop	r1
    1f34:	18 95       	reti

00001f36 <__vector_5>:
void __vector_5(void)  __attribute__((signal));//TMR_2_ovf
void __vector_5(void)
{
    1f36:	1f 92       	push	r1
    1f38:	0f 92       	push	r0
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	0f 92       	push	r0
    1f3e:	11 24       	eor	r1, r1
    1f40:	ef 92       	push	r14
    1f42:	ff 92       	push	r15
    1f44:	0f 93       	push	r16
    1f46:	1f 93       	push	r17
    1f48:	2f 93       	push	r18
    1f4a:	3f 93       	push	r19
    1f4c:	4f 93       	push	r20
    1f4e:	5f 93       	push	r21
    1f50:	6f 93       	push	r22
    1f52:	7f 93       	push	r23
    1f54:	8f 93       	push	r24
    1f56:	9f 93       	push	r25
    1f58:	af 93       	push	r26
    1f5a:	bf 93       	push	r27
    1f5c:	ef 93       	push	r30
    1f5e:	ff 93       	push	r31
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	0f 92       	push	r0
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
	static u32 LS_u32Counter = 0;
#if Prescaler_2==Prescaler_2_8
		MTMR_vSetPreloadValue(Timer2,6);
    1f6a:	82 e0       	ldi	r24, 0x02	; 2
    1f6c:	66 e0       	ldi	r22, 0x06	; 6
    1f6e:	70 e0       	ldi	r23, 0x00	; 0
    1f70:	0e 94 99 09 	call	0x1332	; 0x1332 <MTMR_vSetPreloadValue>
#elif Prescaler_2==Prescaler_2_1024
		MTMR_vSetPreloadValue(Timer2,254);
#endif
//searching in functions which saved in array of pointer to function if any of them should run

	for(u08 L_u8I=0;L_u8I<5;L_u8I++)
    1f74:	19 82       	std	Y+1, r1	; 0x01
    1f76:	3a c0       	rjmp	.+116    	; 0x1fec <__vector_5+0xb6>
	{
		if((LS_u32Counter % G_u16CounterOVF2[L_u8I])==0)
    1f78:	e0 90 dd 00 	lds	r14, 0x00DD
    1f7c:	f0 90 de 00 	lds	r15, 0x00DE
    1f80:	00 91 df 00 	lds	r16, 0x00DF
    1f84:	10 91 e0 00 	lds	r17, 0x00E0
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	fc 01       	movw	r30, r24
    1f94:	e0 5c       	subi	r30, 0xC0	; 192
    1f96:	fe 4f       	sbci	r31, 0xFE	; 254
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	9c 01       	movw	r18, r24
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	c8 01       	movw	r24, r16
    1fa4:	b7 01       	movw	r22, r14
    1fa6:	0e 94 14 31 	call	0x6228	; 0x6228 <__udivmodsi4>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	a1 05       	cpc	r26, r1
    1fb2:	b1 05       	cpc	r27, r1
    1fb4:	c1 f4       	brne	.+48     	; 0x1fe6 <__vector_5+0xb0>
		{
			if(TMR2_OVF_callback[L_u8I] != NULL)
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	e6 5b       	subi	r30, 0xB6	; 182
    1fc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	61 f0       	breq	.+24     	; 0x1fe6 <__vector_5+0xb0>
			{
				TMR2_OVF_callback[L_u8I]();
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	88 2f       	mov	r24, r24
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	fc 01       	movw	r30, r24
    1fda:	e6 5b       	subi	r30, 0xB6	; 182
    1fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fde:	01 90       	ld	r0, Z+
    1fe0:	f0 81       	ld	r31, Z
    1fe2:	e0 2d       	mov	r30, r0
    1fe4:	09 95       	icall
#elif Prescaler_2==Prescaler_2_1024
		MTMR_vSetPreloadValue(Timer2,254);
#endif
//searching in functions which saved in array of pointer to function if any of them should run

	for(u08 L_u8I=0;L_u8I<5;L_u8I++)
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	8f 5f       	subi	r24, 0xFF	; 255
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	85 30       	cpi	r24, 0x05	; 5
    1ff0:	18 f2       	brcs	.-122    	; 0x1f78 <__vector_5+0x42>

		}
	}

//make limit to timer 2 to 2w
		if(LS_u32Counter==4294964000)
    1ff2:	80 91 dd 00 	lds	r24, 0x00DD
    1ff6:	90 91 de 00 	lds	r25, 0x00DE
    1ffa:	a0 91 df 00 	lds	r26, 0x00DF
    1ffe:	b0 91 e0 00 	lds	r27, 0x00E0
    2002:	80 32       	cpi	r24, 0x20	; 32
    2004:	23 ef       	ldi	r18, 0xF3	; 243
    2006:	92 07       	cpc	r25, r18
    2008:	2f ef       	ldi	r18, 0xFF	; 255
    200a:	a2 07       	cpc	r26, r18
    200c:	2f ef       	ldi	r18, 0xFF	; 255
    200e:	b2 07       	cpc	r27, r18
    2010:	41 f4       	brne	.+16     	; 0x2022 <__vector_5+0xec>
		{
			LS_u32Counter=0;
    2012:	10 92 dd 00 	sts	0x00DD, r1
    2016:	10 92 de 00 	sts	0x00DE, r1
    201a:	10 92 df 00 	sts	0x00DF, r1
    201e:	10 92 e0 00 	sts	0x00E0, r1
		}
		LS_u32Counter++ ;
    2022:	80 91 dd 00 	lds	r24, 0x00DD
    2026:	90 91 de 00 	lds	r25, 0x00DE
    202a:	a0 91 df 00 	lds	r26, 0x00DF
    202e:	b0 91 e0 00 	lds	r27, 0x00E0
    2032:	01 96       	adiw	r24, 0x01	; 1
    2034:	a1 1d       	adc	r26, r1
    2036:	b1 1d       	adc	r27, r1
    2038:	80 93 dd 00 	sts	0x00DD, r24
    203c:	90 93 de 00 	sts	0x00DE, r25
    2040:	a0 93 df 00 	sts	0x00DF, r26
    2044:	b0 93 e0 00 	sts	0x00E0, r27

}
    2048:	0f 90       	pop	r0
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	ff 91       	pop	r31
    2050:	ef 91       	pop	r30
    2052:	bf 91       	pop	r27
    2054:	af 91       	pop	r26
    2056:	9f 91       	pop	r25
    2058:	8f 91       	pop	r24
    205a:	7f 91       	pop	r23
    205c:	6f 91       	pop	r22
    205e:	5f 91       	pop	r21
    2060:	4f 91       	pop	r20
    2062:	3f 91       	pop	r19
    2064:	2f 91       	pop	r18
    2066:	1f 91       	pop	r17
    2068:	0f 91       	pop	r16
    206a:	ff 90       	pop	r15
    206c:	ef 90       	pop	r14
    206e:	0f 90       	pop	r0
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	0f 90       	pop	r0
    2074:	1f 90       	pop	r1
    2076:	18 95       	reti

00002078 <__vector_10>:
void __vector_10(void) __attribute__((signal));//TMR_0_CTC
void __vector_10(void)
{
    2078:	1f 92       	push	r1
    207a:	0f 92       	push	r0
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	0f 92       	push	r0
    2080:	11 24       	eor	r1, r1
    2082:	2f 93       	push	r18
    2084:	3f 93       	push	r19
    2086:	4f 93       	push	r20
    2088:	5f 93       	push	r21
    208a:	6f 93       	push	r22
    208c:	7f 93       	push	r23
    208e:	8f 93       	push	r24
    2090:	9f 93       	push	r25
    2092:	af 93       	push	r26
    2094:	bf 93       	push	r27
    2096:	ef 93       	push	r30
    2098:	ff 93       	push	r31
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62

	static u08 L_u16CounterCTC0;
	L_u16CounterCTC0++;
    20a2:	80 91 e1 00 	lds	r24, 0x00E1
    20a6:	8f 5f       	subi	r24, 0xFF	; 255
    20a8:	80 93 e1 00 	sts	0x00E1, r24

	if(L_u16CounterCTC0==G_u16CounterCTC0)
    20ac:	80 91 e1 00 	lds	r24, 0x00E1
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	80 91 19 01 	lds	r24, 0x0119
    20b8:	90 91 1a 01 	lds	r25, 0x011A
    20bc:	28 17       	cp	r18, r24
    20be:	39 07       	cpc	r19, r25
    20c0:	39 f4       	brne	.+14     	; 0x20d0 <__vector_10+0x58>
	{
		TMR0_CTC_callback();
    20c2:	e0 91 27 01 	lds	r30, 0x0127
    20c6:	f0 91 28 01 	lds	r31, 0x0128
    20ca:	09 95       	icall
		L_u16CounterCTC0=0;
    20cc:	10 92 e1 00 	sts	0x00E1, r1
	}


}
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	ff 91       	pop	r31
    20d6:	ef 91       	pop	r30
    20d8:	bf 91       	pop	r27
    20da:	af 91       	pop	r26
    20dc:	9f 91       	pop	r25
    20de:	8f 91       	pop	r24
    20e0:	7f 91       	pop	r23
    20e2:	6f 91       	pop	r22
    20e4:	5f 91       	pop	r21
    20e6:	4f 91       	pop	r20
    20e8:	3f 91       	pop	r19
    20ea:	2f 91       	pop	r18
    20ec:	0f 90       	pop	r0
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	0f 90       	pop	r0
    20f2:	1f 90       	pop	r1
    20f4:	18 95       	reti

000020f6 <__vector_8>:
void __vector_8(void) __attribute__((signal));//TMR_1_A_CTC
void __vector_8(void)
{
    20f6:	1f 92       	push	r1
    20f8:	0f 92       	push	r0
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	0f 92       	push	r0
    20fe:	11 24       	eor	r1, r1
    2100:	2f 93       	push	r18
    2102:	3f 93       	push	r19
    2104:	4f 93       	push	r20
    2106:	5f 93       	push	r21
    2108:	6f 93       	push	r22
    210a:	7f 93       	push	r23
    210c:	8f 93       	push	r24
    210e:	9f 93       	push	r25
    2110:	af 93       	push	r26
    2112:	bf 93       	push	r27
    2114:	ef 93       	push	r30
    2116:	ff 93       	push	r31
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62

	static u08 L_u16CounterCTC1;
	L_u16CounterCTC1++;
    2120:	80 91 e2 00 	lds	r24, 0x00E2
    2124:	8f 5f       	subi	r24, 0xFF	; 255
    2126:	80 93 e2 00 	sts	0x00E2, r24

	if(L_u16CounterCTC1==G_u16CounterCTC1)
    212a:	80 91 e2 00 	lds	r24, 0x00E2
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	80 91 32 01 	lds	r24, 0x0132
    2136:	90 91 33 01 	lds	r25, 0x0133
    213a:	28 17       	cp	r18, r24
    213c:	39 07       	cpc	r19, r25
    213e:	39 f4       	brne	.+14     	; 0x214e <__vector_8+0x58>
	{
		TMR0_CTC_callback();
    2140:	e0 91 27 01 	lds	r30, 0x0127
    2144:	f0 91 28 01 	lds	r31, 0x0128
    2148:	09 95       	icall
		L_u16CounterCTC1=0;
    214a:	10 92 e2 00 	sts	0x00E2, r1
	}



}
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	ff 91       	pop	r31
    2154:	ef 91       	pop	r30
    2156:	bf 91       	pop	r27
    2158:	af 91       	pop	r26
    215a:	9f 91       	pop	r25
    215c:	8f 91       	pop	r24
    215e:	7f 91       	pop	r23
    2160:	6f 91       	pop	r22
    2162:	5f 91       	pop	r21
    2164:	4f 91       	pop	r20
    2166:	3f 91       	pop	r19
    2168:	2f 91       	pop	r18
    216a:	0f 90       	pop	r0
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	0f 90       	pop	r0
    2170:	1f 90       	pop	r1
    2172:	18 95       	reti

00002174 <__vector_7>:
void __vector_7(void) __attribute__((signal));//TMR_1_B_CTC
void __vector_7(void)
{
    2174:	1f 92       	push	r1
    2176:	0f 92       	push	r0
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	0f 92       	push	r0
    217c:	11 24       	eor	r1, r1
    217e:	2f 93       	push	r18
    2180:	3f 93       	push	r19
    2182:	4f 93       	push	r20
    2184:	5f 93       	push	r21
    2186:	6f 93       	push	r22
    2188:	7f 93       	push	r23
    218a:	8f 93       	push	r24
    218c:	9f 93       	push	r25
    218e:	af 93       	push	r26
    2190:	bf 93       	push	r27
    2192:	ef 93       	push	r30
    2194:	ff 93       	push	r31
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62

	static u08 L_u16CounterCTC1;
	L_u16CounterCTC1++;
    219e:	80 91 e3 00 	lds	r24, 0x00E3
    21a2:	8f 5f       	subi	r24, 0xFF	; 255
    21a4:	80 93 e3 00 	sts	0x00E3, r24

	if(L_u16CounterCTC1==G_u16CounterCTC1)
    21a8:	80 91 e3 00 	lds	r24, 0x00E3
    21ac:	28 2f       	mov	r18, r24
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	80 91 32 01 	lds	r24, 0x0132
    21b4:	90 91 33 01 	lds	r25, 0x0133
    21b8:	28 17       	cp	r18, r24
    21ba:	39 07       	cpc	r19, r25
    21bc:	39 f4       	brne	.+14     	; 0x21cc <__vector_7+0x58>
	{
		TMR0_CTC_callback();
    21be:	e0 91 27 01 	lds	r30, 0x0127
    21c2:	f0 91 28 01 	lds	r31, 0x0128
    21c6:	09 95       	icall
		L_u16CounterCTC1=0;
    21c8:	10 92 e3 00 	sts	0x00E3, r1
	}

}
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	ff 91       	pop	r31
    21d2:	ef 91       	pop	r30
    21d4:	bf 91       	pop	r27
    21d6:	af 91       	pop	r26
    21d8:	9f 91       	pop	r25
    21da:	8f 91       	pop	r24
    21dc:	7f 91       	pop	r23
    21de:	6f 91       	pop	r22
    21e0:	5f 91       	pop	r21
    21e2:	4f 91       	pop	r20
    21e4:	3f 91       	pop	r19
    21e6:	2f 91       	pop	r18
    21e8:	0f 90       	pop	r0
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	0f 90       	pop	r0
    21ee:	1f 90       	pop	r1
    21f0:	18 95       	reti

000021f2 <__vector_4>:
void __vector_4(void) __attribute__((signal));//TMR_2_CTC
void __vector_4(void)
{
    21f2:	1f 92       	push	r1
    21f4:	0f 92       	push	r0
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	0f 92       	push	r0
    21fa:	11 24       	eor	r1, r1
    21fc:	2f 93       	push	r18
    21fe:	3f 93       	push	r19
    2200:	4f 93       	push	r20
    2202:	5f 93       	push	r21
    2204:	6f 93       	push	r22
    2206:	7f 93       	push	r23
    2208:	8f 93       	push	r24
    220a:	9f 93       	push	r25
    220c:	af 93       	push	r26
    220e:	bf 93       	push	r27
    2210:	ef 93       	push	r30
    2212:	ff 93       	push	r31
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
	static u08 L_u16CounterCTC2;
	L_u16CounterCTC2++;
    221c:	80 91 e4 00 	lds	r24, 0x00E4
    2220:	8f 5f       	subi	r24, 0xFF	; 255
    2222:	80 93 e4 00 	sts	0x00E4, r24

	if(L_u16CounterCTC2==G_u16CounterCTC2)
    2226:	80 91 e4 00 	lds	r24, 0x00E4
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	80 91 25 01 	lds	r24, 0x0125
    2232:	90 91 26 01 	lds	r25, 0x0126
    2236:	28 17       	cp	r18, r24
    2238:	39 07       	cpc	r19, r25
    223a:	39 f4       	brne	.+14     	; 0x224a <__vector_4+0x58>
	{
		TMR0_CTC_callback();
    223c:	e0 91 27 01 	lds	r30, 0x0127
    2240:	f0 91 28 01 	lds	r31, 0x0128
    2244:	09 95       	icall
		L_u16CounterCTC2=0;
    2246:	10 92 e4 00 	sts	0x00E4, r1
	}

}
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	ff 91       	pop	r31
    2250:	ef 91       	pop	r30
    2252:	bf 91       	pop	r27
    2254:	af 91       	pop	r26
    2256:	9f 91       	pop	r25
    2258:	8f 91       	pop	r24
    225a:	7f 91       	pop	r23
    225c:	6f 91       	pop	r22
    225e:	5f 91       	pop	r21
    2260:	4f 91       	pop	r20
    2262:	3f 91       	pop	r19
    2264:	2f 91       	pop	r18
    2266:	0f 90       	pop	r0
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	0f 90       	pop	r0
    226c:	1f 90       	pop	r1
    226e:	18 95       	reti

00002270 <__vector_6>:
void __vector_6(void)  __attribute__((signal));//TMR_1_ICU
void __vector_6(void)
{
    2270:	1f 92       	push	r1
    2272:	0f 92       	push	r0
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	0f 92       	push	r0
    2278:	11 24       	eor	r1, r1
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	2f 93       	push	r18
    2280:	3f 93       	push	r19
    2282:	4f 93       	push	r20
    2284:	5f 93       	push	r21
    2286:	6f 93       	push	r22
    2288:	7f 93       	push	r23
    228a:	8f 93       	push	r24
    228c:	9f 93       	push	r25
    228e:	af 93       	push	r26
    2290:	bf 93       	push	r27
    2292:	ef 93       	push	r30
    2294:	ff 93       	push	r31
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	00 d0       	rcall	.+0      	; 0x229c <__vector_6+0x2c>
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62

	static u08 LS_u8counter=0;
	static u16 timetriggered[3];
	LS_u8counter++;
    22a0:	80 91 eb 00 	lds	r24, 0x00EB
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	80 93 eb 00 	sts	0x00EB, r24
	switch (LS_u8counter)
    22aa:	80 91 eb 00 	lds	r24, 0x00EB
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	3a 83       	std	Y+2, r19	; 0x02
    22b4:	29 83       	std	Y+1, r18	; 0x01
    22b6:	49 81       	ldd	r20, Y+1	; 0x01
    22b8:	5a 81       	ldd	r21, Y+2	; 0x02
    22ba:	42 30       	cpi	r20, 0x02	; 2
    22bc:	51 05       	cpc	r21, r1
    22be:	11 f1       	breq	.+68     	; 0x2304 <__vector_6+0x94>
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	9a 81       	ldd	r25, Y+2	; 0x02
    22c4:	83 30       	cpi	r24, 0x03	; 3
    22c6:	91 05       	cpc	r25, r1
    22c8:	09 f4       	brne	.+2      	; 0x22cc <__vector_6+0x5c>
    22ca:	42 c0       	rjmp	.+132    	; 0x2350 <__vector_6+0xe0>
    22cc:	29 81       	ldd	r18, Y+1	; 0x01
    22ce:	3a 81       	ldd	r19, Y+2	; 0x02
    22d0:	21 30       	cpi	r18, 0x01	; 1
    22d2:	31 05       	cpc	r19, r1
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <__vector_6+0x68>
    22d6:	6a c0       	rjmp	.+212    	; 0x23ac <__vector_6+0x13c>
	{
	case 1:
		timetriggered[LS_u8counter-1]=MTMR_u16GetCaptureTime();
    22d8:	80 91 eb 00 	lds	r24, 0x00EB
    22dc:	88 2f       	mov	r24, r24
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	8c 01       	movw	r16, r24
    22e2:	01 50       	subi	r16, 0x01	; 1
    22e4:	10 40       	sbci	r17, 0x00	; 0
    22e6:	0e 94 c3 0c 	call	0x1986	; 0x1986 <MTMR_u16GetCaptureTime>
    22ea:	9c 01       	movw	r18, r24
    22ec:	c8 01       	movw	r24, r16
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	fc 01       	movw	r30, r24
    22f4:	eb 51       	subi	r30, 0x1B	; 27
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	31 83       	std	Z+1, r19	; 0x01
    22fa:	20 83       	st	Z, r18
		MTMR_vSetIcuTrigger(ICU_Rising);
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <MTMR_vSetIcuTrigger>
    2302:	54 c0       	rjmp	.+168    	; 0x23ac <__vector_6+0x13c>
		break;
	case 2:
		timetriggered[LS_u8counter-1]=MTMR_u16GetCaptureTime();
    2304:	80 91 eb 00 	lds	r24, 0x00EB
    2308:	88 2f       	mov	r24, r24
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	8c 01       	movw	r16, r24
    230e:	01 50       	subi	r16, 0x01	; 1
    2310:	10 40       	sbci	r17, 0x00	; 0
    2312:	0e 94 c3 0c 	call	0x1986	; 0x1986 <MTMR_u16GetCaptureTime>
    2316:	9c 01       	movw	r18, r24
    2318:	c8 01       	movw	r24, r16
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	fc 01       	movw	r30, r24
    2320:	eb 51       	subi	r30, 0x1B	; 27
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	31 83       	std	Z+1, r19	; 0x01
    2326:	20 83       	st	Z, r18
		MTMR_vSetIcuTrigger(ICU_Falling);
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <MTMR_vSetIcuTrigger>
		GS_u16pt=timetriggered[1]-timetriggered[0];
    232e:	20 91 e7 00 	lds	r18, 0x00E7
    2332:	30 91 e8 00 	lds	r19, 0x00E8
    2336:	80 91 e5 00 	lds	r24, 0x00E5
    233a:	90 91 e6 00 	lds	r25, 0x00E6
    233e:	a9 01       	movw	r20, r18
    2340:	48 1b       	sub	r20, r24
    2342:	59 0b       	sbc	r21, r25
    2344:	ca 01       	movw	r24, r20
    2346:	90 93 cd 00 	sts	0x00CD, r25
    234a:	80 93 cc 00 	sts	0x00CC, r24
    234e:	2e c0       	rjmp	.+92     	; 0x23ac <__vector_6+0x13c>
		break;
	case 3:
		timetriggered[LS_u8counter-1]=MTMR_u16GetCaptureTime();
    2350:	80 91 eb 00 	lds	r24, 0x00EB
    2354:	88 2f       	mov	r24, r24
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	8c 01       	movw	r16, r24
    235a:	01 50       	subi	r16, 0x01	; 1
    235c:	10 40       	sbci	r17, 0x00	; 0
    235e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <MTMR_u16GetCaptureTime>
    2362:	9c 01       	movw	r18, r24
    2364:	c8 01       	movw	r24, r16
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	fc 01       	movw	r30, r24
    236c:	eb 51       	subi	r30, 0x1B	; 27
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	31 83       	std	Z+1, r19	; 0x01
    2372:	20 83       	st	Z, r18
		MTMR_vSetIcuTrigger(ICU_Rising);
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <MTMR_vSetIcuTrigger>
		MTMR_vDisableInterrupt(Timer1,ICU_INTERRUPT);
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	62 e0       	ldi	r22, 0x02	; 2
    237e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MTMR_vDisableInterrupt>
		GS_u16ont=timetriggered[2]-timetriggered[1];
    2382:	20 91 e9 00 	lds	r18, 0x00E9
    2386:	30 91 ea 00 	lds	r19, 0x00EA
    238a:	80 91 e7 00 	lds	r24, 0x00E7
    238e:	90 91 e8 00 	lds	r25, 0x00E8
    2392:	a9 01       	movw	r20, r18
    2394:	48 1b       	sub	r20, r24
    2396:	59 0b       	sbc	r21, r25
    2398:	ca 01       	movw	r24, r20
    239a:	90 93 cf 00 	sts	0x00CF, r25
    239e:	80 93 ce 00 	sts	0x00CE, r24
		LS_u8counter=0;
    23a2:	10 92 eb 00 	sts	0x00EB, r1
		GS_u8ReadFlag=1;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	80 93 d0 00 	sts	0x00D0, r24
		break;
	}



}
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	ff 91       	pop	r31
    23b6:	ef 91       	pop	r30
    23b8:	bf 91       	pop	r27
    23ba:	af 91       	pop	r26
    23bc:	9f 91       	pop	r25
    23be:	8f 91       	pop	r24
    23c0:	7f 91       	pop	r23
    23c2:	6f 91       	pop	r22
    23c4:	5f 91       	pop	r21
    23c6:	4f 91       	pop	r20
    23c8:	3f 91       	pop	r19
    23ca:	2f 91       	pop	r18
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	0f 90       	pop	r0
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	0f 90       	pop	r0
    23d6:	1f 90       	pop	r1
    23d8:	18 95       	reti

000023da <MGIE_vEnableGlobalInterrubt>:
#include"GIE_prv.h"
#include"GIE_int.h"


void MGIE_vEnableGlobalInterrubt(void)
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    23e2:	af e5       	ldi	r26, 0x5F	; 95
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	ef e5       	ldi	r30, 0x5F	; 95
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	80 68       	ori	r24, 0x80	; 128
    23ee:	8c 93       	st	X, r24
}
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <MGIE_vDisableGlobalInterrubt>:
void MGIE_vDisableGlobalInterrubt(void)
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    23fe:	af e5       	ldi	r26, 0x5F	; 95
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	ef e5       	ldi	r30, 0x5F	; 95
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	8f 77       	andi	r24, 0x7F	; 127
    240a:	8c 93       	st	X, r24
}
    240c:	cf 91       	pop	r28
    240e:	df 91       	pop	r29
    2410:	08 95       	ret

00002412 <MEXTI_vinit>:




void MEXTI_vinit(void)
{
    2412:	df 93       	push	r29
    2414:	cf 93       	push	r28
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
#if INT0_ENABLE==ENABLE
	SET_BIT(GICR,INT0);
    241a:	ab e5       	ldi	r26, 0x5B	; 91
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	eb e5       	ldi	r30, 0x5B	; 91
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	80 64       	ori	r24, 0x40	; 64
    2426:	8c 93       	st	X, r24
#if INT0_SENSE_CONTROL==FALLING_EDGE
	SET_BIT(MCUCR,ISC11);
	CLR_BIT(MCUCR,ISC10);

#elif INT0_SENSE_CONTROL==RISING_EDGE
	SET_BIT(MCUCR,ISC11);
    2428:	a5 e5       	ldi	r26, 0x55	; 85
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	e5 e5       	ldi	r30, 0x55	; 85
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	88 60       	ori	r24, 0x08	; 8
    2434:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC10);
    2436:	a5 e5       	ldi	r26, 0x55	; 85
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e5 e5       	ldi	r30, 0x55	; 85
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	84 60       	ori	r24, 0x04	; 4
    2442:	8c 93       	st	X, r24


	SET_BIT(GICR,INT2);
#endif

}
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <MDIO_vTogglePin>:
#include"../../LIB/STD_TYPE.h"
#include"../../LIB/BIT_MATH.h"
#include"DIO_prv.h"
#include"DIO_int.h"
void MDIO_vTogglePin(u08 A_u8PortNo,u08 A_u8PinNo)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <MDIO_vTogglePin+0x6>
    2450:	00 d0       	rcall	.+0      	; 0x2452 <MDIO_vTogglePin+0x8>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	3c 83       	std	Y+4, r19	; 0x04
    2462:	2b 83       	std	Y+3, r18	; 0x03
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	81 30       	cpi	r24, 0x01	; 1
    246a:	91 05       	cpc	r25, r1
    246c:	49 f1       	breq	.+82     	; 0x24c0 <MDIO_vTogglePin+0x76>
    246e:	2b 81       	ldd	r18, Y+3	; 0x03
    2470:	3c 81       	ldd	r19, Y+4	; 0x04
    2472:	22 30       	cpi	r18, 0x02	; 2
    2474:	31 05       	cpc	r19, r1
    2476:	2c f4       	brge	.+10     	; 0x2482 <MDIO_vTogglePin+0x38>
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	61 f0       	breq	.+24     	; 0x2498 <MDIO_vTogglePin+0x4e>
    2480:	5a c0       	rjmp	.+180    	; 0x2536 <MDIO_vTogglePin+0xec>
    2482:	2b 81       	ldd	r18, Y+3	; 0x03
    2484:	3c 81       	ldd	r19, Y+4	; 0x04
    2486:	22 30       	cpi	r18, 0x02	; 2
    2488:	31 05       	cpc	r19, r1
    248a:	71 f1       	breq	.+92     	; 0x24e8 <MDIO_vTogglePin+0x9e>
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	9c 81       	ldd	r25, Y+4	; 0x04
    2490:	83 30       	cpi	r24, 0x03	; 3
    2492:	91 05       	cpc	r25, r1
    2494:	e9 f1       	breq	.+122    	; 0x2510 <MDIO_vTogglePin+0xc6>
    2496:	4f c0       	rjmp	.+158    	; 0x2536 <MDIO_vTogglePin+0xec>
		{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA,A_u8PinNo);
    2498:	ab e3       	ldi	r26, 0x3B	; 59
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	eb e3       	ldi	r30, 0x3B	; 59
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	48 2f       	mov	r20, r24
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	02 2e       	mov	r0, r18
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <MDIO_vTogglePin+0x6c>
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	0a 94       	dec	r0
    24b8:	e2 f7       	brpl	.-8      	; 0x24b2 <MDIO_vTogglePin+0x68>
    24ba:	84 27       	eor	r24, r20
    24bc:	8c 93       	st	X, r24
    24be:	3b c0       	rjmp	.+118    	; 0x2536 <MDIO_vTogglePin+0xec>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB,A_u8PinNo);
    24c0:	a8 e3       	ldi	r26, 0x38	; 56
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e8 e3       	ldi	r30, 0x38	; 56
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	48 2f       	mov	r20, r24
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	02 2e       	mov	r0, r18
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <MDIO_vTogglePin+0x94>
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	0a 94       	dec	r0
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <MDIO_vTogglePin+0x90>
    24e2:	84 27       	eor	r24, r20
    24e4:	8c 93       	st	X, r24
    24e6:	27 c0       	rjmp	.+78     	; 0x2536 <MDIO_vTogglePin+0xec>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC,A_u8PinNo);
    24e8:	a5 e3       	ldi	r26, 0x35	; 53
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e5 e3       	ldi	r30, 0x35	; 53
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	48 2f       	mov	r20, r24
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	02 2e       	mov	r0, r18
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <MDIO_vTogglePin+0xbc>
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	0a 94       	dec	r0
    2508:	e2 f7       	brpl	.-8      	; 0x2502 <MDIO_vTogglePin+0xb8>
    250a:	84 27       	eor	r24, r20
    250c:	8c 93       	st	X, r24
    250e:	13 c0       	rjmp	.+38     	; 0x2536 <MDIO_vTogglePin+0xec>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD,A_u8PinNo);
    2510:	a2 e3       	ldi	r26, 0x32	; 50
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e2 e3       	ldi	r30, 0x32	; 50
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	48 2f       	mov	r20, r24
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	02 2e       	mov	r0, r18
    2528:	02 c0       	rjmp	.+4      	; 0x252e <MDIO_vTogglePin+0xe4>
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	0a 94       	dec	r0
    2530:	e2 f7       	brpl	.-8      	; 0x252a <MDIO_vTogglePin+0xe0>
    2532:	84 27       	eor	r24, r20
    2534:	8c 93       	st	X, r24
			break;
		}
}
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <MDIO_vSetPinDir>:
void MDIO_vSetPinDir(u08 A_u8PortNo,u08 A_u8PinNo,u08 A_u8Dir)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	27 97       	sbiw	r28, 0x07	; 7
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	89 83       	std	Y+1, r24	; 0x01
    255a:	6a 83       	std	Y+2, r22	; 0x02
    255c:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8Dir==DIO_Output){
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	81 30       	cpi	r24, 0x01	; 1
    2562:	09 f0       	breq	.+2      	; 0x2566 <MDIO_vSetPinDir+0x22>
    2564:	6f c0       	rjmp	.+222    	; 0x2644 <MDIO_vSetPinDir+0x100>
	switch (A_u8PortNo)
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	3f 83       	std	Y+7, r19	; 0x07
    256e:	2e 83       	std	Y+6, r18	; 0x06
    2570:	8e 81       	ldd	r24, Y+6	; 0x06
    2572:	9f 81       	ldd	r25, Y+7	; 0x07
    2574:	81 30       	cpi	r24, 0x01	; 1
    2576:	91 05       	cpc	r25, r1
    2578:	49 f1       	breq	.+82     	; 0x25cc <MDIO_vSetPinDir+0x88>
    257a:	2e 81       	ldd	r18, Y+6	; 0x06
    257c:	3f 81       	ldd	r19, Y+7	; 0x07
    257e:	22 30       	cpi	r18, 0x02	; 2
    2580:	31 05       	cpc	r19, r1
    2582:	2c f4       	brge	.+10     	; 0x258e <MDIO_vSetPinDir+0x4a>
    2584:	8e 81       	ldd	r24, Y+6	; 0x06
    2586:	9f 81       	ldd	r25, Y+7	; 0x07
    2588:	00 97       	sbiw	r24, 0x00	; 0
    258a:	61 f0       	breq	.+24     	; 0x25a4 <MDIO_vSetPinDir+0x60>
    258c:	d2 c0       	rjmp	.+420    	; 0x2732 <MDIO_vSetPinDir+0x1ee>
    258e:	2e 81       	ldd	r18, Y+6	; 0x06
    2590:	3f 81       	ldd	r19, Y+7	; 0x07
    2592:	22 30       	cpi	r18, 0x02	; 2
    2594:	31 05       	cpc	r19, r1
    2596:	71 f1       	breq	.+92     	; 0x25f4 <MDIO_vSetPinDir+0xb0>
    2598:	8e 81       	ldd	r24, Y+6	; 0x06
    259a:	9f 81       	ldd	r25, Y+7	; 0x07
    259c:	83 30       	cpi	r24, 0x03	; 3
    259e:	91 05       	cpc	r25, r1
    25a0:	e9 f1       	breq	.+122    	; 0x261c <MDIO_vSetPinDir+0xd8>
    25a2:	c7 c0       	rjmp	.+398    	; 0x2732 <MDIO_vSetPinDir+0x1ee>
	{
	case DIO_PORTA:
		SET_BIT(DDRA,A_u8PinNo);
    25a4:	aa e3       	ldi	r26, 0x3A	; 58
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	ea e3       	ldi	r30, 0x3A	; 58
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
    25ae:	48 2f       	mov	r20, r24
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	02 2e       	mov	r0, r18
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <MDIO_vSetPinDir+0x7e>
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	0a 94       	dec	r0
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <MDIO_vSetPinDir+0x7a>
    25c6:	84 2b       	or	r24, r20
    25c8:	8c 93       	st	X, r24
    25ca:	b3 c0       	rjmp	.+358    	; 0x2732 <MDIO_vSetPinDir+0x1ee>
		break;
	case DIO_PORTB:
		SET_BIT(DDRB,A_u8PinNo);
    25cc:	a7 e3       	ldi	r26, 0x37	; 55
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e7 e3       	ldi	r30, 0x37	; 55
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	48 2f       	mov	r20, r24
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	28 2f       	mov	r18, r24
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	02 2e       	mov	r0, r18
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <MDIO_vSetPinDir+0xa6>
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	0a 94       	dec	r0
    25ec:	e2 f7       	brpl	.-8      	; 0x25e6 <MDIO_vSetPinDir+0xa2>
    25ee:	84 2b       	or	r24, r20
    25f0:	8c 93       	st	X, r24
    25f2:	9f c0       	rjmp	.+318    	; 0x2732 <MDIO_vSetPinDir+0x1ee>
		break;
	case DIO_PORTC:
		SET_BIT(DDRC,A_u8PinNo);
    25f4:	a4 e3       	ldi	r26, 0x34	; 52
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	e4 e3       	ldi	r30, 0x34	; 52
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	48 2f       	mov	r20, r24
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	28 2f       	mov	r18, r24
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	02 2e       	mov	r0, r18
    260c:	02 c0       	rjmp	.+4      	; 0x2612 <MDIO_vSetPinDir+0xce>
    260e:	88 0f       	add	r24, r24
    2610:	99 1f       	adc	r25, r25
    2612:	0a 94       	dec	r0
    2614:	e2 f7       	brpl	.-8      	; 0x260e <MDIO_vSetPinDir+0xca>
    2616:	84 2b       	or	r24, r20
    2618:	8c 93       	st	X, r24
    261a:	8b c0       	rjmp	.+278    	; 0x2732 <MDIO_vSetPinDir+0x1ee>
		break;
	case DIO_PORTD:
		SET_BIT(DDRD,A_u8PinNo);
    261c:	a1 e3       	ldi	r26, 0x31	; 49
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	e1 e3       	ldi	r30, 0x31	; 49
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	48 2f       	mov	r20, r24
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	28 2f       	mov	r18, r24
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	02 2e       	mov	r0, r18
    2634:	02 c0       	rjmp	.+4      	; 0x263a <MDIO_vSetPinDir+0xf6>
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	0a 94       	dec	r0
    263c:	e2 f7       	brpl	.-8      	; 0x2636 <MDIO_vSetPinDir+0xf2>
    263e:	84 2b       	or	r24, r20
    2640:	8c 93       	st	X, r24
    2642:	77 c0       	rjmp	.+238    	; 0x2732 <MDIO_vSetPinDir+0x1ee>
		break;
	}

	}
	else if(A_u8Dir==DIO_Input){
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	88 23       	and	r24, r24
    2648:	09 f0       	breq	.+2      	; 0x264c <MDIO_vSetPinDir+0x108>
    264a:	73 c0       	rjmp	.+230    	; 0x2732 <MDIO_vSetPinDir+0x1ee>
	switch (A_u8PortNo)
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	3d 83       	std	Y+5, r19	; 0x05
    2654:	2c 83       	std	Y+4, r18	; 0x04
    2656:	8c 81       	ldd	r24, Y+4	; 0x04
    2658:	9d 81       	ldd	r25, Y+5	; 0x05
    265a:	81 30       	cpi	r24, 0x01	; 1
    265c:	91 05       	cpc	r25, r1
    265e:	59 f1       	breq	.+86     	; 0x26b6 <MDIO_vSetPinDir+0x172>
    2660:	2c 81       	ldd	r18, Y+4	; 0x04
    2662:	3d 81       	ldd	r19, Y+5	; 0x05
    2664:	22 30       	cpi	r18, 0x02	; 2
    2666:	31 05       	cpc	r19, r1
    2668:	2c f4       	brge	.+10     	; 0x2674 <MDIO_vSetPinDir+0x130>
    266a:	8c 81       	ldd	r24, Y+4	; 0x04
    266c:	9d 81       	ldd	r25, Y+5	; 0x05
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	69 f0       	breq	.+26     	; 0x268c <MDIO_vSetPinDir+0x148>
    2672:	5f c0       	rjmp	.+190    	; 0x2732 <MDIO_vSetPinDir+0x1ee>
    2674:	2c 81       	ldd	r18, Y+4	; 0x04
    2676:	3d 81       	ldd	r19, Y+5	; 0x05
    2678:	22 30       	cpi	r18, 0x02	; 2
    267a:	31 05       	cpc	r19, r1
    267c:	89 f1       	breq	.+98     	; 0x26e0 <MDIO_vSetPinDir+0x19c>
    267e:	8c 81       	ldd	r24, Y+4	; 0x04
    2680:	9d 81       	ldd	r25, Y+5	; 0x05
    2682:	83 30       	cpi	r24, 0x03	; 3
    2684:	91 05       	cpc	r25, r1
    2686:	09 f4       	brne	.+2      	; 0x268a <MDIO_vSetPinDir+0x146>
    2688:	40 c0       	rjmp	.+128    	; 0x270a <MDIO_vSetPinDir+0x1c6>
    268a:	53 c0       	rjmp	.+166    	; 0x2732 <MDIO_vSetPinDir+0x1ee>
	{
	case DIO_PORTA:
		CLR_BIT(DDRA,A_u8PinNo);
    268c:	aa e3       	ldi	r26, 0x3A	; 58
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	ea e3       	ldi	r30, 0x3A	; 58
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	48 2f       	mov	r20, r24
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	02 2e       	mov	r0, r18
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <MDIO_vSetPinDir+0x166>
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	0a 94       	dec	r0
    26ac:	e2 f7       	brpl	.-8      	; 0x26a6 <MDIO_vSetPinDir+0x162>
    26ae:	80 95       	com	r24
    26b0:	84 23       	and	r24, r20
    26b2:	8c 93       	st	X, r24
    26b4:	3e c0       	rjmp	.+124    	; 0x2732 <MDIO_vSetPinDir+0x1ee>
		break;
	case DIO_PORTB:
		CLR_BIT(DDRB,A_u8PinNo);
    26b6:	a7 e3       	ldi	r26, 0x37	; 55
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e7 e3       	ldi	r30, 0x37	; 55
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	48 2f       	mov	r20, r24
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	28 2f       	mov	r18, r24
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	02 2e       	mov	r0, r18
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <MDIO_vSetPinDir+0x190>
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	0a 94       	dec	r0
    26d6:	e2 f7       	brpl	.-8      	; 0x26d0 <MDIO_vSetPinDir+0x18c>
    26d8:	80 95       	com	r24
    26da:	84 23       	and	r24, r20
    26dc:	8c 93       	st	X, r24
    26de:	29 c0       	rjmp	.+82     	; 0x2732 <MDIO_vSetPinDir+0x1ee>
		break;
	case DIO_PORTC:
		CLR_BIT(DDRC,A_u8PinNo);
    26e0:	a4 e3       	ldi	r26, 0x34	; 52
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	e4 e3       	ldi	r30, 0x34	; 52
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	48 2f       	mov	r20, r24
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	02 2e       	mov	r0, r18
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <MDIO_vSetPinDir+0x1ba>
    26fa:	88 0f       	add	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	0a 94       	dec	r0
    2700:	e2 f7       	brpl	.-8      	; 0x26fa <MDIO_vSetPinDir+0x1b6>
    2702:	80 95       	com	r24
    2704:	84 23       	and	r24, r20
    2706:	8c 93       	st	X, r24
    2708:	14 c0       	rjmp	.+40     	; 0x2732 <MDIO_vSetPinDir+0x1ee>
		break;
	case DIO_PORTD:
		CLR_BIT(DDRD,A_u8PinNo);
    270a:	a1 e3       	ldi	r26, 0x31	; 49
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e1 e3       	ldi	r30, 0x31	; 49
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	48 2f       	mov	r20, r24
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	28 2f       	mov	r18, r24
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	02 2e       	mov	r0, r18
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <MDIO_vSetPinDir+0x1e4>
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	0a 94       	dec	r0
    272a:	e2 f7       	brpl	.-8      	; 0x2724 <MDIO_vSetPinDir+0x1e0>
    272c:	80 95       	com	r24
    272e:	84 23       	and	r24, r20
    2730:	8c 93       	st	X, r24
		break;
	}

	}
}
    2732:	27 96       	adiw	r28, 0x07	; 7
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <MDIO_vSetPinVal>:
void MDIO_vSetPinVal(u08 A_u8PortNo,u08 A_u8PinNo,u08 A_u8Val)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	27 97       	sbiw	r28, 0x07	; 7
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    2758:	89 83       	std	Y+1, r24	; 0x01
    275a:	6a 83       	std	Y+2, r22	; 0x02
    275c:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8Val==DIO_HIGH){
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	81 30       	cpi	r24, 0x01	; 1
    2762:	09 f0       	breq	.+2      	; 0x2766 <MDIO_vSetPinVal+0x22>
    2764:	6f c0       	rjmp	.+222    	; 0x2844 <MDIO_vSetPinVal+0x100>
		switch (A_u8PortNo)
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	3f 83       	std	Y+7, r19	; 0x07
    276e:	2e 83       	std	Y+6, r18	; 0x06
    2770:	8e 81       	ldd	r24, Y+6	; 0x06
    2772:	9f 81       	ldd	r25, Y+7	; 0x07
    2774:	81 30       	cpi	r24, 0x01	; 1
    2776:	91 05       	cpc	r25, r1
    2778:	49 f1       	breq	.+82     	; 0x27cc <MDIO_vSetPinVal+0x88>
    277a:	2e 81       	ldd	r18, Y+6	; 0x06
    277c:	3f 81       	ldd	r19, Y+7	; 0x07
    277e:	22 30       	cpi	r18, 0x02	; 2
    2780:	31 05       	cpc	r19, r1
    2782:	2c f4       	brge	.+10     	; 0x278e <MDIO_vSetPinVal+0x4a>
    2784:	8e 81       	ldd	r24, Y+6	; 0x06
    2786:	9f 81       	ldd	r25, Y+7	; 0x07
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	61 f0       	breq	.+24     	; 0x27a4 <MDIO_vSetPinVal+0x60>
    278c:	d2 c0       	rjmp	.+420    	; 0x2932 <MDIO_vSetPinVal+0x1ee>
    278e:	2e 81       	ldd	r18, Y+6	; 0x06
    2790:	3f 81       	ldd	r19, Y+7	; 0x07
    2792:	22 30       	cpi	r18, 0x02	; 2
    2794:	31 05       	cpc	r19, r1
    2796:	71 f1       	breq	.+92     	; 0x27f4 <MDIO_vSetPinVal+0xb0>
    2798:	8e 81       	ldd	r24, Y+6	; 0x06
    279a:	9f 81       	ldd	r25, Y+7	; 0x07
    279c:	83 30       	cpi	r24, 0x03	; 3
    279e:	91 05       	cpc	r25, r1
    27a0:	e9 f1       	breq	.+122    	; 0x281c <MDIO_vSetPinVal+0xd8>
    27a2:	c7 c0       	rjmp	.+398    	; 0x2932 <MDIO_vSetPinVal+0x1ee>
		{
		case DIO_PORTA:
			SET_BIT(PORTA,A_u8PinNo);
    27a4:	ab e3       	ldi	r26, 0x3B	; 59
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	eb e3       	ldi	r30, 0x3B	; 59
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	48 2f       	mov	r20, r24
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	02 2e       	mov	r0, r18
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <MDIO_vSetPinVal+0x7e>
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	0a 94       	dec	r0
    27c4:	e2 f7       	brpl	.-8      	; 0x27be <MDIO_vSetPinVal+0x7a>
    27c6:	84 2b       	or	r24, r20
    27c8:	8c 93       	st	X, r24
    27ca:	b3 c0       	rjmp	.+358    	; 0x2932 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTB:
				SET_BIT(PORTB,A_u8PinNo);
    27cc:	a8 e3       	ldi	r26, 0x38	; 56
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e8 e3       	ldi	r30, 0x38	; 56
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	48 2f       	mov	r20, r24
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	28 2f       	mov	r18, r24
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	02 2e       	mov	r0, r18
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <MDIO_vSetPinVal+0xa6>
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	0a 94       	dec	r0
    27ec:	e2 f7       	brpl	.-8      	; 0x27e6 <MDIO_vSetPinVal+0xa2>
    27ee:	84 2b       	or	r24, r20
    27f0:	8c 93       	st	X, r24
    27f2:	9f c0       	rjmp	.+318    	; 0x2932 <MDIO_vSetPinVal+0x1ee>
				break;
		case DIO_PORTC:
				SET_BIT(PORTC,A_u8PinNo);
    27f4:	a5 e3       	ldi	r26, 0x35	; 53
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e5 e3       	ldi	r30, 0x35	; 53
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	48 2f       	mov	r20, r24
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	28 2f       	mov	r18, r24
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	02 2e       	mov	r0, r18
    280c:	02 c0       	rjmp	.+4      	; 0x2812 <MDIO_vSetPinVal+0xce>
    280e:	88 0f       	add	r24, r24
    2810:	99 1f       	adc	r25, r25
    2812:	0a 94       	dec	r0
    2814:	e2 f7       	brpl	.-8      	; 0x280e <MDIO_vSetPinVal+0xca>
    2816:	84 2b       	or	r24, r20
    2818:	8c 93       	st	X, r24
    281a:	8b c0       	rjmp	.+278    	; 0x2932 <MDIO_vSetPinVal+0x1ee>
				break;
		case DIO_PORTD:
				SET_BIT(PORTD,A_u8PinNo);
    281c:	a2 e3       	ldi	r26, 0x32	; 50
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e2 e3       	ldi	r30, 0x32	; 50
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	48 2f       	mov	r20, r24
    2828:	8a 81       	ldd	r24, Y+2	; 0x02
    282a:	28 2f       	mov	r18, r24
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	02 2e       	mov	r0, r18
    2834:	02 c0       	rjmp	.+4      	; 0x283a <MDIO_vSetPinVal+0xf6>
    2836:	88 0f       	add	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	0a 94       	dec	r0
    283c:	e2 f7       	brpl	.-8      	; 0x2836 <MDIO_vSetPinVal+0xf2>
    283e:	84 2b       	or	r24, r20
    2840:	8c 93       	st	X, r24
    2842:	77 c0       	rjmp	.+238    	; 0x2932 <MDIO_vSetPinVal+0x1ee>
				break;
		}

		}
	else if(A_u8Val==DIO_LOW){
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	88 23       	and	r24, r24
    2848:	09 f0       	breq	.+2      	; 0x284c <MDIO_vSetPinVal+0x108>
    284a:	73 c0       	rjmp	.+230    	; 0x2932 <MDIO_vSetPinVal+0x1ee>
		switch (A_u8PortNo)
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	28 2f       	mov	r18, r24
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	3d 83       	std	Y+5, r19	; 0x05
    2854:	2c 83       	std	Y+4, r18	; 0x04
    2856:	8c 81       	ldd	r24, Y+4	; 0x04
    2858:	9d 81       	ldd	r25, Y+5	; 0x05
    285a:	81 30       	cpi	r24, 0x01	; 1
    285c:	91 05       	cpc	r25, r1
    285e:	59 f1       	breq	.+86     	; 0x28b6 <MDIO_vSetPinVal+0x172>
    2860:	2c 81       	ldd	r18, Y+4	; 0x04
    2862:	3d 81       	ldd	r19, Y+5	; 0x05
    2864:	22 30       	cpi	r18, 0x02	; 2
    2866:	31 05       	cpc	r19, r1
    2868:	2c f4       	brge	.+10     	; 0x2874 <MDIO_vSetPinVal+0x130>
    286a:	8c 81       	ldd	r24, Y+4	; 0x04
    286c:	9d 81       	ldd	r25, Y+5	; 0x05
    286e:	00 97       	sbiw	r24, 0x00	; 0
    2870:	69 f0       	breq	.+26     	; 0x288c <MDIO_vSetPinVal+0x148>
    2872:	5f c0       	rjmp	.+190    	; 0x2932 <MDIO_vSetPinVal+0x1ee>
    2874:	2c 81       	ldd	r18, Y+4	; 0x04
    2876:	3d 81       	ldd	r19, Y+5	; 0x05
    2878:	22 30       	cpi	r18, 0x02	; 2
    287a:	31 05       	cpc	r19, r1
    287c:	89 f1       	breq	.+98     	; 0x28e0 <MDIO_vSetPinVal+0x19c>
    287e:	8c 81       	ldd	r24, Y+4	; 0x04
    2880:	9d 81       	ldd	r25, Y+5	; 0x05
    2882:	83 30       	cpi	r24, 0x03	; 3
    2884:	91 05       	cpc	r25, r1
    2886:	09 f4       	brne	.+2      	; 0x288a <MDIO_vSetPinVal+0x146>
    2888:	40 c0       	rjmp	.+128    	; 0x290a <MDIO_vSetPinVal+0x1c6>
    288a:	53 c0       	rjmp	.+166    	; 0x2932 <MDIO_vSetPinVal+0x1ee>
		{
		case DIO_PORTA:
			CLR_BIT(PORTA,A_u8PinNo);
    288c:	ab e3       	ldi	r26, 0x3B	; 59
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	eb e3       	ldi	r30, 0x3B	; 59
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
    2896:	48 2f       	mov	r20, r24
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	02 2e       	mov	r0, r18
    28a4:	02 c0       	rjmp	.+4      	; 0x28aa <MDIO_vSetPinVal+0x166>
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	0a 94       	dec	r0
    28ac:	e2 f7       	brpl	.-8      	; 0x28a6 <MDIO_vSetPinVal+0x162>
    28ae:	80 95       	com	r24
    28b0:	84 23       	and	r24, r20
    28b2:	8c 93       	st	X, r24
    28b4:	3e c0       	rjmp	.+124    	; 0x2932 <MDIO_vSetPinVal+0x1ee>
			break;
		case DIO_PORTB:
				CLR_BIT(PORTB,A_u8PinNo);
    28b6:	a8 e3       	ldi	r26, 0x38	; 56
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	e8 e3       	ldi	r30, 0x38	; 56
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	48 2f       	mov	r20, r24
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	02 2e       	mov	r0, r18
    28ce:	02 c0       	rjmp	.+4      	; 0x28d4 <MDIO_vSetPinVal+0x190>
    28d0:	88 0f       	add	r24, r24
    28d2:	99 1f       	adc	r25, r25
    28d4:	0a 94       	dec	r0
    28d6:	e2 f7       	brpl	.-8      	; 0x28d0 <MDIO_vSetPinVal+0x18c>
    28d8:	80 95       	com	r24
    28da:	84 23       	and	r24, r20
    28dc:	8c 93       	st	X, r24
    28de:	29 c0       	rjmp	.+82     	; 0x2932 <MDIO_vSetPinVal+0x1ee>
				break;
		case DIO_PORTC:
				CLR_BIT(PORTC,A_u8PinNo);
    28e0:	a5 e3       	ldi	r26, 0x35	; 53
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	e5 e3       	ldi	r30, 0x35	; 53
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
    28ea:	48 2f       	mov	r20, r24
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	28 2f       	mov	r18, r24
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	02 2e       	mov	r0, r18
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <MDIO_vSetPinVal+0x1ba>
    28fa:	88 0f       	add	r24, r24
    28fc:	99 1f       	adc	r25, r25
    28fe:	0a 94       	dec	r0
    2900:	e2 f7       	brpl	.-8      	; 0x28fa <MDIO_vSetPinVal+0x1b6>
    2902:	80 95       	com	r24
    2904:	84 23       	and	r24, r20
    2906:	8c 93       	st	X, r24
    2908:	14 c0       	rjmp	.+40     	; 0x2932 <MDIO_vSetPinVal+0x1ee>
				break;
		case DIO_PORTD:
				CLR_BIT(PORTD,A_u8PinNo);
    290a:	a2 e3       	ldi	r26, 0x32	; 50
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e2 e3       	ldi	r30, 0x32	; 50
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
    2914:	48 2f       	mov	r20, r24
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	28 2f       	mov	r18, r24
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	02 2e       	mov	r0, r18
    2922:	02 c0       	rjmp	.+4      	; 0x2928 <MDIO_vSetPinVal+0x1e4>
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	0a 94       	dec	r0
    292a:	e2 f7       	brpl	.-8      	; 0x2924 <MDIO_vSetPinVal+0x1e0>
    292c:	80 95       	com	r24
    292e:	84 23       	and	r24, r20
    2930:	8c 93       	st	X, r24
				break;
		}

		}

}
    2932:	27 96       	adiw	r28, 0x07	; 7
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <MDIO_u8GetPinVal>:
u08 MDIO_u8GetPinVal(u08 A_u8PortNo,u08 A_u8PinNo)
{
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	00 d0       	rcall	.+0      	; 0x294a <MDIO_u8GetPinVal+0x6>
    294a:	00 d0       	rcall	.+0      	; 0x294c <MDIO_u8GetPinVal+0x8>
    294c:	0f 92       	push	r0
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	8a 83       	std	Y+2, r24	; 0x02
    2954:	6b 83       	std	Y+3, r22	; 0x03
	u08 L_PinVal=0;
    2956:	19 82       	std	Y+1, r1	; 0x01
	switch (A_u8PortNo)
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	28 2f       	mov	r18, r24
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	3d 83       	std	Y+5, r19	; 0x05
    2960:	2c 83       	std	Y+4, r18	; 0x04
    2962:	4c 81       	ldd	r20, Y+4	; 0x04
    2964:	5d 81       	ldd	r21, Y+5	; 0x05
    2966:	41 30       	cpi	r20, 0x01	; 1
    2968:	51 05       	cpc	r21, r1
    296a:	41 f1       	breq	.+80     	; 0x29bc <MDIO_u8GetPinVal+0x78>
    296c:	8c 81       	ldd	r24, Y+4	; 0x04
    296e:	9d 81       	ldd	r25, Y+5	; 0x05
    2970:	82 30       	cpi	r24, 0x02	; 2
    2972:	91 05       	cpc	r25, r1
    2974:	34 f4       	brge	.+12     	; 0x2982 <MDIO_u8GetPinVal+0x3e>
    2976:	2c 81       	ldd	r18, Y+4	; 0x04
    2978:	3d 81       	ldd	r19, Y+5	; 0x05
    297a:	21 15       	cp	r18, r1
    297c:	31 05       	cpc	r19, r1
    297e:	61 f0       	breq	.+24     	; 0x2998 <MDIO_u8GetPinVal+0x54>
    2980:	52 c0       	rjmp	.+164    	; 0x2a26 <MDIO_u8GetPinVal+0xe2>
    2982:	4c 81       	ldd	r20, Y+4	; 0x04
    2984:	5d 81       	ldd	r21, Y+5	; 0x05
    2986:	42 30       	cpi	r20, 0x02	; 2
    2988:	51 05       	cpc	r21, r1
    298a:	51 f1       	breq	.+84     	; 0x29e0 <MDIO_u8GetPinVal+0x9c>
    298c:	8c 81       	ldd	r24, Y+4	; 0x04
    298e:	9d 81       	ldd	r25, Y+5	; 0x05
    2990:	83 30       	cpi	r24, 0x03	; 3
    2992:	91 05       	cpc	r25, r1
    2994:	b9 f1       	breq	.+110    	; 0x2a04 <MDIO_u8GetPinVal+0xc0>
    2996:	47 c0       	rjmp	.+142    	; 0x2a26 <MDIO_u8GetPinVal+0xe2>
			{
			case DIO_PORTA:
				L_PinVal=GET_BIT(PINA,A_u8PinNo);
    2998:	e9 e3       	ldi	r30, 0x39	; 57
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	28 2f       	mov	r18, r24
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	8b 81       	ldd	r24, Y+3	; 0x03
    29a4:	88 2f       	mov	r24, r24
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	a9 01       	movw	r20, r18
    29aa:	02 c0       	rjmp	.+4      	; 0x29b0 <MDIO_u8GetPinVal+0x6c>
    29ac:	55 95       	asr	r21
    29ae:	47 95       	ror	r20
    29b0:	8a 95       	dec	r24
    29b2:	e2 f7       	brpl	.-8      	; 0x29ac <MDIO_u8GetPinVal+0x68>
    29b4:	ca 01       	movw	r24, r20
    29b6:	81 70       	andi	r24, 0x01	; 1
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	35 c0       	rjmp	.+106    	; 0x2a26 <MDIO_u8GetPinVal+0xe2>
				break;
			case DIO_PORTB:
				L_PinVal=GET_BIT(PINB,A_u8PinNo);
    29bc:	e6 e3       	ldi	r30, 0x36	; 54
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	28 2f       	mov	r18, r24
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	88 2f       	mov	r24, r24
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	a9 01       	movw	r20, r18
    29ce:	02 c0       	rjmp	.+4      	; 0x29d4 <MDIO_u8GetPinVal+0x90>
    29d0:	55 95       	asr	r21
    29d2:	47 95       	ror	r20
    29d4:	8a 95       	dec	r24
    29d6:	e2 f7       	brpl	.-8      	; 0x29d0 <MDIO_u8GetPinVal+0x8c>
    29d8:	ca 01       	movw	r24, r20
    29da:	81 70       	andi	r24, 0x01	; 1
    29dc:	89 83       	std	Y+1, r24	; 0x01
    29de:	23 c0       	rjmp	.+70     	; 0x2a26 <MDIO_u8GetPinVal+0xe2>
					break;
			case DIO_PORTC:
				L_PinVal=GET_BIT(PINC,A_u8PinNo);
    29e0:	e3 e3       	ldi	r30, 0x33	; 51
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	28 2f       	mov	r18, r24
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	88 2f       	mov	r24, r24
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	a9 01       	movw	r20, r18
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <MDIO_u8GetPinVal+0xb4>
    29f4:	55 95       	asr	r21
    29f6:	47 95       	ror	r20
    29f8:	8a 95       	dec	r24
    29fa:	e2 f7       	brpl	.-8      	; 0x29f4 <MDIO_u8GetPinVal+0xb0>
    29fc:	ca 01       	movw	r24, r20
    29fe:	81 70       	andi	r24, 0x01	; 1
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	11 c0       	rjmp	.+34     	; 0x2a26 <MDIO_u8GetPinVal+0xe2>
					break;
			case DIO_PORTD:
				L_PinVal=GET_BIT(PIND,A_u8PinNo);
    2a04:	e0 e3       	ldi	r30, 0x30	; 48
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	88 2f       	mov	r24, r24
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	a9 01       	movw	r20, r18
    2a16:	02 c0       	rjmp	.+4      	; 0x2a1c <MDIO_u8GetPinVal+0xd8>
    2a18:	55 95       	asr	r21
    2a1a:	47 95       	ror	r20
    2a1c:	8a 95       	dec	r24
    2a1e:	e2 f7       	brpl	.-8      	; 0x2a18 <MDIO_u8GetPinVal+0xd4>
    2a20:	ca 01       	movw	r24, r20
    2a22:	81 70       	andi	r24, 0x01	; 1
    2a24:	89 83       	std	Y+1, r24	; 0x01
					break;
			}

	return L_PinVal;
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	0f 90       	pop	r0
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <MDIO_vSetPortDir>:
void MDIO_vSetPortDir(u08 A_u8PortNo,u08 A_u8Dir)
{
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <MDIO_vSetPortDir+0x6>
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <MDIO_vSetPortDir+0x8>
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	28 2f       	mov	r18, r24
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	3c 83       	std	Y+4, r19	; 0x04
    2a50:	2b 83       	std	Y+3, r18	; 0x03
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	9c 81       	ldd	r25, Y+4	; 0x04
    2a56:	81 30       	cpi	r24, 0x01	; 1
    2a58:	91 05       	cpc	r25, r1
    2a5a:	d1 f0       	breq	.+52     	; 0x2a90 <MDIO_vSetPortDir+0x58>
    2a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a60:	22 30       	cpi	r18, 0x02	; 2
    2a62:	31 05       	cpc	r19, r1
    2a64:	2c f4       	brge	.+10     	; 0x2a70 <MDIO_vSetPortDir+0x38>
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	61 f0       	breq	.+24     	; 0x2a86 <MDIO_vSetPortDir+0x4e>
    2a6e:	1e c0       	rjmp	.+60     	; 0x2aac <MDIO_vSetPortDir+0x74>
    2a70:	2b 81       	ldd	r18, Y+3	; 0x03
    2a72:	3c 81       	ldd	r19, Y+4	; 0x04
    2a74:	22 30       	cpi	r18, 0x02	; 2
    2a76:	31 05       	cpc	r19, r1
    2a78:	81 f0       	breq	.+32     	; 0x2a9a <MDIO_vSetPortDir+0x62>
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7e:	83 30       	cpi	r24, 0x03	; 3
    2a80:	91 05       	cpc	r25, r1
    2a82:	81 f0       	breq	.+32     	; 0x2aa4 <MDIO_vSetPortDir+0x6c>
    2a84:	13 c0       	rjmp	.+38     	; 0x2aac <MDIO_vSetPortDir+0x74>
	{

	case DIO_PORTA:
			DDRA=A_u8Dir;
    2a86:	ea e3       	ldi	r30, 0x3A	; 58
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	80 83       	st	Z, r24
    2a8e:	0e c0       	rjmp	.+28     	; 0x2aac <MDIO_vSetPortDir+0x74>
			break;
	case DIO_PORTB:
		DDRB=A_u8Dir;
    2a90:	e7 e3       	ldi	r30, 0x37	; 55
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	80 83       	st	Z, r24
    2a98:	09 c0       	rjmp	.+18     	; 0x2aac <MDIO_vSetPortDir+0x74>
			break;
	case DIO_PORTC:
		DDRC=A_u8Dir;
    2a9a:	e4 e3       	ldi	r30, 0x34	; 52
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	80 83       	st	Z, r24
    2aa2:	04 c0       	rjmp	.+8      	; 0x2aac <MDIO_vSetPortDir+0x74>
			break;
	case DIO_PORTD:
		DDRD=A_u8Dir;
    2aa4:	e1 e3       	ldi	r30, 0x31	; 49
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	80 83       	st	Z, r24
			break;
}
}
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	08 95       	ret

00002aba <MDIO_vSetPortVal>:
void MDIO_vSetPortVal(u08 A_u8PortNo,u08 A_u8Val)
{
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <MDIO_vSetPortVal+0x6>
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <MDIO_vSetPortVal+0x8>
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortNo)
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	28 2f       	mov	r18, r24
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	3c 83       	std	Y+4, r19	; 0x04
    2ad2:	2b 83       	std	Y+3, r18	; 0x03
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	81 30       	cpi	r24, 0x01	; 1
    2ada:	91 05       	cpc	r25, r1
    2adc:	d1 f0       	breq	.+52     	; 0x2b12 <MDIO_vSetPortVal+0x58>
    2ade:	2b 81       	ldd	r18, Y+3	; 0x03
    2ae0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ae2:	22 30       	cpi	r18, 0x02	; 2
    2ae4:	31 05       	cpc	r19, r1
    2ae6:	2c f4       	brge	.+10     	; 0x2af2 <MDIO_vSetPortVal+0x38>
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	9c 81       	ldd	r25, Y+4	; 0x04
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	61 f0       	breq	.+24     	; 0x2b08 <MDIO_vSetPortVal+0x4e>
    2af0:	1e c0       	rjmp	.+60     	; 0x2b2e <MDIO_vSetPortVal+0x74>
    2af2:	2b 81       	ldd	r18, Y+3	; 0x03
    2af4:	3c 81       	ldd	r19, Y+4	; 0x04
    2af6:	22 30       	cpi	r18, 0x02	; 2
    2af8:	31 05       	cpc	r19, r1
    2afa:	81 f0       	breq	.+32     	; 0x2b1c <MDIO_vSetPortVal+0x62>
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	9c 81       	ldd	r25, Y+4	; 0x04
    2b00:	83 30       	cpi	r24, 0x03	; 3
    2b02:	91 05       	cpc	r25, r1
    2b04:	81 f0       	breq	.+32     	; 0x2b26 <MDIO_vSetPortVal+0x6c>
    2b06:	13 c0       	rjmp	.+38     	; 0x2b2e <MDIO_vSetPortVal+0x74>
		{

		case DIO_PORTA:
				PORTA=A_u8Val;
    2b08:	eb e3       	ldi	r30, 0x3B	; 59
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0e:	80 83       	st	Z, r24
    2b10:	0e c0       	rjmp	.+28     	; 0x2b2e <MDIO_vSetPortVal+0x74>
				break;
		case DIO_PORTB:
			PORTB=A_u8Val;
    2b12:	e8 e3       	ldi	r30, 0x38	; 56
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	80 83       	st	Z, r24
    2b1a:	09 c0       	rjmp	.+18     	; 0x2b2e <MDIO_vSetPortVal+0x74>
				break;
		case DIO_PORTC:
			PORTC=A_u8Val;
    2b1c:	e5 e3       	ldi	r30, 0x35	; 53
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	80 83       	st	Z, r24
    2b24:	04 c0       	rjmp	.+8      	; 0x2b2e <MDIO_vSetPortVal+0x74>
				break;
		case DIO_PORTD:
			PORTD=A_u8Val;
    2b26:	e2 e3       	ldi	r30, 0x32	; 50
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2c:	80 83       	st	Z, r24
				break;
	}}
    2b2e:	0f 90       	pop	r0
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <MDIO_u8GetPortVal>:
u08 MDIO_u8GetPortVal(u08 A_u8PortNo)
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	00 d0       	rcall	.+0      	; 0x2b42 <MDIO_u8GetPortVal+0x6>
    2b42:	00 d0       	rcall	.+0      	; 0x2b44 <MDIO_u8GetPortVal+0x8>
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
    2b48:	8a 83       	std	Y+2, r24	; 0x02
	u08 L_PinVal=0;
    2b4a:	19 82       	std	Y+1, r1	; 0x01
		switch (A_u8PortNo)
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	28 2f       	mov	r18, r24
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	3c 83       	std	Y+4, r19	; 0x04
    2b54:	2b 83       	std	Y+3, r18	; 0x03
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5a:	81 30       	cpi	r24, 0x01	; 1
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	d1 f0       	breq	.+52     	; 0x2b94 <MDIO_u8GetPortVal+0x58>
    2b60:	2b 81       	ldd	r18, Y+3	; 0x03
    2b62:	3c 81       	ldd	r19, Y+4	; 0x04
    2b64:	22 30       	cpi	r18, 0x02	; 2
    2b66:	31 05       	cpc	r19, r1
    2b68:	2c f4       	brge	.+10     	; 0x2b74 <MDIO_u8GetPortVal+0x38>
    2b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	61 f0       	breq	.+24     	; 0x2b8a <MDIO_u8GetPortVal+0x4e>
    2b72:	1e c0       	rjmp	.+60     	; 0x2bb0 <MDIO_u8GetPortVal+0x74>
    2b74:	2b 81       	ldd	r18, Y+3	; 0x03
    2b76:	3c 81       	ldd	r19, Y+4	; 0x04
    2b78:	22 30       	cpi	r18, 0x02	; 2
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	81 f0       	breq	.+32     	; 0x2b9e <MDIO_u8GetPortVal+0x62>
    2b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b80:	9c 81       	ldd	r25, Y+4	; 0x04
    2b82:	83 30       	cpi	r24, 0x03	; 3
    2b84:	91 05       	cpc	r25, r1
    2b86:	81 f0       	breq	.+32     	; 0x2ba8 <MDIO_u8GetPortVal+0x6c>
    2b88:	13 c0       	rjmp	.+38     	; 0x2bb0 <MDIO_u8GetPortVal+0x74>
				{
				case DIO_PORTA:
					L_PinVal=PINA;
    2b8a:	e9 e3       	ldi	r30, 0x39	; 57
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	0e c0       	rjmp	.+28     	; 0x2bb0 <MDIO_u8GetPortVal+0x74>
					break;
				case DIO_PORTB:
					L_PinVal=PINB;
    2b94:	e6 e3       	ldi	r30, 0x36	; 54
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	09 c0       	rjmp	.+18     	; 0x2bb0 <MDIO_u8GetPortVal+0x74>
						break;
				case DIO_PORTC:
					L_PinVal=PINC;
    2b9e:	e3 e3       	ldi	r30, 0x33	; 51
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	04 c0       	rjmp	.+8      	; 0x2bb0 <MDIO_u8GetPortVal+0x74>
						break;
				case DIO_PORTD:
					L_PinVal=PIND;
    2ba8:	e0 e3       	ldi	r30, 0x30	; 48
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	89 83       	std	Y+1, r24	; 0x01
						break;
				}

		return L_PinVal;
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01

}
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	cf 91       	pop	r28
    2bbc:	df 91       	pop	r29
    2bbe:	08 95       	ret

00002bc0 <HSYS_vInit>:
#include"../../LIB/STD_TYPE.h"
#include"../../MCAL/DIO/DIO_int.h"
#include"SYS_int.h"

void HSYS_vInit(void)
{
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(DIO_PORTA,DIO_PIN3,DIO_Output);
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	63 e0       	ldi	r22, 0x03	; 3
    2bcc:	41 e0       	ldi	r20, 0x01	; 1
    2bce:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTA,DIO_PIN4,DIO_Output);
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	64 e0       	ldi	r22, 0x04	; 4
    2bd6:	41 e0       	ldi	r20, 0x01	; 1
    2bd8:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTA,DIO_PIN5,DIO_Output);
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	65 e0       	ldi	r22, 0x05	; 5
    2be0:	41 e0       	ldi	r20, 0x01	; 1
    2be2:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTA,DIO_PIN6,DIO_Output);
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	66 e0       	ldi	r22, 0x06	; 6
    2bea:	41 e0       	ldi	r20, 0x01	; 1
    2bec:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTA,DIO_PIN7,DIO_Output);
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	67 e0       	ldi	r22, 0x07	; 7
    2bf4:	41 e0       	ldi	r20, 0x01	; 1
    2bf6:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>

	MDIO_vSetPinDir(DIO_PORTC,DIO_PIN3,DIO_Output);
    2bfa:	82 e0       	ldi	r24, 0x02	; 2
    2bfc:	63 e0       	ldi	r22, 0x03	; 3
    2bfe:	41 e0       	ldi	r20, 0x01	; 1
    2c00:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTC,DIO_PIN5,DIO_Output);
    2c04:	82 e0       	ldi	r24, 0x02	; 2
    2c06:	65 e0       	ldi	r22, 0x05	; 5
    2c08:	41 e0       	ldi	r20, 0x01	; 1
    2c0a:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTC,DIO_PIN6,DIO_Output);
    2c0e:	82 e0       	ldi	r24, 0x02	; 2
    2c10:	66 e0       	ldi	r22, 0x06	; 6
    2c12:	41 e0       	ldi	r20, 0x01	; 1
    2c14:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTC,DIO_PIN7,DIO_Output);
    2c18:	82 e0       	ldi	r24, 0x02	; 2
    2c1a:	67 e0       	ldi	r22, 0x07	; 7
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>



	MDIO_vSetPinVal(DIO_PORTA,DIO_PIN3,DIO_LOW);
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	63 e0       	ldi	r22, 0x03	; 3
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
	MDIO_vSetPinDir(DIO_PORTA,DIO_PIN4,DIO_LOW);
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	64 e0       	ldi	r22, 0x04	; 4
    2c30:	40 e0       	ldi	r20, 0x00	; 0
    2c32:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTA,DIO_PIN5,DIO_LOW);
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	65 e0       	ldi	r22, 0x05	; 5
    2c3a:	40 e0       	ldi	r20, 0x00	; 0
    2c3c:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTA,DIO_PIN6,DIO_LOW);
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	66 e0       	ldi	r22, 0x06	; 6
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTA,DIO_PIN7,DIO_LOW);
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	67 e0       	ldi	r22, 0x07	; 7
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>

	MDIO_vSetPinDir(DIO_PORTC,DIO_PIN3,DIO_LOW);
    2c54:	82 e0       	ldi	r24, 0x02	; 2
    2c56:	63 e0       	ldi	r22, 0x03	; 3
    2c58:	40 e0       	ldi	r20, 0x00	; 0
    2c5a:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTC,DIO_PIN5,DIO_LOW);
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	65 e0       	ldi	r22, 0x05	; 5
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTC,DIO_PIN6,DIO_LOW);
    2c68:	82 e0       	ldi	r24, 0x02	; 2
    2c6a:	66 e0       	ldi	r22, 0x06	; 6
    2c6c:	40 e0       	ldi	r20, 0x00	; 0
    2c6e:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DIO_PORTC,DIO_PIN7,DIO_LOW);
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	67 e0       	ldi	r22, 0x07	; 7
    2c76:	40 e0       	ldi	r20, 0x00	; 0
    2c78:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
}
    2c7c:	cf 91       	pop	r28
    2c7e:	df 91       	pop	r29
    2c80:	08 95       	ret

00002c82 <HSYS_vTurnON>:
void HSYS_vTurnON(SYS_Combonant_t Combonant)
{
    2c82:	df 93       	push	r29
    2c84:	cf 93       	push	r28
    2c86:	0f 92       	push	r0
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    2c8c:	89 83       	std	Y+1, r24	; 0x01
	if(Combonant==Selender)
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	86 30       	cpi	r24, 0x06	; 6
    2c92:	31 f4       	brne	.+12     	; 0x2ca0 <HSYS_vTurnON+0x1e>
	MDIO_vSetPinVal(DIO_PORTA,DIO_PIN3,DIO_HIGH);
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	63 e0       	ldi	r22, 0x03	; 3
    2c98:	41 e0       	ldi	r20, 0x01	; 1
    2c9a:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2c9e:	50 c0       	rjmp	.+160    	; 0x2d40 <HSYS_vTurnON+0xbe>
	else if(Combonant==IR_2)
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	88 23       	and	r24, r24
    2ca4:	31 f4       	brne	.+12     	; 0x2cb2 <HSYS_vTurnON+0x30>
		MDIO_vSetPinVal(DIO_PORTA,DIO_PIN4,DIO_HIGH);
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	64 e0       	ldi	r22, 0x04	; 4
    2caa:	41 e0       	ldi	r20, 0x01	; 1
    2cac:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2cb0:	47 c0       	rjmp	.+142    	; 0x2d40 <HSYS_vTurnON+0xbe>
	else if(Combonant==IR_3)
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	81 30       	cpi	r24, 0x01	; 1
    2cb6:	31 f4       	brne	.+12     	; 0x2cc4 <HSYS_vTurnON+0x42>
		MDIO_vSetPinVal(DIO_PORTA,DIO_PIN5,DIO_HIGH);
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	65 e0       	ldi	r22, 0x05	; 5
    2cbc:	41 e0       	ldi	r20, 0x01	; 1
    2cbe:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2cc2:	3e c0       	rjmp	.+124    	; 0x2d40 <HSYS_vTurnON+0xbe>
	else if(Combonant==IR_4)
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	82 30       	cpi	r24, 0x02	; 2
    2cc8:	31 f4       	brne	.+12     	; 0x2cd6 <HSYS_vTurnON+0x54>
		MDIO_vSetPinVal(DIO_PORTA,DIO_PIN6,DIO_HIGH);
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	66 e0       	ldi	r22, 0x06	; 6
    2cce:	41 e0       	ldi	r20, 0x01	; 1
    2cd0:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2cd4:	35 c0       	rjmp	.+106    	; 0x2d40 <HSYS_vTurnON+0xbe>
	else if(Combonant==ColorSensor)
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	83 30       	cpi	r24, 0x03	; 3
    2cda:	31 f4       	brne	.+12     	; 0x2ce8 <HSYS_vTurnON+0x66>
		MDIO_vSetPinVal(DIO_PORTA,DIO_PIN7,DIO_HIGH);
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	67 e0       	ldi	r22, 0x07	; 7
    2ce0:	41 e0       	ldi	r20, 0x01	; 1
    2ce2:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2ce6:	2c c0       	rjmp	.+88     	; 0x2d40 <HSYS_vTurnON+0xbe>
	else if(Combonant==Servo)
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	84 30       	cpi	r24, 0x04	; 4
    2cec:	31 f4       	brne	.+12     	; 0x2cfa <HSYS_vTurnON+0x78>
		MDIO_vSetPinVal(DIO_PORTC,DIO_PIN3,DIO_HIGH);
    2cee:	82 e0       	ldi	r24, 0x02	; 2
    2cf0:	63 e0       	ldi	r22, 0x03	; 3
    2cf2:	41 e0       	ldi	r20, 0x01	; 1
    2cf4:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2cf8:	23 c0       	rjmp	.+70     	; 0x2d40 <HSYS_vTurnON+0xbe>
	else if(Combonant==LC)
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	85 30       	cpi	r24, 0x05	; 5
    2cfe:	31 f4       	brne	.+12     	; 0x2d0c <HSYS_vTurnON+0x8a>
		MDIO_vSetPinVal(DIO_PORTC,DIO_PIN4,DIO_HIGH);
    2d00:	82 e0       	ldi	r24, 0x02	; 2
    2d02:	64 e0       	ldi	r22, 0x04	; 4
    2d04:	41 e0       	ldi	r20, 0x01	; 1
    2d06:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2d0a:	1a c0       	rjmp	.+52     	; 0x2d40 <HSYS_vTurnON+0xbe>
	else if(Combonant==ELSE1)
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	87 30       	cpi	r24, 0x07	; 7
    2d10:	31 f4       	brne	.+12     	; 0x2d1e <HSYS_vTurnON+0x9c>
		MDIO_vSetPinVal(DIO_PORTC,DIO_PIN5,DIO_HIGH);
    2d12:	82 e0       	ldi	r24, 0x02	; 2
    2d14:	65 e0       	ldi	r22, 0x05	; 5
    2d16:	41 e0       	ldi	r20, 0x01	; 1
    2d18:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2d1c:	11 c0       	rjmp	.+34     	; 0x2d40 <HSYS_vTurnON+0xbe>
	else if(Combonant==ELSE2)
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	88 30       	cpi	r24, 0x08	; 8
    2d22:	31 f4       	brne	.+12     	; 0x2d30 <HSYS_vTurnON+0xae>
		MDIO_vSetPinVal(DIO_PORTC,DIO_PIN6,DIO_HIGH);
    2d24:	82 e0       	ldi	r24, 0x02	; 2
    2d26:	66 e0       	ldi	r22, 0x06	; 6
    2d28:	41 e0       	ldi	r20, 0x01	; 1
    2d2a:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2d2e:	08 c0       	rjmp	.+16     	; 0x2d40 <HSYS_vTurnON+0xbe>
	else if(Combonant==ELSE3)
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	89 30       	cpi	r24, 0x09	; 9
    2d34:	29 f4       	brne	.+10     	; 0x2d40 <HSYS_vTurnON+0xbe>
		MDIO_vSetPinVal(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	67 e0       	ldi	r22, 0x07	; 7
    2d3a:	41 e0       	ldi	r20, 0x01	; 1
    2d3c:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

}
    2d40:	0f 90       	pop	r0
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <HSYS_vTurnOFF>:
void HSYS_vTurnOFF(SYS_Combonant_t Combonant)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	0f 92       	push	r0
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	89 83       	std	Y+1, r24	; 0x01
	if(Combonant==IR_2)
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	88 23       	and	r24, r24
    2d58:	31 f4       	brne	.+12     	; 0x2d66 <HSYS_vTurnOFF+0x1e>
		MDIO_vSetPinVal(DIO_PORTA,DIO_PIN3,DIO_LOW);
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	63 e0       	ldi	r22, 0x03	; 3
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2d64:	50 c0       	rjmp	.+160    	; 0x2e06 <HSYS_vTurnOFF+0xbe>
	else if(Combonant==IR_3)
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	81 30       	cpi	r24, 0x01	; 1
    2d6a:	31 f4       	brne	.+12     	; 0x2d78 <HSYS_vTurnOFF+0x30>
		MDIO_vSetPinVal(DIO_PORTA,DIO_PIN4,DIO_LOW);
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	64 e0       	ldi	r22, 0x04	; 4
    2d70:	40 e0       	ldi	r20, 0x00	; 0
    2d72:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2d76:	47 c0       	rjmp	.+142    	; 0x2e06 <HSYS_vTurnOFF+0xbe>
	else if(Combonant==IR_4)
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	82 30       	cpi	r24, 0x02	; 2
    2d7c:	31 f4       	brne	.+12     	; 0x2d8a <HSYS_vTurnOFF+0x42>
		MDIO_vSetPinVal(DIO_PORTA,DIO_PIN5,DIO_LOW);
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	65 e0       	ldi	r22, 0x05	; 5
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2d88:	3e c0       	rjmp	.+124    	; 0x2e06 <HSYS_vTurnOFF+0xbe>
	else if(Combonant==ColorSensor)
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	83 30       	cpi	r24, 0x03	; 3
    2d8e:	31 f4       	brne	.+12     	; 0x2d9c <HSYS_vTurnOFF+0x54>
		MDIO_vSetPinVal(DIO_PORTA,DIO_PIN6,DIO_LOW);
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	66 e0       	ldi	r22, 0x06	; 6
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2d9a:	35 c0       	rjmp	.+106    	; 0x2e06 <HSYS_vTurnOFF+0xbe>
	else if(Combonant==Servo)
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	84 30       	cpi	r24, 0x04	; 4
    2da0:	31 f4       	brne	.+12     	; 0x2dae <HSYS_vTurnOFF+0x66>
		MDIO_vSetPinVal(DIO_PORTA,DIO_PIN7,DIO_LOW);
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	67 e0       	ldi	r22, 0x07	; 7
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2dac:	2c c0       	rjmp	.+88     	; 0x2e06 <HSYS_vTurnOFF+0xbe>
	else if(Combonant==LC)
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	85 30       	cpi	r24, 0x05	; 5
    2db2:	31 f4       	brne	.+12     	; 0x2dc0 <HSYS_vTurnOFF+0x78>
		MDIO_vSetPinVal(DIO_PORTC,DIO_PIN3,DIO_LOW);
    2db4:	82 e0       	ldi	r24, 0x02	; 2
    2db6:	63 e0       	ldi	r22, 0x03	; 3
    2db8:	40 e0       	ldi	r20, 0x00	; 0
    2dba:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2dbe:	23 c0       	rjmp	.+70     	; 0x2e06 <HSYS_vTurnOFF+0xbe>
	else if(Combonant==Selender)
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	86 30       	cpi	r24, 0x06	; 6
    2dc4:	31 f4       	brne	.+12     	; 0x2dd2 <HSYS_vTurnOFF+0x8a>
		MDIO_vSetPinVal(DIO_PORTC,DIO_PIN4,DIO_LOW);
    2dc6:	82 e0       	ldi	r24, 0x02	; 2
    2dc8:	64 e0       	ldi	r22, 0x04	; 4
    2dca:	40 e0       	ldi	r20, 0x00	; 0
    2dcc:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2dd0:	1a c0       	rjmp	.+52     	; 0x2e06 <HSYS_vTurnOFF+0xbe>
	else if(Combonant==ELSE1)
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	87 30       	cpi	r24, 0x07	; 7
    2dd6:	31 f4       	brne	.+12     	; 0x2de4 <HSYS_vTurnOFF+0x9c>
		MDIO_vSetPinVal(DIO_PORTC,DIO_PIN5,DIO_LOW);
    2dd8:	82 e0       	ldi	r24, 0x02	; 2
    2dda:	65 e0       	ldi	r22, 0x05	; 5
    2ddc:	40 e0       	ldi	r20, 0x00	; 0
    2dde:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2de2:	11 c0       	rjmp	.+34     	; 0x2e06 <HSYS_vTurnOFF+0xbe>
	else if(Combonant==ELSE2)
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	88 30       	cpi	r24, 0x08	; 8
    2de8:	31 f4       	brne	.+12     	; 0x2df6 <HSYS_vTurnOFF+0xae>
		MDIO_vSetPinVal(DIO_PORTC,DIO_PIN6,DIO_LOW);
    2dea:	82 e0       	ldi	r24, 0x02	; 2
    2dec:	66 e0       	ldi	r22, 0x06	; 6
    2dee:	40 e0       	ldi	r20, 0x00	; 0
    2df0:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    2df4:	08 c0       	rjmp	.+16     	; 0x2e06 <HSYS_vTurnOFF+0xbe>
	else if(Combonant==ELSE3)
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	89 30       	cpi	r24, 0x09	; 9
    2dfa:	29 f4       	brne	.+10     	; 0x2e06 <HSYS_vTurnOFF+0xbe>
		MDIO_vSetPinVal(DIO_PORTC,DIO_PIN7,DIO_LOW);
    2dfc:	82 e0       	ldi	r24, 0x02	; 2
    2dfe:	67 e0       	ldi	r22, 0x07	; 7
    2e00:	40 e0       	ldi	r20, 0x00	; 0
    2e02:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

}
    2e06:	0f 90       	pop	r0
    2e08:	cf 91       	pop	r28
    2e0a:	df 91       	pop	r29
    2e0c:	08 95       	ret

00002e0e <HSTPR_Init>:
#include"STPR_int.h"
#include"STPR_cfg.h"
#include"../SHFT/SHFT_int.h"

void HSTPR_Init(void)
{
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(STPR_PORT,STPR_SleepPin,DIO_Output);
    2e16:	80 91 54 01 	lds	r24, 0x0154
    2e1a:	90 91 55 01 	lds	r25, 0x0155
    2e1e:	60 e0       	ldi	r22, 0x00	; 0
    2e20:	41 e0       	ldi	r20, 0x01	; 1
    2e22:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(STPR_PORT,STPR_StepPin,DIO_Output);
    2e26:	80 91 54 01 	lds	r24, 0x0154
    2e2a:	90 91 55 01 	lds	r25, 0x0155
    2e2e:	61 e0       	ldi	r22, 0x01	; 1
    2e30:	41 e0       	ldi	r20, 0x01	; 1
    2e32:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>

	MDIO_vSetPinVal(STPR_PORT,STPR_SleepPin,DIO_LOW);
    2e36:	80 91 54 01 	lds	r24, 0x0154
    2e3a:	90 91 55 01 	lds	r25, 0x0155
    2e3e:	60 e0       	ldi	r22, 0x00	; 0
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(STPR_PORT,STPR_StepPin,DIO_LOW);
    2e46:	80 91 54 01 	lds	r24, 0x0154
    2e4a:	90 91 55 01 	lds	r25, 0x0155
    2e4e:	61 e0       	ldi	r22, 0x01	; 1
    2e50:	40 e0       	ldi	r20, 0x00	; 0
    2e52:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

}
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <HSTPR_Rotate>:

void HSTPR_Rotate(void)
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
	static u08 i=0;
	if(i==1)
    2e64:	80 91 ec 00 	lds	r24, 0x00EC
    2e68:	81 30       	cpi	r24, 0x01	; 1
    2e6a:	59 f4       	brne	.+22     	; 0x2e82 <HSTPR_Rotate+0x26>
	{
		MDIO_vSetPinVal(Word,STPR_StepPin,DIO_LOW);
    2e6c:	80 91 54 01 	lds	r24, 0x0154
    2e70:	90 91 55 01 	lds	r25, 0x0155
    2e74:	61 e0       	ldi	r22, 0x01	; 1
    2e76:	40 e0       	ldi	r20, 0x00	; 0
    2e78:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
		i=0;
    2e7c:	10 92 ec 00 	sts	0x00EC, r1
    2e80:	0d c0       	rjmp	.+26     	; 0x2e9c <HSTPR_Rotate+0x40>
	}
	else
	{
		MDIO_vSetPinVal(Word,STPR_StepPin,DIO_HIGH);
    2e82:	80 91 54 01 	lds	r24, 0x0154
    2e86:	90 91 55 01 	lds	r25, 0x0155
    2e8a:	61 e0       	ldi	r22, 0x01	; 1
    2e8c:	41 e0       	ldi	r20, 0x01	; 1
    2e8e:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
		i++;
    2e92:	80 91 ec 00 	lds	r24, 0x00EC
    2e96:	8f 5f       	subi	r24, 0xFF	; 255
    2e98:	80 93 ec 00 	sts	0x00EC, r24
	}

	ShiftRegester();
    2e9c:	0e 94 99 18 	call	0x3132	; 0x3132 <ShiftRegester>
}
    2ea0:	cf 91       	pop	r28
    2ea2:	df 91       	pop	r29
    2ea4:	08 95       	ret

00002ea6 <HSTPR_Stop>:
void HSTPR_Stop(void)
{
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinVal(STPR_PORT,STPR_SleepPin,DIO_LOW);
    2eae:	80 91 54 01 	lds	r24, 0x0154
    2eb2:	90 91 55 01 	lds	r25, 0x0155
    2eb6:	60 e0       	ldi	r22, 0x00	; 0
    2eb8:	40 e0       	ldi	r20, 0x00	; 0
    2eba:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
}
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <HSTPR_Walk>:
void HSTPR_Walk(void)
{
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinVal(STPR_PORT,STPR_SleepPin,DIO_HIGH);
    2ecc:	80 91 54 01 	lds	r24, 0x0154
    2ed0:	90 91 55 01 	lds	r25, 0x0155
    2ed4:	60 e0       	ldi	r22, 0x00	; 0
    2ed6:	41 e0       	ldi	r20, 0x01	; 1
    2ed8:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
}
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <HSSD_vDisplayNum>:

static const u08 CGS_u8SSD_Num[]={0b01011111,0b01111111,0b00001110,0b01111011,0b01011011,0b01001101,0b01011110,0b01110110,0b00001100,0b00111111};


void HSSD_vDisplayNum(u16 A_u8Num)
{
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	00 d0       	rcall	.+0      	; 0x2ee8 <HSSD_vDisplayNum+0x6>
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	89 83       	std	Y+1, r24	; 0x01
	Word&=0b111111;
    2ef0:	80 91 54 01 	lds	r24, 0x0154
    2ef4:	90 91 55 01 	lds	r25, 0x0155
    2ef8:	8f 73       	andi	r24, 0x3F	; 63
    2efa:	90 70       	andi	r25, 0x00	; 0
    2efc:	90 93 55 01 	sts	0x0155, r25
    2f00:	80 93 54 01 	sts	0x0154, r24
	MDIO_vSetPinVal(Word,Shift1_Q6,DIO_HIGH);
    2f04:	80 91 54 01 	lds	r24, 0x0154
    2f08:	90 91 55 01 	lds	r25, 0x0155
    2f0c:	66 e0       	ldi	r22, 0x06	; 6
    2f0e:	41 e0       	ldi	r20, 0x01	; 1
    2f10:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
	Word|=CGS_u8SSD_Num[A_u8Num];
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	9a 81       	ldd	r25, Y+2	; 0x02
    2f18:	fc 01       	movw	r30, r24
    2f1a:	ef 53       	subi	r30, 0x3F	; 63
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	80 81       	ld	r24, Z
    2f20:	28 2f       	mov	r18, r24
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	80 91 54 01 	lds	r24, 0x0154
    2f28:	90 91 55 01 	lds	r25, 0x0155
    2f2c:	82 2b       	or	r24, r18
    2f2e:	93 2b       	or	r25, r19
    2f30:	90 93 55 01 	sts	0x0155, r25
    2f34:	80 93 54 01 	sts	0x0154, r24
	Word%=100;
    2f38:	80 91 54 01 	lds	r24, 0x0154
    2f3c:	90 91 55 01 	lds	r25, 0x0155
    2f40:	24 e6       	ldi	r18, 0x64	; 100
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	b9 01       	movw	r22, r18
    2f46:	0e 94 ed 30 	call	0x61da	; 0x61da <__udivmodhi4>
    2f4a:	90 93 55 01 	sts	0x0155, r25
    2f4e:	80 93 54 01 	sts	0x0154, r24

	Word&=0b111111;
    2f52:	80 91 54 01 	lds	r24, 0x0154
    2f56:	90 91 55 01 	lds	r25, 0x0155
    2f5a:	8f 73       	andi	r24, 0x3F	; 63
    2f5c:	90 70       	andi	r25, 0x00	; 0
    2f5e:	90 93 55 01 	sts	0x0155, r25
    2f62:	80 93 54 01 	sts	0x0154, r24
	MDIO_vSetPinVal(Word,Shift1_Q7,DIO_HIGH);
    2f66:	80 91 54 01 	lds	r24, 0x0154
    2f6a:	90 91 55 01 	lds	r25, 0x0155
    2f6e:	67 e0       	ldi	r22, 0x07	; 7
    2f70:	41 e0       	ldi	r20, 0x01	; 1
    2f72:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
	Word|=CGS_u8SSD_Num[A_u8Num];
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	ef 53       	subi	r30, 0x3F	; 63
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	80 81       	ld	r24, Z
    2f82:	28 2f       	mov	r18, r24
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	80 91 54 01 	lds	r24, 0x0154
    2f8a:	90 91 55 01 	lds	r25, 0x0155
    2f8e:	82 2b       	or	r24, r18
    2f90:	93 2b       	or	r25, r19
    2f92:	90 93 55 01 	sts	0x0155, r25
    2f96:	80 93 54 01 	sts	0x0154, r24
	Word%=10;
    2f9a:	80 91 54 01 	lds	r24, 0x0154
    2f9e:	90 91 55 01 	lds	r25, 0x0155
    2fa2:	2a e0       	ldi	r18, 0x0A	; 10
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	b9 01       	movw	r22, r18
    2fa8:	0e 94 ed 30 	call	0x61da	; 0x61da <__udivmodhi4>
    2fac:	90 93 55 01 	sts	0x0155, r25
    2fb0:	80 93 54 01 	sts	0x0154, r24
	Word&=0b111111;
    2fb4:	80 91 54 01 	lds	r24, 0x0154
    2fb8:	90 91 55 01 	lds	r25, 0x0155
    2fbc:	8f 73       	andi	r24, 0x3F	; 63
    2fbe:	90 70       	andi	r25, 0x00	; 0
    2fc0:	90 93 55 01 	sts	0x0155, r25
    2fc4:	80 93 54 01 	sts	0x0154, r24
	MDIO_vSetPinVal(Word,Shift2_Q0,DIO_HIGH);
    2fc8:	80 91 54 01 	lds	r24, 0x0154
    2fcc:	90 91 55 01 	lds	r25, 0x0155
    2fd0:	68 e0       	ldi	r22, 0x08	; 8
    2fd2:	41 e0       	ldi	r20, 0x01	; 1
    2fd4:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
	Word|=CGS_u8SSD_Num[A_u8Num];
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	9a 81       	ldd	r25, Y+2	; 0x02
    2fdc:	fc 01       	movw	r30, r24
    2fde:	ef 53       	subi	r30, 0x3F	; 63
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	80 81       	ld	r24, Z
    2fe4:	28 2f       	mov	r18, r24
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	80 91 54 01 	lds	r24, 0x0154
    2fec:	90 91 55 01 	lds	r25, 0x0155
    2ff0:	82 2b       	or	r24, r18
    2ff2:	93 2b       	or	r25, r19
    2ff4:	90 93 55 01 	sts	0x0155, r25
    2ff8:	80 93 54 01 	sts	0x0154, r24

	ShiftRegester();
    2ffc:	0e 94 99 18 	call	0x3132	; 0x3132 <ShiftRegester>
}
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	08 95       	ret

0000300a <HSRV_vInit>:
#include"../../MCAL/TMR/TMR_cfg.h"

#include"SRV_int.h"

void HSRV_vInit(void)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
	MTMR_vInit();
    3012:	0e 94 4c 09 	call	0x1298	; 0x1298 <MTMR_vInit>
#if Prescaler==Prescaler_8
	MTMR_vSetTopValue(20000);
    3016:	80 e2       	ldi	r24, 0x20	; 32
    3018:	9e e4       	ldi	r25, 0x4E	; 78
    301a:	0e 94 09 0a 	call	0x1412	; 0x1412 <MTMR_vSetTopValue>
#elif Prescaler==Prescaler_64
	MTMR_vSetTopValue(2500);
#endif
	MDIO_vSetPinDir(DIO_PORTD,DIO_PIN5,DIO_Output);
    301e:	83 e0       	ldi	r24, 0x03	; 3
    3020:	65 e0       	ldi	r22, 0x05	; 5
    3022:	41 e0       	ldi	r20, 0x01	; 1
    3024:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MGIE_vEnableGlobalInterrubt();
    3028:	0e 94 ed 11 	call	0x23da	; 0x23da <MGIE_vEnableGlobalInterrubt>
}
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	08 95       	ret

00003032 <HSRV_vSetAngle>:

void HSRV_vSetAngle(u08 A_u8Angle)
{
    3032:	df 93       	push	r29
    3034:	cf 93       	push	r28
    3036:	00 d0       	rcall	.+0      	; 0x3038 <HSRV_vSetAngle+0x6>
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
    303c:	8a 83       	std	Y+2, r24	; 0x02
	for(u08 L_u8I=0;L_u8I<15;L_u8I++)
    303e:	19 82       	std	Y+1, r1	; 0x01
    3040:	22 c0       	rjmp	.+68     	; 0x3086 <HSRV_vSetAngle+0x54>
	{
#if Prescaler==Prescaler_8
		//MTMR_vSetCompareValue(Timer1,((A_u8Angle*10)+520));
		MTMR_vSetCompareValue(Timer1,(A_u8Angle*65)/6+650);
    3042:	8a 81       	ldd	r24, Y+2	; 0x02
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	c9 01       	movw	r24, r18
    304a:	00 24       	eor	r0, r0
    304c:	96 95       	lsr	r25
    304e:	87 95       	ror	r24
    3050:	07 94       	ror	r0
    3052:	96 95       	lsr	r25
    3054:	87 95       	ror	r24
    3056:	07 94       	ror	r0
    3058:	98 2f       	mov	r25, r24
    305a:	80 2d       	mov	r24, r0
    305c:	82 0f       	add	r24, r18
    305e:	93 1f       	adc	r25, r19
    3060:	26 e0       	ldi	r18, 0x06	; 6
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	b9 01       	movw	r22, r18
    3066:	0e 94 01 31 	call	0x6202	; 0x6202 <__divmodhi4>
    306a:	cb 01       	movw	r24, r22
    306c:	86 57       	subi	r24, 0x76	; 118
    306e:	9d 4f       	sbci	r25, 0xFD	; 253
    3070:	9c 01       	movw	r18, r24
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	b9 01       	movw	r22, r18
    3076:	0e 94 ce 09 	call	0x139c	; 0x139c <MTMR_vSetCompareValue>
#elif Prescaler==Prescaler_64
	MTMR_vSetCompareValue(Timer1,((A_u8Angle*225/180)+65));
#endif
	MTMR_vStartTimer(Timer1);
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <MTMR_vStartTimer>
	MGIE_vEnableGlobalInterrubt();
}

void HSRV_vSetAngle(u08 A_u8Angle)
{
	for(u08 L_u8I=0;L_u8I<15;L_u8I++)
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	8f 5f       	subi	r24, 0xFF	; 255
    3084:	89 83       	std	Y+1, r24	; 0x01
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	8f 30       	cpi	r24, 0x0F	; 15
    308a:	d8 f2       	brcs	.-74     	; 0x3042 <HSRV_vSetAngle+0x10>
#elif Prescaler==Prescaler_64
	MTMR_vSetCompareValue(Timer1,((A_u8Angle*225/180)+65));
#endif
	MTMR_vStartTimer(Timer1);
	}
}
    308c:	0f 90       	pop	r0
    308e:	0f 90       	pop	r0
    3090:	cf 91       	pop	r28
    3092:	df 91       	pop	r29
    3094:	08 95       	ret

00003096 <HSLN_IN>:
#include "SLNDR_cfg.h"
#include "SLNDR_int.h"


void HSLN_IN(void)
{
    3096:	df 93       	push	r29
    3098:	cf 93       	push	r28
    309a:	cd b7       	in	r28, 0x3d	; 61
    309c:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinVal(IN_PORT,IN_PIN,DIO_HIGH);
    309e:	82 e0       	ldi	r24, 0x02	; 2
    30a0:	64 e0       	ldi	r22, 0x04	; 4
    30a2:	41 e0       	ldi	r20, 0x01	; 1
    30a4:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

}
    30a8:	cf 91       	pop	r28
    30aa:	df 91       	pop	r29
    30ac:	08 95       	ret

000030ae <HSLN_OUT>:
void HSLN_OUT(void)
{
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinVal(IN_PORT,IN_PIN,DIO_LOW);
    30b6:	82 e0       	ldi	r24, 0x02	; 2
    30b8:	64 e0       	ldi	r22, 0x04	; 4
    30ba:	40 e0       	ldi	r20, 0x00	; 0
    30bc:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

}
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	08 95       	ret

000030c6 <HSLN_Init>:

void HSLN_Init(void)
{
    30c6:	df 93       	push	r29
    30c8:	cf 93       	push	r28
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(IN_PORT,IN_PIN,DIO_Output);
    30ce:	82 e0       	ldi	r24, 0x02	; 2
    30d0:	64 e0       	ldi	r22, 0x04	; 4
    30d2:	41 e0       	ldi	r20, 0x01	; 1
    30d4:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinVal(IN_PORT,IN_PIN,DIO_LOW);
    30d8:	82 e0       	ldi	r24, 0x02	; 2
    30da:	64 e0       	ldi	r22, 0x04	; 4
    30dc:	40 e0       	ldi	r20, 0x00	; 0
    30de:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>


}
    30e2:	cf 91       	pop	r28
    30e4:	df 91       	pop	r29
    30e6:	08 95       	ret

000030e8 <HSHFT_vInit>:
#include"SHFT_int.h"
#include"SHFT_cfg.h"
#include"../../MCAL/DIO/DIO_int.h"

void HSHFT_vInit(void)
{
    30e8:	df 93       	push	r29
    30ea:	cf 93       	push	r28
    30ec:	cd b7       	in	r28, 0x3d	; 61
    30ee:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(LatchPort,LatchPin,DIO_Output);
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	62 e0       	ldi	r22, 0x02	; 2
    30f4:	41 e0       	ldi	r20, 0x01	; 1
    30f6:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DataPort,DataPin,DIO_Output);
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	60 e0       	ldi	r22, 0x00	; 0
    30fe:	41 e0       	ldi	r20, 0x01	; 1
    3100:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(ShiftPort,ShiftPin,DIO_Output);
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	61 e0       	ldi	r22, 0x01	; 1
    3108:	41 e0       	ldi	r20, 0x01	; 1
    310a:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>


	MDIO_vSetPinVal(LatchPort,LatchPin,DIO_LOW);
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	62 e0       	ldi	r22, 0x02	; 2
    3112:	40 e0       	ldi	r20, 0x00	; 0
    3114:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(DataPort,DataPin,DIO_LOW);
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	60 e0       	ldi	r22, 0x00	; 0
    311c:	40 e0       	ldi	r20, 0x00	; 0
    311e:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(ShiftPort,ShiftPin,DIO_LOW);
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	61 e0       	ldi	r22, 0x01	; 1
    3126:	40 e0       	ldi	r20, 0x00	; 0
    3128:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

}
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	08 95       	ret

00003132 <ShiftRegester>:

void ShiftRegester(void)
{
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	00 d0       	rcall	.+0      	; 0x3138 <ShiftRegester+0x6>
    3138:	0f 92       	push	r0
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
	u16 word=Word;
    313e:	80 91 54 01 	lds	r24, 0x0154
    3142:	90 91 55 01 	lds	r25, 0x0155
    3146:	9b 83       	std	Y+3, r25	; 0x03
    3148:	8a 83       	std	Y+2, r24	; 0x02
	MDIO_vSetPinVal(LatchPort,LatchPin,DIO_LOW);
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	62 e0       	ldi	r22, 0x02	; 2
    314e:	40 e0       	ldi	r20, 0x00	; 0
    3150:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
	for(u08 i=0;i<16;i++)
    3154:	19 82       	std	Y+1, r1	; 0x01
    3156:	1b c0       	rjmp	.+54     	; 0x318e <ShiftRegester+0x5c>
	{

		MDIO_vSetPinVal(DataPort,DataPin,(word&1));
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
    315a:	98 2f       	mov	r25, r24
    315c:	91 70       	andi	r25, 0x01	; 1
    315e:	80 e0       	ldi	r24, 0x00	; 0
    3160:	60 e0       	ldi	r22, 0x00	; 0
    3162:	49 2f       	mov	r20, r25
    3164:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
		word>>=1;
    3168:	8a 81       	ldd	r24, Y+2	; 0x02
    316a:	9b 81       	ldd	r25, Y+3	; 0x03
    316c:	96 95       	lsr	r25
    316e:	87 95       	ror	r24
    3170:	9b 83       	std	Y+3, r25	; 0x03
    3172:	8a 83       	std	Y+2, r24	; 0x02
		MDIO_vSetPinVal(ShiftPort,ShiftPin,DIO_HIGH);
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	61 e0       	ldi	r22, 0x01	; 1
    3178:	41 e0       	ldi	r20, 0x01	; 1
    317a:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
		MDIO_vSetPinVal(ShiftPort,ShiftPin,DIO_LOW);
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	61 e0       	ldi	r22, 0x01	; 1
    3182:	40 e0       	ldi	r20, 0x00	; 0
    3184:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

void ShiftRegester(void)
{
	u16 word=Word;
	MDIO_vSetPinVal(LatchPort,LatchPin,DIO_LOW);
	for(u08 i=0;i<16;i++)
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	8f 5f       	subi	r24, 0xFF	; 255
    318c:	89 83       	std	Y+1, r24	; 0x01
    318e:	89 81       	ldd	r24, Y+1	; 0x01
    3190:	80 31       	cpi	r24, 0x10	; 16
    3192:	10 f3       	brcs	.-60     	; 0x3158 <ShiftRegester+0x26>
		MDIO_vSetPinVal(ShiftPort,ShiftPin,DIO_HIGH);
		MDIO_vSetPinVal(ShiftPort,ShiftPin,DIO_LOW);

	}

	MDIO_vSetPinVal(LatchPort,LatchPin,DIO_HIGH);
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	62 e0       	ldi	r22, 0x02	; 2
    3198:	41 e0       	ldi	r20, 0x01	; 1
    319a:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>


}
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	cf 91       	pop	r28
    31a6:	df 91       	pop	r29
    31a8:	08 95       	ret

000031aa <HLDCL_vInit>:

#include"LDCL_int.h"
#include"LDCL_cfg.h"

void HLDCL_vInit(void)
{
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(SCL_Port,SCL_Pin,DIO_Output);
    31b2:	83 e0       	ldi	r24, 0x03	; 3
    31b4:	60 e0       	ldi	r22, 0x00	; 0
    31b6:	41 e0       	ldi	r20, 0x01	; 1
    31b8:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(DOUT_Port,DOUT_Pin,DIO_Input);
    31bc:	83 e0       	ldi	r24, 0x03	; 3
    31be:	67 e0       	ldi	r22, 0x07	; 7
    31c0:	40 e0       	ldi	r20, 0x00	; 0
    31c2:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinVal(SCL_Port,SCL_Pin,DIO_LOW);
    31c6:	83 e0       	ldi	r24, 0x03	; 3
    31c8:	60 e0       	ldi	r22, 0x00	; 0
    31ca:	40 e0       	ldi	r20, 0x00	; 0
    31cc:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>


}
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	08 95       	ret

000031d6 <HLDCL_vRead>:

u08 HLDCL_vRead(void)
{
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62
    31de:	ed 97       	sbiw	r28, 0x3d	; 61
    31e0:	0f b6       	in	r0, 0x3f	; 63
    31e2:	f8 94       	cli
    31e4:	de bf       	out	0x3e, r29	; 62
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	cd bf       	out	0x3d, r28	; 61
	while(MDIO_u8GetPinVal(DOUT_Port,DOUT_Pin)==0);
    31ea:	83 e0       	ldi	r24, 0x03	; 3
    31ec:	67 e0       	ldi	r22, 0x07	; 7
    31ee:	0e 94 a2 14 	call	0x2944	; 0x2944 <MDIO_u8GetPinVal>
    31f2:	88 23       	and	r24, r24
    31f4:	d1 f3       	breq	.-12     	; 0x31ea <HLDCL_vRead+0x14>
	u32 Read;
    for(u08 i = 0; i < 24; i++) {
    31f6:	19 ae       	std	Y+57, r1	; 0x39
    31f8:	16 c1       	rjmp	.+556    	; 0x3426 <HLDCL_vRead+0x250>
    	MDIO_vSetPinVal(SCL_Port,SCL_Pin, DIO_HIGH);
    31fa:	83 e0       	ldi	r24, 0x03	; 3
    31fc:	60 e0       	ldi	r22, 0x00	; 0
    31fe:	41 e0       	ldi	r20, 0x01	; 1
    3200:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	a0 e8       	ldi	r26, 0x80	; 128
    320a:	bf e3       	ldi	r27, 0x3F	; 63
    320c:	8d ab       	std	Y+53, r24	; 0x35
    320e:	9e ab       	std	Y+54, r25	; 0x36
    3210:	af ab       	std	Y+55, r26	; 0x37
    3212:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3214:	6d a9       	ldd	r22, Y+53	; 0x35
    3216:	7e a9       	ldd	r23, Y+54	; 0x36
    3218:	8f a9       	ldd	r24, Y+55	; 0x37
    321a:	98 ad       	ldd	r25, Y+56	; 0x38
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	4a ef       	ldi	r20, 0xFA	; 250
    3222:	54 e4       	ldi	r21, 0x44	; 68
    3224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	89 ab       	std	Y+49, r24	; 0x31
    322e:	9a ab       	std	Y+50, r25	; 0x32
    3230:	ab ab       	std	Y+51, r26	; 0x33
    3232:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3234:	69 a9       	ldd	r22, Y+49	; 0x31
    3236:	7a a9       	ldd	r23, Y+50	; 0x32
    3238:	8b a9       	ldd	r24, Y+51	; 0x33
    323a:	9c a9       	ldd	r25, Y+52	; 0x34
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e8       	ldi	r20, 0x80	; 128
    3242:	5f e3       	ldi	r21, 0x3F	; 63
    3244:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3248:	88 23       	and	r24, r24
    324a:	2c f4       	brge	.+10     	; 0x3256 <HLDCL_vRead+0x80>
		__ticks = 1;
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	98 ab       	std	Y+48, r25	; 0x30
    3252:	8f a7       	std	Y+47, r24	; 0x2f
    3254:	3f c0       	rjmp	.+126    	; 0x32d4 <HLDCL_vRead+0xfe>
	else if (__tmp > 65535)
    3256:	69 a9       	ldd	r22, Y+49	; 0x31
    3258:	7a a9       	ldd	r23, Y+50	; 0x32
    325a:	8b a9       	ldd	r24, Y+51	; 0x33
    325c:	9c a9       	ldd	r25, Y+52	; 0x34
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	3f ef       	ldi	r19, 0xFF	; 255
    3262:	4f e7       	ldi	r20, 0x7F	; 127
    3264:	57 e4       	ldi	r21, 0x47	; 71
    3266:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    326a:	18 16       	cp	r1, r24
    326c:	4c f5       	brge	.+82     	; 0x32c0 <HLDCL_vRead+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326e:	6d a9       	ldd	r22, Y+53	; 0x35
    3270:	7e a9       	ldd	r23, Y+54	; 0x36
    3272:	8f a9       	ldd	r24, Y+55	; 0x37
    3274:	98 ad       	ldd	r25, Y+56	; 0x38
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	40 e2       	ldi	r20, 0x20	; 32
    327c:	51 e4       	ldi	r21, 0x41	; 65
    327e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	bc 01       	movw	r22, r24
    3288:	cd 01       	movw	r24, r26
    328a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	98 ab       	std	Y+48, r25	; 0x30
    3294:	8f a7       	std	Y+47, r24	; 0x2f
    3296:	0f c0       	rjmp	.+30     	; 0x32b6 <HLDCL_vRead+0xe0>
    3298:	88 ec       	ldi	r24, 0xC8	; 200
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	9e a7       	std	Y+46, r25	; 0x2e
    329e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    32a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <HLDCL_vRead+0xce>
    32a8:	9e a7       	std	Y+46, r25	; 0x2e
    32aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ae:	98 a9       	ldd	r25, Y+48	; 0x30
    32b0:	01 97       	sbiw	r24, 0x01	; 1
    32b2:	98 ab       	std	Y+48, r25	; 0x30
    32b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    32b8:	98 a9       	ldd	r25, Y+48	; 0x30
    32ba:	00 97       	sbiw	r24, 0x00	; 0
    32bc:	69 f7       	brne	.-38     	; 0x3298 <HLDCL_vRead+0xc2>
    32be:	14 c0       	rjmp	.+40     	; 0x32e8 <HLDCL_vRead+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c0:	69 a9       	ldd	r22, Y+49	; 0x31
    32c2:	7a a9       	ldd	r23, Y+50	; 0x32
    32c4:	8b a9       	ldd	r24, Y+51	; 0x33
    32c6:	9c a9       	ldd	r25, Y+52	; 0x34
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	98 ab       	std	Y+48, r25	; 0x30
    32d2:	8f a7       	std	Y+47, r24	; 0x2f
    32d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32d6:	98 a9       	ldd	r25, Y+48	; 0x30
    32d8:	9c a7       	std	Y+44, r25	; 0x2c
    32da:	8b a7       	std	Y+43, r24	; 0x2b
    32dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    32de:	9c a5       	ldd	r25, Y+44	; 0x2c
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	f1 f7       	brne	.-4      	; 0x32e0 <HLDCL_vRead+0x10a>
    32e4:	9c a7       	std	Y+44, r25	; 0x2c
    32e6:	8b a7       	std	Y+43, r24	; 0x2b
    	_delay_ms(1);
        Read |= (MDIO_u8GetPinVal(DOUT_Port,DOUT_Pin) << (23-i));
    32e8:	83 e0       	ldi	r24, 0x03	; 3
    32ea:	67 e0       	ldi	r22, 0x07	; 7
    32ec:	0e 94 a2 14 	call	0x2944	; 0x2944 <MDIO_u8GetPinVal>
    32f0:	48 2f       	mov	r20, r24
    32f2:	50 e0       	ldi	r21, 0x00	; 0
    32f4:	89 ad       	ldd	r24, Y+57	; 0x39
    32f6:	28 2f       	mov	r18, r24
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	87 e1       	ldi	r24, 0x17	; 23
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	82 1b       	sub	r24, r18
    3300:	93 0b       	sbc	r25, r19
    3302:	9a 01       	movw	r18, r20
    3304:	02 c0       	rjmp	.+4      	; 0x330a <HLDCL_vRead+0x134>
    3306:	22 0f       	add	r18, r18
    3308:	33 1f       	adc	r19, r19
    330a:	8a 95       	dec	r24
    330c:	e2 f7       	brpl	.-8      	; 0x3306 <HLDCL_vRead+0x130>
    330e:	c9 01       	movw	r24, r18
    3310:	9c 01       	movw	r18, r24
    3312:	44 27       	eor	r20, r20
    3314:	37 fd       	sbrc	r19, 7
    3316:	40 95       	com	r20
    3318:	54 2f       	mov	r21, r20
    331a:	8a ad       	ldd	r24, Y+58	; 0x3a
    331c:	9b ad       	ldd	r25, Y+59	; 0x3b
    331e:	ac ad       	ldd	r26, Y+60	; 0x3c
    3320:	bd ad       	ldd	r27, Y+61	; 0x3d
    3322:	82 2b       	or	r24, r18
    3324:	93 2b       	or	r25, r19
    3326:	a4 2b       	or	r26, r20
    3328:	b5 2b       	or	r27, r21
    332a:	8a af       	std	Y+58, r24	; 0x3a
    332c:	9b af       	std	Y+59, r25	; 0x3b
    332e:	ac af       	std	Y+60, r26	; 0x3c
    3330:	bd af       	std	Y+61, r27	; 0x3d
        MDIO_vSetPinVal(SCL_Port,SCL_Pin, DIO_LOW);
    3332:	83 e0       	ldi	r24, 0x03	; 3
    3334:	60 e0       	ldi	r22, 0x00	; 0
    3336:	40 e0       	ldi	r20, 0x00	; 0
    3338:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	a0 e8       	ldi	r26, 0x80	; 128
    3342:	bf e3       	ldi	r27, 0x3F	; 63
    3344:	8f a3       	std	Y+39, r24	; 0x27
    3346:	98 a7       	std	Y+40, r25	; 0x28
    3348:	a9 a7       	std	Y+41, r26	; 0x29
    334a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    334c:	6f a1       	ldd	r22, Y+39	; 0x27
    334e:	78 a5       	ldd	r23, Y+40	; 0x28
    3350:	89 a5       	ldd	r24, Y+41	; 0x29
    3352:	9a a5       	ldd	r25, Y+42	; 0x2a
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	4a ef       	ldi	r20, 0xFA	; 250
    335a:	54 e4       	ldi	r21, 0x44	; 68
    335c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	8b a3       	std	Y+35, r24	; 0x23
    3366:	9c a3       	std	Y+36, r25	; 0x24
    3368:	ad a3       	std	Y+37, r26	; 0x25
    336a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    336c:	6b a1       	ldd	r22, Y+35	; 0x23
    336e:	7c a1       	ldd	r23, Y+36	; 0x24
    3370:	8d a1       	ldd	r24, Y+37	; 0x25
    3372:	9e a1       	ldd	r25, Y+38	; 0x26
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e8       	ldi	r20, 0x80	; 128
    337a:	5f e3       	ldi	r21, 0x3F	; 63
    337c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3380:	88 23       	and	r24, r24
    3382:	2c f4       	brge	.+10     	; 0x338e <HLDCL_vRead+0x1b8>
		__ticks = 1;
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	9a a3       	std	Y+34, r25	; 0x22
    338a:	89 a3       	std	Y+33, r24	; 0x21
    338c:	3f c0       	rjmp	.+126    	; 0x340c <HLDCL_vRead+0x236>
	else if (__tmp > 65535)
    338e:	6b a1       	ldd	r22, Y+35	; 0x23
    3390:	7c a1       	ldd	r23, Y+36	; 0x24
    3392:	8d a1       	ldd	r24, Y+37	; 0x25
    3394:	9e a1       	ldd	r25, Y+38	; 0x26
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	3f ef       	ldi	r19, 0xFF	; 255
    339a:	4f e7       	ldi	r20, 0x7F	; 127
    339c:	57 e4       	ldi	r21, 0x47	; 71
    339e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33a2:	18 16       	cp	r1, r24
    33a4:	4c f5       	brge	.+82     	; 0x33f8 <HLDCL_vRead+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a6:	6f a1       	ldd	r22, Y+39	; 0x27
    33a8:	78 a5       	ldd	r23, Y+40	; 0x28
    33aa:	89 a5       	ldd	r24, Y+41	; 0x29
    33ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e2       	ldi	r20, 0x20	; 32
    33b4:	51 e4       	ldi	r21, 0x41	; 65
    33b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	bc 01       	movw	r22, r24
    33c0:	cd 01       	movw	r24, r26
    33c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	9a a3       	std	Y+34, r25	; 0x22
    33cc:	89 a3       	std	Y+33, r24	; 0x21
    33ce:	0f c0       	rjmp	.+30     	; 0x33ee <HLDCL_vRead+0x218>
    33d0:	88 ec       	ldi	r24, 0xC8	; 200
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	98 a3       	std	Y+32, r25	; 0x20
    33d6:	8f 8f       	std	Y+31, r24	; 0x1f
    33d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33da:	98 a1       	ldd	r25, Y+32	; 0x20
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	f1 f7       	brne	.-4      	; 0x33dc <HLDCL_vRead+0x206>
    33e0:	98 a3       	std	Y+32, r25	; 0x20
    33e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e4:	89 a1       	ldd	r24, Y+33	; 0x21
    33e6:	9a a1       	ldd	r25, Y+34	; 0x22
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	9a a3       	std	Y+34, r25	; 0x22
    33ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ee:	89 a1       	ldd	r24, Y+33	; 0x21
    33f0:	9a a1       	ldd	r25, Y+34	; 0x22
    33f2:	00 97       	sbiw	r24, 0x00	; 0
    33f4:	69 f7       	brne	.-38     	; 0x33d0 <HLDCL_vRead+0x1fa>
    33f6:	14 c0       	rjmp	.+40     	; 0x3420 <HLDCL_vRead+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f8:	6b a1       	ldd	r22, Y+35	; 0x23
    33fa:	7c a1       	ldd	r23, Y+36	; 0x24
    33fc:	8d a1       	ldd	r24, Y+37	; 0x25
    33fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	9a a3       	std	Y+34, r25	; 0x22
    340a:	89 a3       	std	Y+33, r24	; 0x21
    340c:	89 a1       	ldd	r24, Y+33	; 0x21
    340e:	9a a1       	ldd	r25, Y+34	; 0x22
    3410:	9e 8f       	std	Y+30, r25	; 0x1e
    3412:	8d 8f       	std	Y+29, r24	; 0x1d
    3414:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3416:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	f1 f7       	brne	.-4      	; 0x3418 <HLDCL_vRead+0x242>
    341c:	9e 8f       	std	Y+30, r25	; 0x1e
    341e:	8d 8f       	std	Y+29, r24	; 0x1d

u08 HLDCL_vRead(void)
{
	while(MDIO_u8GetPinVal(DOUT_Port,DOUT_Pin)==0);
	u32 Read;
    for(u08 i = 0; i < 24; i++) {
    3420:	89 ad       	ldd	r24, Y+57	; 0x39
    3422:	8f 5f       	subi	r24, 0xFF	; 255
    3424:	89 af       	std	Y+57, r24	; 0x39
    3426:	89 ad       	ldd	r24, Y+57	; 0x39
    3428:	88 31       	cpi	r24, 0x18	; 24
    342a:	08 f4       	brcc	.+2      	; 0x342e <HLDCL_vRead+0x258>
    342c:	e6 ce       	rjmp	.-564    	; 0x31fa <HLDCL_vRead+0x24>
    	_delay_ms(1);
        Read |= (MDIO_u8GetPinVal(DOUT_Port,DOUT_Pin) << (23-i));
        MDIO_vSetPinVal(SCL_Port,SCL_Pin, DIO_LOW);
        _delay_ms(1);
    }
	MDIO_vSetPinVal(SCL_Port,SCL_Pin, DIO_HIGH);
    342e:	83 e0       	ldi	r24, 0x03	; 3
    3430:	60 e0       	ldi	r22, 0x00	; 0
    3432:	41 e0       	ldi	r20, 0x01	; 1
    3434:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	a0 e8       	ldi	r26, 0x80	; 128
    343e:	bf e3       	ldi	r27, 0x3F	; 63
    3440:	89 8f       	std	Y+25, r24	; 0x19
    3442:	9a 8f       	std	Y+26, r25	; 0x1a
    3444:	ab 8f       	std	Y+27, r26	; 0x1b
    3446:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3448:	69 8d       	ldd	r22, Y+25	; 0x19
    344a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    344c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    344e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3450:	20 e0       	ldi	r18, 0x00	; 0
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	4a ef       	ldi	r20, 0xFA	; 250
    3456:	54 e4       	ldi	r21, 0x44	; 68
    3458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345c:	dc 01       	movw	r26, r24
    345e:	cb 01       	movw	r24, r22
    3460:	8d 8b       	std	Y+21, r24	; 0x15
    3462:	9e 8b       	std	Y+22, r25	; 0x16
    3464:	af 8b       	std	Y+23, r26	; 0x17
    3466:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3468:	6d 89       	ldd	r22, Y+21	; 0x15
    346a:	7e 89       	ldd	r23, Y+22	; 0x16
    346c:	8f 89       	ldd	r24, Y+23	; 0x17
    346e:	98 8d       	ldd	r25, Y+24	; 0x18
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	40 e8       	ldi	r20, 0x80	; 128
    3476:	5f e3       	ldi	r21, 0x3F	; 63
    3478:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    347c:	88 23       	and	r24, r24
    347e:	2c f4       	brge	.+10     	; 0x348a <HLDCL_vRead+0x2b4>
		__ticks = 1;
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	9c 8b       	std	Y+20, r25	; 0x14
    3486:	8b 8b       	std	Y+19, r24	; 0x13
    3488:	3f c0       	rjmp	.+126    	; 0x3508 <HLDCL_vRead+0x332>
	else if (__tmp > 65535)
    348a:	6d 89       	ldd	r22, Y+21	; 0x15
    348c:	7e 89       	ldd	r23, Y+22	; 0x16
    348e:	8f 89       	ldd	r24, Y+23	; 0x17
    3490:	98 8d       	ldd	r25, Y+24	; 0x18
    3492:	20 e0       	ldi	r18, 0x00	; 0
    3494:	3f ef       	ldi	r19, 0xFF	; 255
    3496:	4f e7       	ldi	r20, 0x7F	; 127
    3498:	57 e4       	ldi	r21, 0x47	; 71
    349a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    349e:	18 16       	cp	r1, r24
    34a0:	4c f5       	brge	.+82     	; 0x34f4 <HLDCL_vRead+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a2:	69 8d       	ldd	r22, Y+25	; 0x19
    34a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	40 e2       	ldi	r20, 0x20	; 32
    34b0:	51 e4       	ldi	r21, 0x41	; 65
    34b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	bc 01       	movw	r22, r24
    34bc:	cd 01       	movw	r24, r26
    34be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	9c 8b       	std	Y+20, r25	; 0x14
    34c8:	8b 8b       	std	Y+19, r24	; 0x13
    34ca:	0f c0       	rjmp	.+30     	; 0x34ea <HLDCL_vRead+0x314>
    34cc:	88 ec       	ldi	r24, 0xC8	; 200
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9a 8b       	std	Y+18, r25	; 0x12
    34d2:	89 8b       	std	Y+17, r24	; 0x11
    34d4:	89 89       	ldd	r24, Y+17	; 0x11
    34d6:	9a 89       	ldd	r25, Y+18	; 0x12
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	f1 f7       	brne	.-4      	; 0x34d8 <HLDCL_vRead+0x302>
    34dc:	9a 8b       	std	Y+18, r25	; 0x12
    34de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e0:	8b 89       	ldd	r24, Y+19	; 0x13
    34e2:	9c 89       	ldd	r25, Y+20	; 0x14
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	9c 8b       	std	Y+20, r25	; 0x14
    34e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ea:	8b 89       	ldd	r24, Y+19	; 0x13
    34ec:	9c 89       	ldd	r25, Y+20	; 0x14
    34ee:	00 97       	sbiw	r24, 0x00	; 0
    34f0:	69 f7       	brne	.-38     	; 0x34cc <HLDCL_vRead+0x2f6>
    34f2:	14 c0       	rjmp	.+40     	; 0x351c <HLDCL_vRead+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f4:	6d 89       	ldd	r22, Y+21	; 0x15
    34f6:	7e 89       	ldd	r23, Y+22	; 0x16
    34f8:	8f 89       	ldd	r24, Y+23	; 0x17
    34fa:	98 8d       	ldd	r25, Y+24	; 0x18
    34fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	9c 8b       	std	Y+20, r25	; 0x14
    3506:	8b 8b       	std	Y+19, r24	; 0x13
    3508:	8b 89       	ldd	r24, Y+19	; 0x13
    350a:	9c 89       	ldd	r25, Y+20	; 0x14
    350c:	98 8b       	std	Y+16, r25	; 0x10
    350e:	8f 87       	std	Y+15, r24	; 0x0f
    3510:	8f 85       	ldd	r24, Y+15	; 0x0f
    3512:	98 89       	ldd	r25, Y+16	; 0x10
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	f1 f7       	brne	.-4      	; 0x3514 <HLDCL_vRead+0x33e>
    3518:	98 8b       	std	Y+16, r25	; 0x10
    351a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
    MDIO_vSetPinVal(SCL_Port,SCL_Pin, DIO_LOW);
    351c:	83 e0       	ldi	r24, 0x03	; 3
    351e:	60 e0       	ldi	r22, 0x00	; 0
    3520:	40 e0       	ldi	r20, 0x00	; 0
    3522:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	a0 e8       	ldi	r26, 0x80	; 128
    352c:	bf e3       	ldi	r27, 0x3F	; 63
    352e:	8b 87       	std	Y+11, r24	; 0x0b
    3530:	9c 87       	std	Y+12, r25	; 0x0c
    3532:	ad 87       	std	Y+13, r26	; 0x0d
    3534:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3536:	6b 85       	ldd	r22, Y+11	; 0x0b
    3538:	7c 85       	ldd	r23, Y+12	; 0x0c
    353a:	8d 85       	ldd	r24, Y+13	; 0x0d
    353c:	9e 85       	ldd	r25, Y+14	; 0x0e
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	4a ef       	ldi	r20, 0xFA	; 250
    3544:	54 e4       	ldi	r21, 0x44	; 68
    3546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	8f 83       	std	Y+7, r24	; 0x07
    3550:	98 87       	std	Y+8, r25	; 0x08
    3552:	a9 87       	std	Y+9, r26	; 0x09
    3554:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3556:	6f 81       	ldd	r22, Y+7	; 0x07
    3558:	78 85       	ldd	r23, Y+8	; 0x08
    355a:	89 85       	ldd	r24, Y+9	; 0x09
    355c:	9a 85       	ldd	r25, Y+10	; 0x0a
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e8       	ldi	r20, 0x80	; 128
    3564:	5f e3       	ldi	r21, 0x3F	; 63
    3566:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    356a:	88 23       	and	r24, r24
    356c:	2c f4       	brge	.+10     	; 0x3578 <HLDCL_vRead+0x3a2>
		__ticks = 1;
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	9e 83       	std	Y+6, r25	; 0x06
    3574:	8d 83       	std	Y+5, r24	; 0x05
    3576:	3f c0       	rjmp	.+126    	; 0x35f6 <HLDCL_vRead+0x420>
	else if (__tmp > 65535)
    3578:	6f 81       	ldd	r22, Y+7	; 0x07
    357a:	78 85       	ldd	r23, Y+8	; 0x08
    357c:	89 85       	ldd	r24, Y+9	; 0x09
    357e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	3f ef       	ldi	r19, 0xFF	; 255
    3584:	4f e7       	ldi	r20, 0x7F	; 127
    3586:	57 e4       	ldi	r21, 0x47	; 71
    3588:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    358c:	18 16       	cp	r1, r24
    358e:	4c f5       	brge	.+82     	; 0x35e2 <HLDCL_vRead+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3590:	6b 85       	ldd	r22, Y+11	; 0x0b
    3592:	7c 85       	ldd	r23, Y+12	; 0x0c
    3594:	8d 85       	ldd	r24, Y+13	; 0x0d
    3596:	9e 85       	ldd	r25, Y+14	; 0x0e
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	40 e2       	ldi	r20, 0x20	; 32
    359e:	51 e4       	ldi	r21, 0x41	; 65
    35a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	bc 01       	movw	r22, r24
    35aa:	cd 01       	movw	r24, r26
    35ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	9e 83       	std	Y+6, r25	; 0x06
    35b6:	8d 83       	std	Y+5, r24	; 0x05
    35b8:	0f c0       	rjmp	.+30     	; 0x35d8 <HLDCL_vRead+0x402>
    35ba:	88 ec       	ldi	r24, 0xC8	; 200
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	9c 83       	std	Y+4, r25	; 0x04
    35c0:	8b 83       	std	Y+3, r24	; 0x03
    35c2:	8b 81       	ldd	r24, Y+3	; 0x03
    35c4:	9c 81       	ldd	r25, Y+4	; 0x04
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	f1 f7       	brne	.-4      	; 0x35c6 <HLDCL_vRead+0x3f0>
    35ca:	9c 83       	std	Y+4, r25	; 0x04
    35cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ce:	8d 81       	ldd	r24, Y+5	; 0x05
    35d0:	9e 81       	ldd	r25, Y+6	; 0x06
    35d2:	01 97       	sbiw	r24, 0x01	; 1
    35d4:	9e 83       	std	Y+6, r25	; 0x06
    35d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d8:	8d 81       	ldd	r24, Y+5	; 0x05
    35da:	9e 81       	ldd	r25, Y+6	; 0x06
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	69 f7       	brne	.-38     	; 0x35ba <HLDCL_vRead+0x3e4>
    35e0:	14 c0       	rjmp	.+40     	; 0x360a <HLDCL_vRead+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35e2:	6f 81       	ldd	r22, Y+7	; 0x07
    35e4:	78 85       	ldd	r23, Y+8	; 0x08
    35e6:	89 85       	ldd	r24, Y+9	; 0x09
    35e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ee:	dc 01       	movw	r26, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	9e 83       	std	Y+6, r25	; 0x06
    35f4:	8d 83       	std	Y+5, r24	; 0x05
    35f6:	8d 81       	ldd	r24, Y+5	; 0x05
    35f8:	9e 81       	ldd	r25, Y+6	; 0x06
    35fa:	9a 83       	std	Y+2, r25	; 0x02
    35fc:	89 83       	std	Y+1, r24	; 0x01
    35fe:	89 81       	ldd	r24, Y+1	; 0x01
    3600:	9a 81       	ldd	r25, Y+2	; 0x02
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	f1 f7       	brne	.-4      	; 0x3602 <HLDCL_vRead+0x42c>
    3606:	9a 83       	std	Y+2, r25	; 0x02
    3608:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    if(Read&0x800000)
    360a:	8a ad       	ldd	r24, Y+58	; 0x3a
    360c:	9b ad       	ldd	r25, Y+59	; 0x3b
    360e:	ac ad       	ldd	r26, Y+60	; 0x3c
    3610:	bd ad       	ldd	r27, Y+61	; 0x3d
    3612:	80 70       	andi	r24, 0x00	; 0
    3614:	90 70       	andi	r25, 0x00	; 0
    3616:	a0 78       	andi	r26, 0x80	; 128
    3618:	b0 70       	andi	r27, 0x00	; 0
    361a:	00 97       	sbiw	r24, 0x00	; 0
    361c:	a1 05       	cpc	r26, r1
    361e:	b1 05       	cpc	r27, r1
    3620:	49 f0       	breq	.+18     	; 0x3634 <HLDCL_vRead+0x45e>
    {
    	Read|=0xff000000;
    3622:	8a ad       	ldd	r24, Y+58	; 0x3a
    3624:	9b ad       	ldd	r25, Y+59	; 0x3b
    3626:	ac ad       	ldd	r26, Y+60	; 0x3c
    3628:	bd ad       	ldd	r27, Y+61	; 0x3d
    362a:	bf 6f       	ori	r27, 0xFF	; 255
    362c:	8a af       	std	Y+58, r24	; 0x3a
    362e:	9b af       	std	Y+59, r25	; 0x3b
    3630:	ac af       	std	Y+60, r26	; 0x3c
    3632:	bd af       	std	Y+61, r27	; 0x3d
    }

    return Read;
    3634:	8a ad       	ldd	r24, Y+58	; 0x3a
}
    3636:	ed 96       	adiw	r28, 0x3d	; 61
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
    3642:	cf 91       	pop	r28
    3644:	df 91       	pop	r29
    3646:	08 95       	ret

00003648 <HLCD_vClearDisplay>:
#include<util/delay.h>



void HLCD_vClearDisplay(void)
{
    3648:	df 93       	push	r29
    364a:	cf 93       	push	r28
    364c:	cd b7       	in	r28, 0x3d	; 61
    364e:	de b7       	in	r29, 0x3e	; 62
    3650:	2e 97       	sbiw	r28, 0x0e	; 14
    3652:	0f b6       	in	r0, 0x3f	; 63
    3654:	f8 94       	cli
    3656:	de bf       	out	0x3e, r29	; 62
    3658:	0f be       	out	0x3f, r0	; 63
    365a:	cd bf       	out	0x3d, r28	; 61
	HLCD_vSendCommandIIC(1);
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	0e 94 b5 1c 	call	0x396a	; 0x396a <HLCD_vSendCommandIIC>
    3664:	80 e0       	ldi	r24, 0x00	; 0
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	a0 e0       	ldi	r26, 0x00	; 0
    366a:	b0 e4       	ldi	r27, 0x40	; 64
    366c:	8b 87       	std	Y+11, r24	; 0x0b
    366e:	9c 87       	std	Y+12, r25	; 0x0c
    3670:	ad 87       	std	Y+13, r26	; 0x0d
    3672:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3674:	6b 85       	ldd	r22, Y+11	; 0x0b
    3676:	7c 85       	ldd	r23, Y+12	; 0x0c
    3678:	8d 85       	ldd	r24, Y+13	; 0x0d
    367a:	9e 85       	ldd	r25, Y+14	; 0x0e
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	4a ef       	ldi	r20, 0xFA	; 250
    3682:	54 e4       	ldi	r21, 0x44	; 68
    3684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	8f 83       	std	Y+7, r24	; 0x07
    368e:	98 87       	std	Y+8, r25	; 0x08
    3690:	a9 87       	std	Y+9, r26	; 0x09
    3692:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3694:	6f 81       	ldd	r22, Y+7	; 0x07
    3696:	78 85       	ldd	r23, Y+8	; 0x08
    3698:	89 85       	ldd	r24, Y+9	; 0x09
    369a:	9a 85       	ldd	r25, Y+10	; 0x0a
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	40 e8       	ldi	r20, 0x80	; 128
    36a2:	5f e3       	ldi	r21, 0x3F	; 63
    36a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36a8:	88 23       	and	r24, r24
    36aa:	2c f4       	brge	.+10     	; 0x36b6 <HLCD_vClearDisplay+0x6e>
		__ticks = 1;
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	9e 83       	std	Y+6, r25	; 0x06
    36b2:	8d 83       	std	Y+5, r24	; 0x05
    36b4:	3f c0       	rjmp	.+126    	; 0x3734 <HLCD_vClearDisplay+0xec>
	else if (__tmp > 65535)
    36b6:	6f 81       	ldd	r22, Y+7	; 0x07
    36b8:	78 85       	ldd	r23, Y+8	; 0x08
    36ba:	89 85       	ldd	r24, Y+9	; 0x09
    36bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	3f ef       	ldi	r19, 0xFF	; 255
    36c2:	4f e7       	ldi	r20, 0x7F	; 127
    36c4:	57 e4       	ldi	r21, 0x47	; 71
    36c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ca:	18 16       	cp	r1, r24
    36cc:	4c f5       	brge	.+82     	; 0x3720 <HLCD_vClearDisplay+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    36d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    36d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	40 e2       	ldi	r20, 0x20	; 32
    36dc:	51 e4       	ldi	r21, 0x41	; 65
    36de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	bc 01       	movw	r22, r24
    36e8:	cd 01       	movw	r24, r26
    36ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	9e 83       	std	Y+6, r25	; 0x06
    36f4:	8d 83       	std	Y+5, r24	; 0x05
    36f6:	0f c0       	rjmp	.+30     	; 0x3716 <HLCD_vClearDisplay+0xce>
    36f8:	88 ec       	ldi	r24, 0xC8	; 200
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	9c 83       	std	Y+4, r25	; 0x04
    36fe:	8b 83       	std	Y+3, r24	; 0x03
    3700:	8b 81       	ldd	r24, Y+3	; 0x03
    3702:	9c 81       	ldd	r25, Y+4	; 0x04
    3704:	01 97       	sbiw	r24, 0x01	; 1
    3706:	f1 f7       	brne	.-4      	; 0x3704 <HLCD_vClearDisplay+0xbc>
    3708:	9c 83       	std	Y+4, r25	; 0x04
    370a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    370c:	8d 81       	ldd	r24, Y+5	; 0x05
    370e:	9e 81       	ldd	r25, Y+6	; 0x06
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	9e 83       	std	Y+6, r25	; 0x06
    3714:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3716:	8d 81       	ldd	r24, Y+5	; 0x05
    3718:	9e 81       	ldd	r25, Y+6	; 0x06
    371a:	00 97       	sbiw	r24, 0x00	; 0
    371c:	69 f7       	brne	.-38     	; 0x36f8 <HLCD_vClearDisplay+0xb0>
    371e:	14 c0       	rjmp	.+40     	; 0x3748 <HLCD_vClearDisplay+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3720:	6f 81       	ldd	r22, Y+7	; 0x07
    3722:	78 85       	ldd	r23, Y+8	; 0x08
    3724:	89 85       	ldd	r24, Y+9	; 0x09
    3726:	9a 85       	ldd	r25, Y+10	; 0x0a
    3728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372c:	dc 01       	movw	r26, r24
    372e:	cb 01       	movw	r24, r22
    3730:	9e 83       	std	Y+6, r25	; 0x06
    3732:	8d 83       	std	Y+5, r24	; 0x05
    3734:	8d 81       	ldd	r24, Y+5	; 0x05
    3736:	9e 81       	ldd	r25, Y+6	; 0x06
    3738:	9a 83       	std	Y+2, r25	; 0x02
    373a:	89 83       	std	Y+1, r24	; 0x01
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	9a 81       	ldd	r25, Y+2	; 0x02
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	f1 f7       	brne	.-4      	; 0x3740 <HLCD_vClearDisplay+0xf8>
    3744:	9a 83       	std	Y+2, r25	; 0x02
    3746:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3748:	2e 96       	adiw	r28, 0x0e	; 14
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <HLCD_vSendCommand>:
void HLCD_vSendCommand(u08 A_u8Command)
{
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	6d 97       	sbiw	r28, 0x1d	; 29
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
    376e:	8d 8f       	std	Y+29, r24	; 0x1d
	TWI_u08SendStartCondition();
    3770:	0e 94 61 06 	call	0xcc2	; 0xcc2 <TWI_u08SendStartCondition>
	TWI_u08SendSlaveAddressRW(0x27,TWI_WRITE);
    3774:	87 e2       	ldi	r24, 0x27	; 39
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	0e 94 89 06 	call	0xd12	; 0xd12 <TWI_u08SendSlaveAddressRW>
	TWI_u08SendByte(A_u8Command|0b00001100);
    377c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    377e:	8c 60       	ori	r24, 0x0C	; 12
    3780:	0e 94 b4 06 	call	0xd68	; 0xd68 <TWI_u08SendByte>
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	a0 e8       	ldi	r26, 0x80	; 128
    378a:	bf e3       	ldi	r27, 0x3F	; 63
    378c:	89 8f       	std	Y+25, r24	; 0x19
    378e:	9a 8f       	std	Y+26, r25	; 0x1a
    3790:	ab 8f       	std	Y+27, r26	; 0x1b
    3792:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3794:	69 8d       	ldd	r22, Y+25	; 0x19
    3796:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3798:	8b 8d       	ldd	r24, Y+27	; 0x1b
    379a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	4a ef       	ldi	r20, 0xFA	; 250
    37a2:	54 e4       	ldi	r21, 0x44	; 68
    37a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	8d 8b       	std	Y+21, r24	; 0x15
    37ae:	9e 8b       	std	Y+22, r25	; 0x16
    37b0:	af 8b       	std	Y+23, r26	; 0x17
    37b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37b4:	6d 89       	ldd	r22, Y+21	; 0x15
    37b6:	7e 89       	ldd	r23, Y+22	; 0x16
    37b8:	8f 89       	ldd	r24, Y+23	; 0x17
    37ba:	98 8d       	ldd	r25, Y+24	; 0x18
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	40 e8       	ldi	r20, 0x80	; 128
    37c2:	5f e3       	ldi	r21, 0x3F	; 63
    37c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37c8:	88 23       	and	r24, r24
    37ca:	2c f4       	brge	.+10     	; 0x37d6 <HLCD_vSendCommand+0x7c>
		__ticks = 1;
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	9c 8b       	std	Y+20, r25	; 0x14
    37d2:	8b 8b       	std	Y+19, r24	; 0x13
    37d4:	3f c0       	rjmp	.+126    	; 0x3854 <HLCD_vSendCommand+0xfa>
	else if (__tmp > 65535)
    37d6:	6d 89       	ldd	r22, Y+21	; 0x15
    37d8:	7e 89       	ldd	r23, Y+22	; 0x16
    37da:	8f 89       	ldd	r24, Y+23	; 0x17
    37dc:	98 8d       	ldd	r25, Y+24	; 0x18
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	3f ef       	ldi	r19, 0xFF	; 255
    37e2:	4f e7       	ldi	r20, 0x7F	; 127
    37e4:	57 e4       	ldi	r21, 0x47	; 71
    37e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37ea:	18 16       	cp	r1, r24
    37ec:	4c f5       	brge	.+82     	; 0x3840 <HLCD_vSendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ee:	69 8d       	ldd	r22, Y+25	; 0x19
    37f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	40 e2       	ldi	r20, 0x20	; 32
    37fc:	51 e4       	ldi	r21, 0x41	; 65
    37fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	9c 8b       	std	Y+20, r25	; 0x14
    3814:	8b 8b       	std	Y+19, r24	; 0x13
    3816:	0f c0       	rjmp	.+30     	; 0x3836 <HLCD_vSendCommand+0xdc>
    3818:	88 ec       	ldi	r24, 0xC8	; 200
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	9a 8b       	std	Y+18, r25	; 0x12
    381e:	89 8b       	std	Y+17, r24	; 0x11
    3820:	89 89       	ldd	r24, Y+17	; 0x11
    3822:	9a 89       	ldd	r25, Y+18	; 0x12
    3824:	01 97       	sbiw	r24, 0x01	; 1
    3826:	f1 f7       	brne	.-4      	; 0x3824 <HLCD_vSendCommand+0xca>
    3828:	9a 8b       	std	Y+18, r25	; 0x12
    382a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    382c:	8b 89       	ldd	r24, Y+19	; 0x13
    382e:	9c 89       	ldd	r25, Y+20	; 0x14
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	9c 8b       	std	Y+20, r25	; 0x14
    3834:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3836:	8b 89       	ldd	r24, Y+19	; 0x13
    3838:	9c 89       	ldd	r25, Y+20	; 0x14
    383a:	00 97       	sbiw	r24, 0x00	; 0
    383c:	69 f7       	brne	.-38     	; 0x3818 <HLCD_vSendCommand+0xbe>
    383e:	14 c0       	rjmp	.+40     	; 0x3868 <HLCD_vSendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3840:	6d 89       	ldd	r22, Y+21	; 0x15
    3842:	7e 89       	ldd	r23, Y+22	; 0x16
    3844:	8f 89       	ldd	r24, Y+23	; 0x17
    3846:	98 8d       	ldd	r25, Y+24	; 0x18
    3848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	9c 8b       	std	Y+20, r25	; 0x14
    3852:	8b 8b       	std	Y+19, r24	; 0x13
    3854:	8b 89       	ldd	r24, Y+19	; 0x13
    3856:	9c 89       	ldd	r25, Y+20	; 0x14
    3858:	98 8b       	std	Y+16, r25	; 0x10
    385a:	8f 87       	std	Y+15, r24	; 0x0f
    385c:	8f 85       	ldd	r24, Y+15	; 0x0f
    385e:	98 89       	ldd	r25, Y+16	; 0x10
    3860:	01 97       	sbiw	r24, 0x01	; 1
    3862:	f1 f7       	brne	.-4      	; 0x3860 <HLCD_vSendCommand+0x106>
    3864:	98 8b       	std	Y+16, r25	; 0x10
    3866:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	TWI_u08SendByte(A_u8Command|0b00001000);
    3868:	8d 8d       	ldd	r24, Y+29	; 0x1d
    386a:	88 60       	ori	r24, 0x08	; 8
    386c:	0e 94 b4 06 	call	0xd68	; 0xd68 <TWI_u08SendByte>
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	a0 e8       	ldi	r26, 0x80	; 128
    3876:	bf e3       	ldi	r27, 0x3F	; 63
    3878:	8b 87       	std	Y+11, r24	; 0x0b
    387a:	9c 87       	std	Y+12, r25	; 0x0c
    387c:	ad 87       	std	Y+13, r26	; 0x0d
    387e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3880:	6b 85       	ldd	r22, Y+11	; 0x0b
    3882:	7c 85       	ldd	r23, Y+12	; 0x0c
    3884:	8d 85       	ldd	r24, Y+13	; 0x0d
    3886:	9e 85       	ldd	r25, Y+14	; 0x0e
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	4a ef       	ldi	r20, 0xFA	; 250
    388e:	54 e4       	ldi	r21, 0x44	; 68
    3890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	8f 83       	std	Y+7, r24	; 0x07
    389a:	98 87       	std	Y+8, r25	; 0x08
    389c:	a9 87       	std	Y+9, r26	; 0x09
    389e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38a0:	6f 81       	ldd	r22, Y+7	; 0x07
    38a2:	78 85       	ldd	r23, Y+8	; 0x08
    38a4:	89 85       	ldd	r24, Y+9	; 0x09
    38a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e8       	ldi	r20, 0x80	; 128
    38ae:	5f e3       	ldi	r21, 0x3F	; 63
    38b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38b4:	88 23       	and	r24, r24
    38b6:	2c f4       	brge	.+10     	; 0x38c2 <HLCD_vSendCommand+0x168>
		__ticks = 1;
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	9e 83       	std	Y+6, r25	; 0x06
    38be:	8d 83       	std	Y+5, r24	; 0x05
    38c0:	3f c0       	rjmp	.+126    	; 0x3940 <HLCD_vSendCommand+0x1e6>
	else if (__tmp > 65535)
    38c2:	6f 81       	ldd	r22, Y+7	; 0x07
    38c4:	78 85       	ldd	r23, Y+8	; 0x08
    38c6:	89 85       	ldd	r24, Y+9	; 0x09
    38c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	3f ef       	ldi	r19, 0xFF	; 255
    38ce:	4f e7       	ldi	r20, 0x7F	; 127
    38d0:	57 e4       	ldi	r21, 0x47	; 71
    38d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38d6:	18 16       	cp	r1, r24
    38d8:	4c f5       	brge	.+82     	; 0x392c <HLCD_vSendCommand+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38da:	6b 85       	ldd	r22, Y+11	; 0x0b
    38dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    38de:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	40 e2       	ldi	r20, 0x20	; 32
    38e8:	51 e4       	ldi	r21, 0x41	; 65
    38ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ee:	dc 01       	movw	r26, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	bc 01       	movw	r22, r24
    38f4:	cd 01       	movw	r24, r26
    38f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fa:	dc 01       	movw	r26, r24
    38fc:	cb 01       	movw	r24, r22
    38fe:	9e 83       	std	Y+6, r25	; 0x06
    3900:	8d 83       	std	Y+5, r24	; 0x05
    3902:	0f c0       	rjmp	.+30     	; 0x3922 <HLCD_vSendCommand+0x1c8>
    3904:	88 ec       	ldi	r24, 0xC8	; 200
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	9c 83       	std	Y+4, r25	; 0x04
    390a:	8b 83       	std	Y+3, r24	; 0x03
    390c:	8b 81       	ldd	r24, Y+3	; 0x03
    390e:	9c 81       	ldd	r25, Y+4	; 0x04
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	f1 f7       	brne	.-4      	; 0x3910 <HLCD_vSendCommand+0x1b6>
    3914:	9c 83       	std	Y+4, r25	; 0x04
    3916:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3918:	8d 81       	ldd	r24, Y+5	; 0x05
    391a:	9e 81       	ldd	r25, Y+6	; 0x06
    391c:	01 97       	sbiw	r24, 0x01	; 1
    391e:	9e 83       	std	Y+6, r25	; 0x06
    3920:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3922:	8d 81       	ldd	r24, Y+5	; 0x05
    3924:	9e 81       	ldd	r25, Y+6	; 0x06
    3926:	00 97       	sbiw	r24, 0x00	; 0
    3928:	69 f7       	brne	.-38     	; 0x3904 <HLCD_vSendCommand+0x1aa>
    392a:	14 c0       	rjmp	.+40     	; 0x3954 <HLCD_vSendCommand+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    392c:	6f 81       	ldd	r22, Y+7	; 0x07
    392e:	78 85       	ldd	r23, Y+8	; 0x08
    3930:	89 85       	ldd	r24, Y+9	; 0x09
    3932:	9a 85       	ldd	r25, Y+10	; 0x0a
    3934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3938:	dc 01       	movw	r26, r24
    393a:	cb 01       	movw	r24, r22
    393c:	9e 83       	std	Y+6, r25	; 0x06
    393e:	8d 83       	std	Y+5, r24	; 0x05
    3940:	8d 81       	ldd	r24, Y+5	; 0x05
    3942:	9e 81       	ldd	r25, Y+6	; 0x06
    3944:	9a 83       	std	Y+2, r25	; 0x02
    3946:	89 83       	std	Y+1, r24	; 0x01
    3948:	89 81       	ldd	r24, Y+1	; 0x01
    394a:	9a 81       	ldd	r25, Y+2	; 0x02
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	f1 f7       	brne	.-4      	; 0x394c <HLCD_vSendCommand+0x1f2>
    3950:	9a 83       	std	Y+2, r25	; 0x02
    3952:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	TWI_u08SendStopCondition();
    3954:	0e 94 15 07 	call	0xe2a	; 0xe2a <TWI_u08SendStopCondition>

}
    3958:	6d 96       	adiw	r28, 0x1d	; 29
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	cf 91       	pop	r28
    3966:	df 91       	pop	r29
    3968:	08 95       	ret

0000396a <HLCD_vSendCommandIIC>:
void HLCD_vSendCommandIIC(u08 A_u8Command)
{
    396a:	df 93       	push	r29
    396c:	cf 93       	push	r28
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	ea 97       	sbiw	r28, 0x3a	; 58
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	8a af       	std	Y+58, r24	; 0x3a
	u08 Hcommand=A_u8Command&0b11110000;
    3980:	8a ad       	ldd	r24, Y+58	; 0x3a
    3982:	80 7f       	andi	r24, 0xF0	; 240
    3984:	89 af       	std	Y+57, r24	; 0x39

	TWI_u08SendStartCondition();
    3986:	0e 94 61 06 	call	0xcc2	; 0xcc2 <TWI_u08SendStartCondition>
	TWI_u08SendSlaveAddressRW(0x27,TWI_WRITE);
    398a:	87 e2       	ldi	r24, 0x27	; 39
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	0e 94 89 06 	call	0xd12	; 0xd12 <TWI_u08SendSlaveAddressRW>
	TWI_u08SendByte(Hcommand|0b00001100);
    3992:	89 ad       	ldd	r24, Y+57	; 0x39
    3994:	8c 60       	ori	r24, 0x0C	; 12
    3996:	0e 94 b4 06 	call	0xd68	; 0xd68 <TWI_u08SendByte>
    399a:	80 e0       	ldi	r24, 0x00	; 0
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	a0 e8       	ldi	r26, 0x80	; 128
    39a0:	bf e3       	ldi	r27, 0x3F	; 63
    39a2:	8d ab       	std	Y+53, r24	; 0x35
    39a4:	9e ab       	std	Y+54, r25	; 0x36
    39a6:	af ab       	std	Y+55, r26	; 0x37
    39a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39aa:	6d a9       	ldd	r22, Y+53	; 0x35
    39ac:	7e a9       	ldd	r23, Y+54	; 0x36
    39ae:	8f a9       	ldd	r24, Y+55	; 0x37
    39b0:	98 ad       	ldd	r25, Y+56	; 0x38
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	4a ef       	ldi	r20, 0xFA	; 250
    39b8:	54 e4       	ldi	r21, 0x44	; 68
    39ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	89 ab       	std	Y+49, r24	; 0x31
    39c4:	9a ab       	std	Y+50, r25	; 0x32
    39c6:	ab ab       	std	Y+51, r26	; 0x33
    39c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39ca:	69 a9       	ldd	r22, Y+49	; 0x31
    39cc:	7a a9       	ldd	r23, Y+50	; 0x32
    39ce:	8b a9       	ldd	r24, Y+51	; 0x33
    39d0:	9c a9       	ldd	r25, Y+52	; 0x34
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 e8       	ldi	r20, 0x80	; 128
    39d8:	5f e3       	ldi	r21, 0x3F	; 63
    39da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39de:	88 23       	and	r24, r24
    39e0:	2c f4       	brge	.+10     	; 0x39ec <HLCD_vSendCommandIIC+0x82>
		__ticks = 1;
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	98 ab       	std	Y+48, r25	; 0x30
    39e8:	8f a7       	std	Y+47, r24	; 0x2f
    39ea:	3f c0       	rjmp	.+126    	; 0x3a6a <HLCD_vSendCommandIIC+0x100>
	else if (__tmp > 65535)
    39ec:	69 a9       	ldd	r22, Y+49	; 0x31
    39ee:	7a a9       	ldd	r23, Y+50	; 0x32
    39f0:	8b a9       	ldd	r24, Y+51	; 0x33
    39f2:	9c a9       	ldd	r25, Y+52	; 0x34
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	3f ef       	ldi	r19, 0xFF	; 255
    39f8:	4f e7       	ldi	r20, 0x7F	; 127
    39fa:	57 e4       	ldi	r21, 0x47	; 71
    39fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a00:	18 16       	cp	r1, r24
    3a02:	4c f5       	brge	.+82     	; 0x3a56 <HLCD_vSendCommandIIC+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a04:	6d a9       	ldd	r22, Y+53	; 0x35
    3a06:	7e a9       	ldd	r23, Y+54	; 0x36
    3a08:	8f a9       	ldd	r24, Y+55	; 0x37
    3a0a:	98 ad       	ldd	r25, Y+56	; 0x38
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	40 e2       	ldi	r20, 0x20	; 32
    3a12:	51 e4       	ldi	r21, 0x41	; 65
    3a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	bc 01       	movw	r22, r24
    3a1e:	cd 01       	movw	r24, r26
    3a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	98 ab       	std	Y+48, r25	; 0x30
    3a2a:	8f a7       	std	Y+47, r24	; 0x2f
    3a2c:	0f c0       	rjmp	.+30     	; 0x3a4c <HLCD_vSendCommandIIC+0xe2>
    3a2e:	88 ec       	ldi	r24, 0xC8	; 200
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	9e a7       	std	Y+46, r25	; 0x2e
    3a34:	8d a7       	std	Y+45, r24	; 0x2d
    3a36:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a38:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	f1 f7       	brne	.-4      	; 0x3a3a <HLCD_vSendCommandIIC+0xd0>
    3a3e:	9e a7       	std	Y+46, r25	; 0x2e
    3a40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a42:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a44:	98 a9       	ldd	r25, Y+48	; 0x30
    3a46:	01 97       	sbiw	r24, 0x01	; 1
    3a48:	98 ab       	std	Y+48, r25	; 0x30
    3a4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    3a50:	00 97       	sbiw	r24, 0x00	; 0
    3a52:	69 f7       	brne	.-38     	; 0x3a2e <HLCD_vSendCommandIIC+0xc4>
    3a54:	14 c0       	rjmp	.+40     	; 0x3a7e <HLCD_vSendCommandIIC+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a56:	69 a9       	ldd	r22, Y+49	; 0x31
    3a58:	7a a9       	ldd	r23, Y+50	; 0x32
    3a5a:	8b a9       	ldd	r24, Y+51	; 0x33
    3a5c:	9c a9       	ldd	r25, Y+52	; 0x34
    3a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	98 ab       	std	Y+48, r25	; 0x30
    3a68:	8f a7       	std	Y+47, r24	; 0x2f
    3a6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a6c:	98 a9       	ldd	r25, Y+48	; 0x30
    3a6e:	9c a7       	std	Y+44, r25	; 0x2c
    3a70:	8b a7       	std	Y+43, r24	; 0x2b
    3a72:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a74:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a76:	01 97       	sbiw	r24, 0x01	; 1
    3a78:	f1 f7       	brne	.-4      	; 0x3a76 <HLCD_vSendCommandIIC+0x10c>
    3a7a:	9c a7       	std	Y+44, r25	; 0x2c
    3a7c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	TWI_u08SendByte(Hcommand|0b00001000);
    3a7e:	89 ad       	ldd	r24, Y+57	; 0x39
    3a80:	88 60       	ori	r24, 0x08	; 8
    3a82:	0e 94 b4 06 	call	0xd68	; 0xd68 <TWI_u08SendByte>
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	a0 e8       	ldi	r26, 0x80	; 128
    3a8c:	bf e3       	ldi	r27, 0x3F	; 63
    3a8e:	8f a3       	std	Y+39, r24	; 0x27
    3a90:	98 a7       	std	Y+40, r25	; 0x28
    3a92:	a9 a7       	std	Y+41, r26	; 0x29
    3a94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a96:	6f a1       	ldd	r22, Y+39	; 0x27
    3a98:	78 a5       	ldd	r23, Y+40	; 0x28
    3a9a:	89 a5       	ldd	r24, Y+41	; 0x29
    3a9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a9e:	20 e0       	ldi	r18, 0x00	; 0
    3aa0:	30 e0       	ldi	r19, 0x00	; 0
    3aa2:	4a ef       	ldi	r20, 0xFA	; 250
    3aa4:	54 e4       	ldi	r21, 0x44	; 68
    3aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	8b a3       	std	Y+35, r24	; 0x23
    3ab0:	9c a3       	std	Y+36, r25	; 0x24
    3ab2:	ad a3       	std	Y+37, r26	; 0x25
    3ab4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ab6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ab8:	7c a1       	ldd	r23, Y+36	; 0x24
    3aba:	8d a1       	ldd	r24, Y+37	; 0x25
    3abc:	9e a1       	ldd	r25, Y+38	; 0x26
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	40 e8       	ldi	r20, 0x80	; 128
    3ac4:	5f e3       	ldi	r21, 0x3F	; 63
    3ac6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aca:	88 23       	and	r24, r24
    3acc:	2c f4       	brge	.+10     	; 0x3ad8 <HLCD_vSendCommandIIC+0x16e>
		__ticks = 1;
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	9a a3       	std	Y+34, r25	; 0x22
    3ad4:	89 a3       	std	Y+33, r24	; 0x21
    3ad6:	3f c0       	rjmp	.+126    	; 0x3b56 <HLCD_vSendCommandIIC+0x1ec>
	else if (__tmp > 65535)
    3ad8:	6b a1       	ldd	r22, Y+35	; 0x23
    3ada:	7c a1       	ldd	r23, Y+36	; 0x24
    3adc:	8d a1       	ldd	r24, Y+37	; 0x25
    3ade:	9e a1       	ldd	r25, Y+38	; 0x26
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	3f ef       	ldi	r19, 0xFF	; 255
    3ae4:	4f e7       	ldi	r20, 0x7F	; 127
    3ae6:	57 e4       	ldi	r21, 0x47	; 71
    3ae8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aec:	18 16       	cp	r1, r24
    3aee:	4c f5       	brge	.+82     	; 0x3b42 <HLCD_vSendCommandIIC+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3af0:	6f a1       	ldd	r22, Y+39	; 0x27
    3af2:	78 a5       	ldd	r23, Y+40	; 0x28
    3af4:	89 a5       	ldd	r24, Y+41	; 0x29
    3af6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	40 e2       	ldi	r20, 0x20	; 32
    3afe:	51 e4       	ldi	r21, 0x41	; 65
    3b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	bc 01       	movw	r22, r24
    3b0a:	cd 01       	movw	r24, r26
    3b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	9a a3       	std	Y+34, r25	; 0x22
    3b16:	89 a3       	std	Y+33, r24	; 0x21
    3b18:	0f c0       	rjmp	.+30     	; 0x3b38 <HLCD_vSendCommandIIC+0x1ce>
    3b1a:	88 ec       	ldi	r24, 0xC8	; 200
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	98 a3       	std	Y+32, r25	; 0x20
    3b20:	8f 8f       	std	Y+31, r24	; 0x1f
    3b22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b24:	98 a1       	ldd	r25, Y+32	; 0x20
    3b26:	01 97       	sbiw	r24, 0x01	; 1
    3b28:	f1 f7       	brne	.-4      	; 0x3b26 <HLCD_vSendCommandIIC+0x1bc>
    3b2a:	98 a3       	std	Y+32, r25	; 0x20
    3b2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b2e:	89 a1       	ldd	r24, Y+33	; 0x21
    3b30:	9a a1       	ldd	r25, Y+34	; 0x22
    3b32:	01 97       	sbiw	r24, 0x01	; 1
    3b34:	9a a3       	std	Y+34, r25	; 0x22
    3b36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b38:	89 a1       	ldd	r24, Y+33	; 0x21
    3b3a:	9a a1       	ldd	r25, Y+34	; 0x22
    3b3c:	00 97       	sbiw	r24, 0x00	; 0
    3b3e:	69 f7       	brne	.-38     	; 0x3b1a <HLCD_vSendCommandIIC+0x1b0>
    3b40:	14 c0       	rjmp	.+40     	; 0x3b6a <HLCD_vSendCommandIIC+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b42:	6b a1       	ldd	r22, Y+35	; 0x23
    3b44:	7c a1       	ldd	r23, Y+36	; 0x24
    3b46:	8d a1       	ldd	r24, Y+37	; 0x25
    3b48:	9e a1       	ldd	r25, Y+38	; 0x26
    3b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4e:	dc 01       	movw	r26, r24
    3b50:	cb 01       	movw	r24, r22
    3b52:	9a a3       	std	Y+34, r25	; 0x22
    3b54:	89 a3       	std	Y+33, r24	; 0x21
    3b56:	89 a1       	ldd	r24, Y+33	; 0x21
    3b58:	9a a1       	ldd	r25, Y+34	; 0x22
    3b5a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b5c:	8d 8f       	std	Y+29, r24	; 0x1d
    3b5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	f1 f7       	brne	.-4      	; 0x3b62 <HLCD_vSendCommandIIC+0x1f8>
    3b66:	9e 8f       	std	Y+30, r25	; 0x1e
    3b68:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Hcommand=A_u8Command&0b11110000;
    3b6a:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b6c:	80 7f       	andi	r24, 0xF0	; 240
    3b6e:	89 af       	std	Y+57, r24	; 0x39
	TWI_u08SendByte(Hcommand|0b00001100);
    3b70:	89 ad       	ldd	r24, Y+57	; 0x39
    3b72:	8c 60       	ori	r24, 0x0C	; 12
    3b74:	0e 94 b4 06 	call	0xd68	; 0xd68 <TWI_u08SendByte>
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	a0 e8       	ldi	r26, 0x80	; 128
    3b7e:	bf e3       	ldi	r27, 0x3F	; 63
    3b80:	89 8f       	std	Y+25, r24	; 0x19
    3b82:	9a 8f       	std	Y+26, r25	; 0x1a
    3b84:	ab 8f       	std	Y+27, r26	; 0x1b
    3b86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b88:	69 8d       	ldd	r22, Y+25	; 0x19
    3b8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	4a ef       	ldi	r20, 0xFA	; 250
    3b96:	54 e4       	ldi	r21, 0x44	; 68
    3b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	8d 8b       	std	Y+21, r24	; 0x15
    3ba2:	9e 8b       	std	Y+22, r25	; 0x16
    3ba4:	af 8b       	std	Y+23, r26	; 0x17
    3ba6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    3baa:	7e 89       	ldd	r23, Y+22	; 0x16
    3bac:	8f 89       	ldd	r24, Y+23	; 0x17
    3bae:	98 8d       	ldd	r25, Y+24	; 0x18
    3bb0:	20 e0       	ldi	r18, 0x00	; 0
    3bb2:	30 e0       	ldi	r19, 0x00	; 0
    3bb4:	40 e8       	ldi	r20, 0x80	; 128
    3bb6:	5f e3       	ldi	r21, 0x3F	; 63
    3bb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bbc:	88 23       	and	r24, r24
    3bbe:	2c f4       	brge	.+10     	; 0x3bca <HLCD_vSendCommandIIC+0x260>
		__ticks = 1;
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	9c 8b       	std	Y+20, r25	; 0x14
    3bc6:	8b 8b       	std	Y+19, r24	; 0x13
    3bc8:	3f c0       	rjmp	.+126    	; 0x3c48 <HLCD_vSendCommandIIC+0x2de>
	else if (__tmp > 65535)
    3bca:	6d 89       	ldd	r22, Y+21	; 0x15
    3bcc:	7e 89       	ldd	r23, Y+22	; 0x16
    3bce:	8f 89       	ldd	r24, Y+23	; 0x17
    3bd0:	98 8d       	ldd	r25, Y+24	; 0x18
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	3f ef       	ldi	r19, 0xFF	; 255
    3bd6:	4f e7       	ldi	r20, 0x7F	; 127
    3bd8:	57 e4       	ldi	r21, 0x47	; 71
    3bda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bde:	18 16       	cp	r1, r24
    3be0:	4c f5       	brge	.+82     	; 0x3c34 <HLCD_vSendCommandIIC+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3be2:	69 8d       	ldd	r22, Y+25	; 0x19
    3be4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3be6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3be8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	40 e2       	ldi	r20, 0x20	; 32
    3bf0:	51 e4       	ldi	r21, 0x41	; 65
    3bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	bc 01       	movw	r22, r24
    3bfc:	cd 01       	movw	r24, r26
    3bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	9c 8b       	std	Y+20, r25	; 0x14
    3c08:	8b 8b       	std	Y+19, r24	; 0x13
    3c0a:	0f c0       	rjmp	.+30     	; 0x3c2a <HLCD_vSendCommandIIC+0x2c0>
    3c0c:	88 ec       	ldi	r24, 0xC8	; 200
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	9a 8b       	std	Y+18, r25	; 0x12
    3c12:	89 8b       	std	Y+17, r24	; 0x11
    3c14:	89 89       	ldd	r24, Y+17	; 0x11
    3c16:	9a 89       	ldd	r25, Y+18	; 0x12
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	f1 f7       	brne	.-4      	; 0x3c18 <HLCD_vSendCommandIIC+0x2ae>
    3c1c:	9a 8b       	std	Y+18, r25	; 0x12
    3c1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c20:	8b 89       	ldd	r24, Y+19	; 0x13
    3c22:	9c 89       	ldd	r25, Y+20	; 0x14
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	9c 8b       	std	Y+20, r25	; 0x14
    3c28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c2a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c2c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c2e:	00 97       	sbiw	r24, 0x00	; 0
    3c30:	69 f7       	brne	.-38     	; 0x3c0c <HLCD_vSendCommandIIC+0x2a2>
    3c32:	14 c0       	rjmp	.+40     	; 0x3c5c <HLCD_vSendCommandIIC+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c34:	6d 89       	ldd	r22, Y+21	; 0x15
    3c36:	7e 89       	ldd	r23, Y+22	; 0x16
    3c38:	8f 89       	ldd	r24, Y+23	; 0x17
    3c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c40:	dc 01       	movw	r26, r24
    3c42:	cb 01       	movw	r24, r22
    3c44:	9c 8b       	std	Y+20, r25	; 0x14
    3c46:	8b 8b       	std	Y+19, r24	; 0x13
    3c48:	8b 89       	ldd	r24, Y+19	; 0x13
    3c4a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c4c:	98 8b       	std	Y+16, r25	; 0x10
    3c4e:	8f 87       	std	Y+15, r24	; 0x0f
    3c50:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c52:	98 89       	ldd	r25, Y+16	; 0x10
    3c54:	01 97       	sbiw	r24, 0x01	; 1
    3c56:	f1 f7       	brne	.-4      	; 0x3c54 <HLCD_vSendCommandIIC+0x2ea>
    3c58:	98 8b       	std	Y+16, r25	; 0x10
    3c5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	TWI_u08SendByte(Hcommand|0b00001000);
    3c5c:	89 ad       	ldd	r24, Y+57	; 0x39
    3c5e:	88 60       	ori	r24, 0x08	; 8
    3c60:	0e 94 b4 06 	call	0xd68	; 0xd68 <TWI_u08SendByte>
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	a0 e8       	ldi	r26, 0x80	; 128
    3c6a:	bf e3       	ldi	r27, 0x3F	; 63
    3c6c:	8b 87       	std	Y+11, r24	; 0x0b
    3c6e:	9c 87       	std	Y+12, r25	; 0x0c
    3c70:	ad 87       	std	Y+13, r26	; 0x0d
    3c72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c74:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c76:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	4a ef       	ldi	r20, 0xFA	; 250
    3c82:	54 e4       	ldi	r21, 0x44	; 68
    3c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c88:	dc 01       	movw	r26, r24
    3c8a:	cb 01       	movw	r24, r22
    3c8c:	8f 83       	std	Y+7, r24	; 0x07
    3c8e:	98 87       	std	Y+8, r25	; 0x08
    3c90:	a9 87       	std	Y+9, r26	; 0x09
    3c92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c94:	6f 81       	ldd	r22, Y+7	; 0x07
    3c96:	78 85       	ldd	r23, Y+8	; 0x08
    3c98:	89 85       	ldd	r24, Y+9	; 0x09
    3c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9c:	20 e0       	ldi	r18, 0x00	; 0
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	40 e8       	ldi	r20, 0x80	; 128
    3ca2:	5f e3       	ldi	r21, 0x3F	; 63
    3ca4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ca8:	88 23       	and	r24, r24
    3caa:	2c f4       	brge	.+10     	; 0x3cb6 <HLCD_vSendCommandIIC+0x34c>
		__ticks = 1;
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	9e 83       	std	Y+6, r25	; 0x06
    3cb2:	8d 83       	std	Y+5, r24	; 0x05
    3cb4:	3f c0       	rjmp	.+126    	; 0x3d34 <HLCD_vSendCommandIIC+0x3ca>
	else if (__tmp > 65535)
    3cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb8:	78 85       	ldd	r23, Y+8	; 0x08
    3cba:	89 85       	ldd	r24, Y+9	; 0x09
    3cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cbe:	20 e0       	ldi	r18, 0x00	; 0
    3cc0:	3f ef       	ldi	r19, 0xFF	; 255
    3cc2:	4f e7       	ldi	r20, 0x7F	; 127
    3cc4:	57 e4       	ldi	r21, 0x47	; 71
    3cc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cca:	18 16       	cp	r1, r24
    3ccc:	4c f5       	brge	.+82     	; 0x3d20 <HLCD_vSendCommandIIC+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cce:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	30 e0       	ldi	r19, 0x00	; 0
    3cda:	40 e2       	ldi	r20, 0x20	; 32
    3cdc:	51 e4       	ldi	r21, 0x41	; 65
    3cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	cb 01       	movw	r24, r22
    3ce6:	bc 01       	movw	r22, r24
    3ce8:	cd 01       	movw	r24, r26
    3cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	9e 83       	std	Y+6, r25	; 0x06
    3cf4:	8d 83       	std	Y+5, r24	; 0x05
    3cf6:	0f c0       	rjmp	.+30     	; 0x3d16 <HLCD_vSendCommandIIC+0x3ac>
    3cf8:	88 ec       	ldi	r24, 0xC8	; 200
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	9c 83       	std	Y+4, r25	; 0x04
    3cfe:	8b 83       	std	Y+3, r24	; 0x03
    3d00:	8b 81       	ldd	r24, Y+3	; 0x03
    3d02:	9c 81       	ldd	r25, Y+4	; 0x04
    3d04:	01 97       	sbiw	r24, 0x01	; 1
    3d06:	f1 f7       	brne	.-4      	; 0x3d04 <HLCD_vSendCommandIIC+0x39a>
    3d08:	9c 83       	std	Y+4, r25	; 0x04
    3d0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	9e 83       	std	Y+6, r25	; 0x06
    3d14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d16:	8d 81       	ldd	r24, Y+5	; 0x05
    3d18:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1a:	00 97       	sbiw	r24, 0x00	; 0
    3d1c:	69 f7       	brne	.-38     	; 0x3cf8 <HLCD_vSendCommandIIC+0x38e>
    3d1e:	14 c0       	rjmp	.+40     	; 0x3d48 <HLCD_vSendCommandIIC+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d20:	6f 81       	ldd	r22, Y+7	; 0x07
    3d22:	78 85       	ldd	r23, Y+8	; 0x08
    3d24:	89 85       	ldd	r24, Y+9	; 0x09
    3d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	9e 83       	std	Y+6, r25	; 0x06
    3d32:	8d 83       	std	Y+5, r24	; 0x05
    3d34:	8d 81       	ldd	r24, Y+5	; 0x05
    3d36:	9e 81       	ldd	r25, Y+6	; 0x06
    3d38:	9a 83       	std	Y+2, r25	; 0x02
    3d3a:	89 83       	std	Y+1, r24	; 0x01
    3d3c:	89 81       	ldd	r24, Y+1	; 0x01
    3d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d40:	01 97       	sbiw	r24, 0x01	; 1
    3d42:	f1 f7       	brne	.-4      	; 0x3d40 <HLCD_vSendCommandIIC+0x3d6>
    3d44:	9a 83       	std	Y+2, r25	; 0x02
    3d46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	TWI_u08SendStopCondition();
    3d48:	0e 94 15 07 	call	0xe2a	; 0xe2a <TWI_u08SendStopCondition>

}
    3d4c:	ea 96       	adiw	r28, 0x3a	; 58
    3d4e:	0f b6       	in	r0, 0x3f	; 63
    3d50:	f8 94       	cli
    3d52:	de bf       	out	0x3e, r29	; 62
    3d54:	0f be       	out	0x3f, r0	; 63
    3d56:	cd bf       	out	0x3d, r28	; 61
    3d58:	cf 91       	pop	r28
    3d5a:	df 91       	pop	r29
    3d5c:	08 95       	ret

00003d5e <HLCD_vSendChar>:
void HLCD_vSendChar(u08 A_u8Char)
{
    3d5e:	df 93       	push	r29
    3d60:	cf 93       	push	r28
    3d62:	00 d0       	rcall	.+0      	; 0x3d64 <HLCD_vSendChar+0x6>
    3d64:	0f 92       	push	r0
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
    3d6a:	8b 83       	std	Y+3, r24	; 0x03
	u08 highnib=A_u8Char&0xf0;
    3d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6e:	80 7f       	andi	r24, 0xF0	; 240
    3d70:	8a 83       	std	Y+2, r24	; 0x02
	u08 lownib=(A_u8Char<<4)&0xf0;
    3d72:	8b 81       	ldd	r24, Y+3	; 0x03
    3d74:	88 2f       	mov	r24, r24
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	82 95       	swap	r24
    3d7a:	92 95       	swap	r25
    3d7c:	90 7f       	andi	r25, 0xF0	; 240
    3d7e:	98 27       	eor	r25, r24
    3d80:	80 7f       	andi	r24, 0xF0	; 240
    3d82:	98 27       	eor	r25, r24
    3d84:	89 83       	std	Y+1, r24	; 0x01
    write4bits((highnib)|1);
    3d86:	8a 81       	ldd	r24, Y+2	; 0x02
    3d88:	81 60       	ori	r24, 0x01	; 1
    3d8a:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <write4bits>
	write4bits((lownib)|1);
    3d8e:	89 81       	ldd	r24, Y+1	; 0x01
    3d90:	81 60       	ori	r24, 0x01	; 1
    3d92:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <write4bits>


}
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <HLCD_vInit>:
void HLCD_vInit(void)
{
    3da2:	0f 93       	push	r16
    3da4:	1f 93       	push	r17
    3da6:	df 93       	push	r29
    3da8:	cf 93       	push	r28
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
    3dae:	c3 58       	subi	r28, 0x83	; 131
    3db0:	d0 40       	sbci	r29, 0x00	; 0
    3db2:	0f b6       	in	r0, 0x3f	; 63
    3db4:	f8 94       	cli
    3db6:	de bf       	out	0x3e, r29	; 62
    3db8:	0f be       	out	0x3f, r0	; 63
    3dba:	cd bf       	out	0x3d, r28	; 61
	TWI_vInit();
    3dbc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TWI_vInit>
	u08 displayfunction = LCD_2LINE;
    3dc0:	fe 01       	movw	r30, r28
    3dc2:	ed 57       	subi	r30, 0x7D	; 125
    3dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc6:	88 e0       	ldi	r24, 0x08	; 8
    3dc8:	80 83       	st	Z, r24
	 MDIO_vSetPinDir(DIO_PORTC,LCD_SCL,DIO_Output);
    3dca:	82 e0       	ldi	r24, 0x02	; 2
    3dcc:	60 e0       	ldi	r22, 0x00	; 0
    3dce:	41 e0       	ldi	r20, 0x01	; 1
    3dd0:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	 MDIO_vSetPinDir(DIO_PORTC,LCD_SDA,DIO_Output);
    3dd4:	82 e0       	ldi	r24, 0x02	; 2
    3dd6:	61 e0       	ldi	r22, 0x01	; 1
    3dd8:	41 e0       	ldi	r20, 0x01	; 1
    3dda:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
    3dde:	fe 01       	movw	r30, r28
    3de0:	e3 58       	subi	r30, 0x83	; 131
    3de2:	ff 4f       	sbci	r31, 0xFF	; 255
    3de4:	80 e0       	ldi	r24, 0x00	; 0
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	a8 e4       	ldi	r26, 0x48	; 72
    3dea:	b2 e4       	ldi	r27, 0x42	; 66
    3dec:	80 83       	st	Z, r24
    3dee:	91 83       	std	Z+1, r25	; 0x01
    3df0:	a2 83       	std	Z+2, r26	; 0x02
    3df2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3df4:	8e 01       	movw	r16, r28
    3df6:	07 58       	subi	r16, 0x87	; 135
    3df8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	e3 58       	subi	r30, 0x83	; 131
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	60 81       	ld	r22, Z
    3e02:	71 81       	ldd	r23, Z+1	; 0x01
    3e04:	82 81       	ldd	r24, Z+2	; 0x02
    3e06:	93 81       	ldd	r25, Z+3	; 0x03
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	4a ef       	ldi	r20, 0xFA	; 250
    3e0e:	54 e4       	ldi	r21, 0x44	; 68
    3e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	f8 01       	movw	r30, r16
    3e1a:	80 83       	st	Z, r24
    3e1c:	91 83       	std	Z+1, r25	; 0x01
    3e1e:	a2 83       	std	Z+2, r26	; 0x02
    3e20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e22:	fe 01       	movw	r30, r28
    3e24:	e7 58       	subi	r30, 0x87	; 135
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	60 81       	ld	r22, Z
    3e2a:	71 81       	ldd	r23, Z+1	; 0x01
    3e2c:	82 81       	ldd	r24, Z+2	; 0x02
    3e2e:	93 81       	ldd	r25, Z+3	; 0x03
    3e30:	20 e0       	ldi	r18, 0x00	; 0
    3e32:	30 e0       	ldi	r19, 0x00	; 0
    3e34:	40 e8       	ldi	r20, 0x80	; 128
    3e36:	5f e3       	ldi	r21, 0x3F	; 63
    3e38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e3c:	88 23       	and	r24, r24
    3e3e:	44 f4       	brge	.+16     	; 0x3e50 <HLCD_vInit+0xae>
		__ticks = 1;
    3e40:	fe 01       	movw	r30, r28
    3e42:	e9 58       	subi	r30, 0x89	; 137
    3e44:	ff 4f       	sbci	r31, 0xFF	; 255
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	91 83       	std	Z+1, r25	; 0x01
    3e4c:	80 83       	st	Z, r24
    3e4e:	64 c0       	rjmp	.+200    	; 0x3f18 <HLCD_vInit+0x176>
	else if (__tmp > 65535)
    3e50:	fe 01       	movw	r30, r28
    3e52:	e7 58       	subi	r30, 0x87	; 135
    3e54:	ff 4f       	sbci	r31, 0xFF	; 255
    3e56:	60 81       	ld	r22, Z
    3e58:	71 81       	ldd	r23, Z+1	; 0x01
    3e5a:	82 81       	ldd	r24, Z+2	; 0x02
    3e5c:	93 81       	ldd	r25, Z+3	; 0x03
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	3f ef       	ldi	r19, 0xFF	; 255
    3e62:	4f e7       	ldi	r20, 0x7F	; 127
    3e64:	57 e4       	ldi	r21, 0x47	; 71
    3e66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e6a:	18 16       	cp	r1, r24
    3e6c:	0c f0       	brlt	.+2      	; 0x3e70 <HLCD_vInit+0xce>
    3e6e:	43 c0       	rjmp	.+134    	; 0x3ef6 <HLCD_vInit+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e70:	fe 01       	movw	r30, r28
    3e72:	e3 58       	subi	r30, 0x83	; 131
    3e74:	ff 4f       	sbci	r31, 0xFF	; 255
    3e76:	60 81       	ld	r22, Z
    3e78:	71 81       	ldd	r23, Z+1	; 0x01
    3e7a:	82 81       	ldd	r24, Z+2	; 0x02
    3e7c:	93 81       	ldd	r25, Z+3	; 0x03
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	40 e2       	ldi	r20, 0x20	; 32
    3e84:	51 e4       	ldi	r21, 0x41	; 65
    3e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	8e 01       	movw	r16, r28
    3e90:	09 58       	subi	r16, 0x89	; 137
    3e92:	1f 4f       	sbci	r17, 0xFF	; 255
    3e94:	bc 01       	movw	r22, r24
    3e96:	cd 01       	movw	r24, r26
    3e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	f8 01       	movw	r30, r16
    3ea2:	91 83       	std	Z+1, r25	; 0x01
    3ea4:	80 83       	st	Z, r24
    3ea6:	1f c0       	rjmp	.+62     	; 0x3ee6 <HLCD_vInit+0x144>
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	eb 58       	subi	r30, 0x8B	; 139
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	88 ec       	ldi	r24, 0xC8	; 200
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	91 83       	std	Z+1, r25	; 0x01
    3eb4:	80 83       	st	Z, r24
    3eb6:	fe 01       	movw	r30, r28
    3eb8:	eb 58       	subi	r30, 0x8B	; 139
    3eba:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebc:	80 81       	ld	r24, Z
    3ebe:	91 81       	ldd	r25, Z+1	; 0x01
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	f1 f7       	brne	.-4      	; 0x3ec0 <HLCD_vInit+0x11e>
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	eb 58       	subi	r30, 0x8B	; 139
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	91 83       	std	Z+1, r25	; 0x01
    3ecc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ece:	de 01       	movw	r26, r28
    3ed0:	a9 58       	subi	r26, 0x89	; 137
    3ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e9 58       	subi	r30, 0x89	; 137
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	80 81       	ld	r24, Z
    3edc:	91 81       	ldd	r25, Z+1	; 0x01
    3ede:	01 97       	sbiw	r24, 0x01	; 1
    3ee0:	11 96       	adiw	r26, 0x01	; 1
    3ee2:	9c 93       	st	X, r25
    3ee4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ee6:	fe 01       	movw	r30, r28
    3ee8:	e9 58       	subi	r30, 0x89	; 137
    3eea:	ff 4f       	sbci	r31, 0xFF	; 255
    3eec:	80 81       	ld	r24, Z
    3eee:	91 81       	ldd	r25, Z+1	; 0x01
    3ef0:	00 97       	sbiw	r24, 0x00	; 0
    3ef2:	d1 f6       	brne	.-76     	; 0x3ea8 <HLCD_vInit+0x106>
    3ef4:	27 c0       	rjmp	.+78     	; 0x3f44 <HLCD_vInit+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ef6:	8e 01       	movw	r16, r28
    3ef8:	09 58       	subi	r16, 0x89	; 137
    3efa:	1f 4f       	sbci	r17, 0xFF	; 255
    3efc:	fe 01       	movw	r30, r28
    3efe:	e7 58       	subi	r30, 0x87	; 135
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	60 81       	ld	r22, Z
    3f04:	71 81       	ldd	r23, Z+1	; 0x01
    3f06:	82 81       	ldd	r24, Z+2	; 0x02
    3f08:	93 81       	ldd	r25, Z+3	; 0x03
    3f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	f8 01       	movw	r30, r16
    3f14:	91 83       	std	Z+1, r25	; 0x01
    3f16:	80 83       	st	Z, r24
    3f18:	de 01       	movw	r26, r28
    3f1a:	ad 58       	subi	r26, 0x8D	; 141
    3f1c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f1e:	fe 01       	movw	r30, r28
    3f20:	e9 58       	subi	r30, 0x89	; 137
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	80 81       	ld	r24, Z
    3f26:	91 81       	ldd	r25, Z+1	; 0x01
    3f28:	8d 93       	st	X+, r24
    3f2a:	9c 93       	st	X, r25
    3f2c:	fe 01       	movw	r30, r28
    3f2e:	ed 58       	subi	r30, 0x8D	; 141
    3f30:	ff 4f       	sbci	r31, 0xFF	; 255
    3f32:	80 81       	ld	r24, Z
    3f34:	91 81       	ldd	r25, Z+1	; 0x01
    3f36:	01 97       	sbiw	r24, 0x01	; 1
    3f38:	f1 f7       	brne	.-4      	; 0x3f36 <HLCD_vInit+0x194>
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	ed 58       	subi	r30, 0x8D	; 141
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	91 83       	std	Z+1, r25	; 0x01
    3f42:	80 83       	st	Z, r24

	_delay_ms(50);

	expanderWrite(0x08);
    3f44:	88 e0       	ldi	r24, 0x08	; 8
    3f46:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <expanderWrite>
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	e1 59       	subi	r30, 0x91	; 145
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	80 e0       	ldi	r24, 0x00	; 0
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	aa e7       	ldi	r26, 0x7A	; 122
    3f56:	b4 e4       	ldi	r27, 0x44	; 68
    3f58:	80 83       	st	Z, r24
    3f5a:	91 83       	std	Z+1, r25	; 0x01
    3f5c:	a2 83       	std	Z+2, r26	; 0x02
    3f5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f60:	8e 01       	movw	r16, r28
    3f62:	05 59       	subi	r16, 0x95	; 149
    3f64:	1f 4f       	sbci	r17, 0xFF	; 255
    3f66:	fe 01       	movw	r30, r28
    3f68:	e1 59       	subi	r30, 0x91	; 145
    3f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6c:	60 81       	ld	r22, Z
    3f6e:	71 81       	ldd	r23, Z+1	; 0x01
    3f70:	82 81       	ldd	r24, Z+2	; 0x02
    3f72:	93 81       	ldd	r25, Z+3	; 0x03
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	4a ef       	ldi	r20, 0xFA	; 250
    3f7a:	54 e4       	ldi	r21, 0x44	; 68
    3f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	f8 01       	movw	r30, r16
    3f86:	80 83       	st	Z, r24
    3f88:	91 83       	std	Z+1, r25	; 0x01
    3f8a:	a2 83       	std	Z+2, r26	; 0x02
    3f8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f8e:	fe 01       	movw	r30, r28
    3f90:	e5 59       	subi	r30, 0x95	; 149
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	60 81       	ld	r22, Z
    3f96:	71 81       	ldd	r23, Z+1	; 0x01
    3f98:	82 81       	ldd	r24, Z+2	; 0x02
    3f9a:	93 81       	ldd	r25, Z+3	; 0x03
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	40 e8       	ldi	r20, 0x80	; 128
    3fa2:	5f e3       	ldi	r21, 0x3F	; 63
    3fa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fa8:	88 23       	and	r24, r24
    3faa:	44 f4       	brge	.+16     	; 0x3fbc <HLCD_vInit+0x21a>
		__ticks = 1;
    3fac:	fe 01       	movw	r30, r28
    3fae:	e7 59       	subi	r30, 0x97	; 151
    3fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	91 83       	std	Z+1, r25	; 0x01
    3fb8:	80 83       	st	Z, r24
    3fba:	64 c0       	rjmp	.+200    	; 0x4084 <HLCD_vInit+0x2e2>
	else if (__tmp > 65535)
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	e5 59       	subi	r30, 0x95	; 149
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	60 81       	ld	r22, Z
    3fc4:	71 81       	ldd	r23, Z+1	; 0x01
    3fc6:	82 81       	ldd	r24, Z+2	; 0x02
    3fc8:	93 81       	ldd	r25, Z+3	; 0x03
    3fca:	20 e0       	ldi	r18, 0x00	; 0
    3fcc:	3f ef       	ldi	r19, 0xFF	; 255
    3fce:	4f e7       	ldi	r20, 0x7F	; 127
    3fd0:	57 e4       	ldi	r21, 0x47	; 71
    3fd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fd6:	18 16       	cp	r1, r24
    3fd8:	0c f0       	brlt	.+2      	; 0x3fdc <HLCD_vInit+0x23a>
    3fda:	43 c0       	rjmp	.+134    	; 0x4062 <HLCD_vInit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fdc:	fe 01       	movw	r30, r28
    3fde:	e1 59       	subi	r30, 0x91	; 145
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	60 81       	ld	r22, Z
    3fe4:	71 81       	ldd	r23, Z+1	; 0x01
    3fe6:	82 81       	ldd	r24, Z+2	; 0x02
    3fe8:	93 81       	ldd	r25, Z+3	; 0x03
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	40 e2       	ldi	r20, 0x20	; 32
    3ff0:	51 e4       	ldi	r21, 0x41	; 65
    3ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff6:	dc 01       	movw	r26, r24
    3ff8:	cb 01       	movw	r24, r22
    3ffa:	8e 01       	movw	r16, r28
    3ffc:	07 59       	subi	r16, 0x97	; 151
    3ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    4000:	bc 01       	movw	r22, r24
    4002:	cd 01       	movw	r24, r26
    4004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	f8 01       	movw	r30, r16
    400e:	91 83       	std	Z+1, r25	; 0x01
    4010:	80 83       	st	Z, r24
    4012:	1f c0       	rjmp	.+62     	; 0x4052 <HLCD_vInit+0x2b0>
    4014:	fe 01       	movw	r30, r28
    4016:	e9 59       	subi	r30, 0x99	; 153
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	88 ec       	ldi	r24, 0xC8	; 200
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	91 83       	std	Z+1, r25	; 0x01
    4020:	80 83       	st	Z, r24
    4022:	fe 01       	movw	r30, r28
    4024:	e9 59       	subi	r30, 0x99	; 153
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	80 81       	ld	r24, Z
    402a:	91 81       	ldd	r25, Z+1	; 0x01
    402c:	01 97       	sbiw	r24, 0x01	; 1
    402e:	f1 f7       	brne	.-4      	; 0x402c <HLCD_vInit+0x28a>
    4030:	fe 01       	movw	r30, r28
    4032:	e9 59       	subi	r30, 0x99	; 153
    4034:	ff 4f       	sbci	r31, 0xFF	; 255
    4036:	91 83       	std	Z+1, r25	; 0x01
    4038:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    403a:	de 01       	movw	r26, r28
    403c:	a7 59       	subi	r26, 0x97	; 151
    403e:	bf 4f       	sbci	r27, 0xFF	; 255
    4040:	fe 01       	movw	r30, r28
    4042:	e7 59       	subi	r30, 0x97	; 151
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	80 81       	ld	r24, Z
    4048:	91 81       	ldd	r25, Z+1	; 0x01
    404a:	01 97       	sbiw	r24, 0x01	; 1
    404c:	11 96       	adiw	r26, 0x01	; 1
    404e:	9c 93       	st	X, r25
    4050:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4052:	fe 01       	movw	r30, r28
    4054:	e7 59       	subi	r30, 0x97	; 151
    4056:	ff 4f       	sbci	r31, 0xFF	; 255
    4058:	80 81       	ld	r24, Z
    405a:	91 81       	ldd	r25, Z+1	; 0x01
    405c:	00 97       	sbiw	r24, 0x00	; 0
    405e:	d1 f6       	brne	.-76     	; 0x4014 <HLCD_vInit+0x272>
    4060:	27 c0       	rjmp	.+78     	; 0x40b0 <HLCD_vInit+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4062:	8e 01       	movw	r16, r28
    4064:	07 59       	subi	r16, 0x97	; 151
    4066:	1f 4f       	sbci	r17, 0xFF	; 255
    4068:	fe 01       	movw	r30, r28
    406a:	e5 59       	subi	r30, 0x95	; 149
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	60 81       	ld	r22, Z
    4070:	71 81       	ldd	r23, Z+1	; 0x01
    4072:	82 81       	ldd	r24, Z+2	; 0x02
    4074:	93 81       	ldd	r25, Z+3	; 0x03
    4076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407a:	dc 01       	movw	r26, r24
    407c:	cb 01       	movw	r24, r22
    407e:	f8 01       	movw	r30, r16
    4080:	91 83       	std	Z+1, r25	; 0x01
    4082:	80 83       	st	Z, r24
    4084:	de 01       	movw	r26, r28
    4086:	ab 59       	subi	r26, 0x9B	; 155
    4088:	bf 4f       	sbci	r27, 0xFF	; 255
    408a:	fe 01       	movw	r30, r28
    408c:	e7 59       	subi	r30, 0x97	; 151
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	80 81       	ld	r24, Z
    4092:	91 81       	ldd	r25, Z+1	; 0x01
    4094:	8d 93       	st	X+, r24
    4096:	9c 93       	st	X, r25
    4098:	fe 01       	movw	r30, r28
    409a:	eb 59       	subi	r30, 0x9B	; 155
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	80 81       	ld	r24, Z
    40a0:	91 81       	ldd	r25, Z+1	; 0x01
    40a2:	01 97       	sbiw	r24, 0x01	; 1
    40a4:	f1 f7       	brne	.-4      	; 0x40a2 <HLCD_vInit+0x300>
    40a6:	fe 01       	movw	r30, r28
    40a8:	eb 59       	subi	r30, 0x9B	; 155
    40aa:	ff 4f       	sbci	r31, 0xFF	; 255
    40ac:	91 83       	std	Z+1, r25	; 0x01
    40ae:	80 83       	st	Z, r24

	_delay_ms(1000);

	write4bits(0x03 << 4);
    40b0:	80 e3       	ldi	r24, 0x30	; 48
    40b2:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <write4bits>
    40b6:	fe 01       	movw	r30, r28
    40b8:	ef 59       	subi	r30, 0x9F	; 159
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	90 ea       	ldi	r25, 0xA0	; 160
    40c0:	ac e8       	ldi	r26, 0x8C	; 140
    40c2:	b5 e4       	ldi	r27, 0x45	; 69
    40c4:	80 83       	st	Z, r24
    40c6:	91 83       	std	Z+1, r25	; 0x01
    40c8:	a2 83       	std	Z+2, r26	; 0x02
    40ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    40cc:	8e 01       	movw	r16, r28
    40ce:	03 5a       	subi	r16, 0xA3	; 163
    40d0:	1f 4f       	sbci	r17, 0xFF	; 255
    40d2:	fe 01       	movw	r30, r28
    40d4:	ef 59       	subi	r30, 0x9F	; 159
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	60 81       	ld	r22, Z
    40da:	71 81       	ldd	r23, Z+1	; 0x01
    40dc:	82 81       	ldd	r24, Z+2	; 0x02
    40de:	93 81       	ldd	r25, Z+3	; 0x03
    40e0:	2b ea       	ldi	r18, 0xAB	; 171
    40e2:	3a ea       	ldi	r19, 0xAA	; 170
    40e4:	4a e2       	ldi	r20, 0x2A	; 42
    40e6:	50 e4       	ldi	r21, 0x40	; 64
    40e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	f8 01       	movw	r30, r16
    40f2:	80 83       	st	Z, r24
    40f4:	91 83       	std	Z+1, r25	; 0x01
    40f6:	a2 83       	std	Z+2, r26	; 0x02
    40f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40fa:	fe 01       	movw	r30, r28
    40fc:	e3 5a       	subi	r30, 0xA3	; 163
    40fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4100:	60 81       	ld	r22, Z
    4102:	71 81       	ldd	r23, Z+1	; 0x01
    4104:	82 81       	ldd	r24, Z+2	; 0x02
    4106:	93 81       	ldd	r25, Z+3	; 0x03
    4108:	20 e0       	ldi	r18, 0x00	; 0
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	40 e8       	ldi	r20, 0x80	; 128
    410e:	5f e3       	ldi	r21, 0x3F	; 63
    4110:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4114:	88 23       	and	r24, r24
    4116:	34 f4       	brge	.+12     	; 0x4124 <HLCD_vInit+0x382>
		__ticks = 1;
    4118:	fe 01       	movw	r30, r28
    411a:	e4 5a       	subi	r30, 0xA4	; 164
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	80 83       	st	Z, r24
    4122:	e0 c0       	rjmp	.+448    	; 0x42e4 <HLCD_vInit+0x542>
	else if (__tmp > 255)
    4124:	fe 01       	movw	r30, r28
    4126:	e3 5a       	subi	r30, 0xA3	; 163
    4128:	ff 4f       	sbci	r31, 0xFF	; 255
    412a:	60 81       	ld	r22, Z
    412c:	71 81       	ldd	r23, Z+1	; 0x01
    412e:	82 81       	ldd	r24, Z+2	; 0x02
    4130:	93 81       	ldd	r25, Z+3	; 0x03
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	4f e7       	ldi	r20, 0x7F	; 127
    4138:	53 e4       	ldi	r21, 0x43	; 67
    413a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    413e:	18 16       	cp	r1, r24
    4140:	0c f0       	brlt	.+2      	; 0x4144 <HLCD_vInit+0x3a2>
    4142:	c0 c0       	rjmp	.+384    	; 0x42c4 <HLCD_vInit+0x522>
	{
		_delay_ms(__us / 1000.0);
    4144:	fe 01       	movw	r30, r28
    4146:	ef 59       	subi	r30, 0x9F	; 159
    4148:	ff 4f       	sbci	r31, 0xFF	; 255
    414a:	60 81       	ld	r22, Z
    414c:	71 81       	ldd	r23, Z+1	; 0x01
    414e:	82 81       	ldd	r24, Z+2	; 0x02
    4150:	93 81       	ldd	r25, Z+3	; 0x03
    4152:	20 e0       	ldi	r18, 0x00	; 0
    4154:	30 e0       	ldi	r19, 0x00	; 0
    4156:	4a e7       	ldi	r20, 0x7A	; 122
    4158:	54 e4       	ldi	r21, 0x44	; 68
    415a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    415e:	dc 01       	movw	r26, r24
    4160:	cb 01       	movw	r24, r22
    4162:	fe 01       	movw	r30, r28
    4164:	e8 5a       	subi	r30, 0xA8	; 168
    4166:	ff 4f       	sbci	r31, 0xFF	; 255
    4168:	80 83       	st	Z, r24
    416a:	91 83       	std	Z+1, r25	; 0x01
    416c:	a2 83       	std	Z+2, r26	; 0x02
    416e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4170:	8e 01       	movw	r16, r28
    4172:	0c 5a       	subi	r16, 0xAC	; 172
    4174:	1f 4f       	sbci	r17, 0xFF	; 255
    4176:	fe 01       	movw	r30, r28
    4178:	e8 5a       	subi	r30, 0xA8	; 168
    417a:	ff 4f       	sbci	r31, 0xFF	; 255
    417c:	60 81       	ld	r22, Z
    417e:	71 81       	ldd	r23, Z+1	; 0x01
    4180:	82 81       	ldd	r24, Z+2	; 0x02
    4182:	93 81       	ldd	r25, Z+3	; 0x03
    4184:	20 e0       	ldi	r18, 0x00	; 0
    4186:	30 e0       	ldi	r19, 0x00	; 0
    4188:	4a ef       	ldi	r20, 0xFA	; 250
    418a:	54 e4       	ldi	r21, 0x44	; 68
    418c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	f8 01       	movw	r30, r16
    4196:	80 83       	st	Z, r24
    4198:	91 83       	std	Z+1, r25	; 0x01
    419a:	a2 83       	std	Z+2, r26	; 0x02
    419c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    419e:	fe 01       	movw	r30, r28
    41a0:	ec 5a       	subi	r30, 0xAC	; 172
    41a2:	ff 4f       	sbci	r31, 0xFF	; 255
    41a4:	60 81       	ld	r22, Z
    41a6:	71 81       	ldd	r23, Z+1	; 0x01
    41a8:	82 81       	ldd	r24, Z+2	; 0x02
    41aa:	93 81       	ldd	r25, Z+3	; 0x03
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	40 e8       	ldi	r20, 0x80	; 128
    41b2:	5f e3       	ldi	r21, 0x3F	; 63
    41b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41b8:	88 23       	and	r24, r24
    41ba:	44 f4       	brge	.+16     	; 0x41cc <HLCD_vInit+0x42a>
		__ticks = 1;
    41bc:	fe 01       	movw	r30, r28
    41be:	ee 5a       	subi	r30, 0xAE	; 174
    41c0:	ff 4f       	sbci	r31, 0xFF	; 255
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	91 83       	std	Z+1, r25	; 0x01
    41c8:	80 83       	st	Z, r24
    41ca:	64 c0       	rjmp	.+200    	; 0x4294 <HLCD_vInit+0x4f2>
	else if (__tmp > 65535)
    41cc:	fe 01       	movw	r30, r28
    41ce:	ec 5a       	subi	r30, 0xAC	; 172
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	60 81       	ld	r22, Z
    41d4:	71 81       	ldd	r23, Z+1	; 0x01
    41d6:	82 81       	ldd	r24, Z+2	; 0x02
    41d8:	93 81       	ldd	r25, Z+3	; 0x03
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	3f ef       	ldi	r19, 0xFF	; 255
    41de:	4f e7       	ldi	r20, 0x7F	; 127
    41e0:	57 e4       	ldi	r21, 0x47	; 71
    41e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41e6:	18 16       	cp	r1, r24
    41e8:	0c f0       	brlt	.+2      	; 0x41ec <HLCD_vInit+0x44a>
    41ea:	43 c0       	rjmp	.+134    	; 0x4272 <HLCD_vInit+0x4d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ec:	fe 01       	movw	r30, r28
    41ee:	e8 5a       	subi	r30, 0xA8	; 168
    41f0:	ff 4f       	sbci	r31, 0xFF	; 255
    41f2:	60 81       	ld	r22, Z
    41f4:	71 81       	ldd	r23, Z+1	; 0x01
    41f6:	82 81       	ldd	r24, Z+2	; 0x02
    41f8:	93 81       	ldd	r25, Z+3	; 0x03
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	40 e2       	ldi	r20, 0x20	; 32
    4200:	51 e4       	ldi	r21, 0x41	; 65
    4202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4206:	dc 01       	movw	r26, r24
    4208:	cb 01       	movw	r24, r22
    420a:	8e 01       	movw	r16, r28
    420c:	0e 5a       	subi	r16, 0xAE	; 174
    420e:	1f 4f       	sbci	r17, 0xFF	; 255
    4210:	bc 01       	movw	r22, r24
    4212:	cd 01       	movw	r24, r26
    4214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	f8 01       	movw	r30, r16
    421e:	91 83       	std	Z+1, r25	; 0x01
    4220:	80 83       	st	Z, r24
    4222:	1f c0       	rjmp	.+62     	; 0x4262 <HLCD_vInit+0x4c0>
    4224:	fe 01       	movw	r30, r28
    4226:	e0 5b       	subi	r30, 0xB0	; 176
    4228:	ff 4f       	sbci	r31, 0xFF	; 255
    422a:	88 ec       	ldi	r24, 0xC8	; 200
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	91 83       	std	Z+1, r25	; 0x01
    4230:	80 83       	st	Z, r24
    4232:	fe 01       	movw	r30, r28
    4234:	e0 5b       	subi	r30, 0xB0	; 176
    4236:	ff 4f       	sbci	r31, 0xFF	; 255
    4238:	80 81       	ld	r24, Z
    423a:	91 81       	ldd	r25, Z+1	; 0x01
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	f1 f7       	brne	.-4      	; 0x423c <HLCD_vInit+0x49a>
    4240:	fe 01       	movw	r30, r28
    4242:	e0 5b       	subi	r30, 0xB0	; 176
    4244:	ff 4f       	sbci	r31, 0xFF	; 255
    4246:	91 83       	std	Z+1, r25	; 0x01
    4248:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    424a:	de 01       	movw	r26, r28
    424c:	ae 5a       	subi	r26, 0xAE	; 174
    424e:	bf 4f       	sbci	r27, 0xFF	; 255
    4250:	fe 01       	movw	r30, r28
    4252:	ee 5a       	subi	r30, 0xAE	; 174
    4254:	ff 4f       	sbci	r31, 0xFF	; 255
    4256:	80 81       	ld	r24, Z
    4258:	91 81       	ldd	r25, Z+1	; 0x01
    425a:	01 97       	sbiw	r24, 0x01	; 1
    425c:	11 96       	adiw	r26, 0x01	; 1
    425e:	9c 93       	st	X, r25
    4260:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4262:	fe 01       	movw	r30, r28
    4264:	ee 5a       	subi	r30, 0xAE	; 174
    4266:	ff 4f       	sbci	r31, 0xFF	; 255
    4268:	80 81       	ld	r24, Z
    426a:	91 81       	ldd	r25, Z+1	; 0x01
    426c:	00 97       	sbiw	r24, 0x00	; 0
    426e:	d1 f6       	brne	.-76     	; 0x4224 <HLCD_vInit+0x482>
    4270:	4b c0       	rjmp	.+150    	; 0x4308 <HLCD_vInit+0x566>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4272:	8e 01       	movw	r16, r28
    4274:	0e 5a       	subi	r16, 0xAE	; 174
    4276:	1f 4f       	sbci	r17, 0xFF	; 255
    4278:	fe 01       	movw	r30, r28
    427a:	ec 5a       	subi	r30, 0xAC	; 172
    427c:	ff 4f       	sbci	r31, 0xFF	; 255
    427e:	60 81       	ld	r22, Z
    4280:	71 81       	ldd	r23, Z+1	; 0x01
    4282:	82 81       	ldd	r24, Z+2	; 0x02
    4284:	93 81       	ldd	r25, Z+3	; 0x03
    4286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    428a:	dc 01       	movw	r26, r24
    428c:	cb 01       	movw	r24, r22
    428e:	f8 01       	movw	r30, r16
    4290:	91 83       	std	Z+1, r25	; 0x01
    4292:	80 83       	st	Z, r24
    4294:	de 01       	movw	r26, r28
    4296:	a2 5b       	subi	r26, 0xB2	; 178
    4298:	bf 4f       	sbci	r27, 0xFF	; 255
    429a:	fe 01       	movw	r30, r28
    429c:	ee 5a       	subi	r30, 0xAE	; 174
    429e:	ff 4f       	sbci	r31, 0xFF	; 255
    42a0:	80 81       	ld	r24, Z
    42a2:	91 81       	ldd	r25, Z+1	; 0x01
    42a4:	11 96       	adiw	r26, 0x01	; 1
    42a6:	9c 93       	st	X, r25
    42a8:	8e 93       	st	-X, r24
    42aa:	fe 01       	movw	r30, r28
    42ac:	e2 5b       	subi	r30, 0xB2	; 178
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	80 81       	ld	r24, Z
    42b2:	91 81       	ldd	r25, Z+1	; 0x01
    42b4:	01 97       	sbiw	r24, 0x01	; 1
    42b6:	f1 f7       	brne	.-4      	; 0x42b4 <HLCD_vInit+0x512>
    42b8:	fe 01       	movw	r30, r28
    42ba:	e2 5b       	subi	r30, 0xB2	; 178
    42bc:	ff 4f       	sbci	r31, 0xFF	; 255
    42be:	91 83       	std	Z+1, r25	; 0x01
    42c0:	80 83       	st	Z, r24
    42c2:	22 c0       	rjmp	.+68     	; 0x4308 <HLCD_vInit+0x566>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    42c4:	8e 01       	movw	r16, r28
    42c6:	04 5a       	subi	r16, 0xA4	; 164
    42c8:	1f 4f       	sbci	r17, 0xFF	; 255
    42ca:	fe 01       	movw	r30, r28
    42cc:	e3 5a       	subi	r30, 0xA3	; 163
    42ce:	ff 4f       	sbci	r31, 0xFF	; 255
    42d0:	60 81       	ld	r22, Z
    42d2:	71 81       	ldd	r23, Z+1	; 0x01
    42d4:	82 81       	ldd	r24, Z+2	; 0x02
    42d6:	93 81       	ldd	r25, Z+3	; 0x03
    42d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42dc:	dc 01       	movw	r26, r24
    42de:	cb 01       	movw	r24, r22
    42e0:	f8 01       	movw	r30, r16
    42e2:	80 83       	st	Z, r24
    42e4:	de 01       	movw	r26, r28
    42e6:	a3 5b       	subi	r26, 0xB3	; 179
    42e8:	bf 4f       	sbci	r27, 0xFF	; 255
    42ea:	fe 01       	movw	r30, r28
    42ec:	e4 5a       	subi	r30, 0xA4	; 164
    42ee:	ff 4f       	sbci	r31, 0xFF	; 255
    42f0:	80 81       	ld	r24, Z
    42f2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    42f4:	fe 01       	movw	r30, r28
    42f6:	e3 5b       	subi	r30, 0xB3	; 179
    42f8:	ff 4f       	sbci	r31, 0xFF	; 255
    42fa:	80 81       	ld	r24, Z
    42fc:	8a 95       	dec	r24
    42fe:	f1 f7       	brne	.-4      	; 0x42fc <HLCD_vInit+0x55a>
    4300:	fe 01       	movw	r30, r28
    4302:	e3 5b       	subi	r30, 0xB3	; 179
    4304:	ff 4f       	sbci	r31, 0xFF	; 255
    4306:	80 83       	st	Z, r24

	_delay_us(4500);

	write4bits(0x03 << 4);
    4308:	80 e3       	ldi	r24, 0x30	; 48
    430a:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <write4bits>
    430e:	fe 01       	movw	r30, r28
    4310:	e7 5b       	subi	r30, 0xB7	; 183
    4312:	ff 4f       	sbci	r31, 0xFF	; 255
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	90 ea       	ldi	r25, 0xA0	; 160
    4318:	ac e8       	ldi	r26, 0x8C	; 140
    431a:	b5 e4       	ldi	r27, 0x45	; 69
    431c:	80 83       	st	Z, r24
    431e:	91 83       	std	Z+1, r25	; 0x01
    4320:	a2 83       	std	Z+2, r26	; 0x02
    4322:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4324:	8e 01       	movw	r16, r28
    4326:	0b 5b       	subi	r16, 0xBB	; 187
    4328:	1f 4f       	sbci	r17, 0xFF	; 255
    432a:	fe 01       	movw	r30, r28
    432c:	e7 5b       	subi	r30, 0xB7	; 183
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	60 81       	ld	r22, Z
    4332:	71 81       	ldd	r23, Z+1	; 0x01
    4334:	82 81       	ldd	r24, Z+2	; 0x02
    4336:	93 81       	ldd	r25, Z+3	; 0x03
    4338:	2b ea       	ldi	r18, 0xAB	; 171
    433a:	3a ea       	ldi	r19, 0xAA	; 170
    433c:	4a e2       	ldi	r20, 0x2A	; 42
    433e:	50 e4       	ldi	r21, 0x40	; 64
    4340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4344:	dc 01       	movw	r26, r24
    4346:	cb 01       	movw	r24, r22
    4348:	f8 01       	movw	r30, r16
    434a:	80 83       	st	Z, r24
    434c:	91 83       	std	Z+1, r25	; 0x01
    434e:	a2 83       	std	Z+2, r26	; 0x02
    4350:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4352:	fe 01       	movw	r30, r28
    4354:	eb 5b       	subi	r30, 0xBB	; 187
    4356:	ff 4f       	sbci	r31, 0xFF	; 255
    4358:	60 81       	ld	r22, Z
    435a:	71 81       	ldd	r23, Z+1	; 0x01
    435c:	82 81       	ldd	r24, Z+2	; 0x02
    435e:	93 81       	ldd	r25, Z+3	; 0x03
    4360:	20 e0       	ldi	r18, 0x00	; 0
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	40 e8       	ldi	r20, 0x80	; 128
    4366:	5f e3       	ldi	r21, 0x3F	; 63
    4368:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    436c:	88 23       	and	r24, r24
    436e:	34 f4       	brge	.+12     	; 0x437c <HLCD_vInit+0x5da>
		__ticks = 1;
    4370:	fe 01       	movw	r30, r28
    4372:	ec 5b       	subi	r30, 0xBC	; 188
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	81 e0       	ldi	r24, 0x01	; 1
    4378:	80 83       	st	Z, r24
    437a:	a7 c0       	rjmp	.+334    	; 0x44ca <HLCD_vInit+0x728>
	else if (__tmp > 255)
    437c:	fe 01       	movw	r30, r28
    437e:	eb 5b       	subi	r30, 0xBB	; 187
    4380:	ff 4f       	sbci	r31, 0xFF	; 255
    4382:	60 81       	ld	r22, Z
    4384:	71 81       	ldd	r23, Z+1	; 0x01
    4386:	82 81       	ldd	r24, Z+2	; 0x02
    4388:	93 81       	ldd	r25, Z+3	; 0x03
    438a:	20 e0       	ldi	r18, 0x00	; 0
    438c:	30 e0       	ldi	r19, 0x00	; 0
    438e:	4f e7       	ldi	r20, 0x7F	; 127
    4390:	53 e4       	ldi	r21, 0x43	; 67
    4392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4396:	18 16       	cp	r1, r24
    4398:	0c f0       	brlt	.+2      	; 0x439c <HLCD_vInit+0x5fa>
    439a:	87 c0       	rjmp	.+270    	; 0x44aa <HLCD_vInit+0x708>
	{
		_delay_ms(__us / 1000.0);
    439c:	fe 01       	movw	r30, r28
    439e:	e7 5b       	subi	r30, 0xB7	; 183
    43a0:	ff 4f       	sbci	r31, 0xFF	; 255
    43a2:	60 81       	ld	r22, Z
    43a4:	71 81       	ldd	r23, Z+1	; 0x01
    43a6:	82 81       	ldd	r24, Z+2	; 0x02
    43a8:	93 81       	ldd	r25, Z+3	; 0x03
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	4a e7       	ldi	r20, 0x7A	; 122
    43b0:	54 e4       	ldi	r21, 0x44	; 68
    43b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	fe 01       	movw	r30, r28
    43bc:	e0 5c       	subi	r30, 0xC0	; 192
    43be:	ff 4f       	sbci	r31, 0xFF	; 255
    43c0:	80 83       	st	Z, r24
    43c2:	91 83       	std	Z+1, r25	; 0x01
    43c4:	a2 83       	std	Z+2, r26	; 0x02
    43c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43c8:	fe 01       	movw	r30, r28
    43ca:	e0 5c       	subi	r30, 0xC0	; 192
    43cc:	ff 4f       	sbci	r31, 0xFF	; 255
    43ce:	60 81       	ld	r22, Z
    43d0:	71 81       	ldd	r23, Z+1	; 0x01
    43d2:	82 81       	ldd	r24, Z+2	; 0x02
    43d4:	93 81       	ldd	r25, Z+3	; 0x03
    43d6:	20 e0       	ldi	r18, 0x00	; 0
    43d8:	30 e0       	ldi	r19, 0x00	; 0
    43da:	4a ef       	ldi	r20, 0xFA	; 250
    43dc:	54 e4       	ldi	r21, 0x44	; 68
    43de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43e2:	dc 01       	movw	r26, r24
    43e4:	cb 01       	movw	r24, r22
    43e6:	8c af       	std	Y+60, r24	; 0x3c
    43e8:	9d af       	std	Y+61, r25	; 0x3d
    43ea:	ae af       	std	Y+62, r26	; 0x3e
    43ec:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    43ee:	6c ad       	ldd	r22, Y+60	; 0x3c
    43f0:	7d ad       	ldd	r23, Y+61	; 0x3d
    43f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    43f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	40 e8       	ldi	r20, 0x80	; 128
    43fc:	5f e3       	ldi	r21, 0x3F	; 63
    43fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4402:	88 23       	and	r24, r24
    4404:	2c f4       	brge	.+10     	; 0x4410 <HLCD_vInit+0x66e>
		__ticks = 1;
    4406:	81 e0       	ldi	r24, 0x01	; 1
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	9b af       	std	Y+59, r25	; 0x3b
    440c:	8a af       	std	Y+58, r24	; 0x3a
    440e:	42 c0       	rjmp	.+132    	; 0x4494 <HLCD_vInit+0x6f2>
	else if (__tmp > 65535)
    4410:	6c ad       	ldd	r22, Y+60	; 0x3c
    4412:	7d ad       	ldd	r23, Y+61	; 0x3d
    4414:	8e ad       	ldd	r24, Y+62	; 0x3e
    4416:	9f ad       	ldd	r25, Y+63	; 0x3f
    4418:	20 e0       	ldi	r18, 0x00	; 0
    441a:	3f ef       	ldi	r19, 0xFF	; 255
    441c:	4f e7       	ldi	r20, 0x7F	; 127
    441e:	57 e4       	ldi	r21, 0x47	; 71
    4420:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4424:	18 16       	cp	r1, r24
    4426:	64 f5       	brge	.+88     	; 0x4480 <HLCD_vInit+0x6de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4428:	fe 01       	movw	r30, r28
    442a:	e0 5c       	subi	r30, 0xC0	; 192
    442c:	ff 4f       	sbci	r31, 0xFF	; 255
    442e:	60 81       	ld	r22, Z
    4430:	71 81       	ldd	r23, Z+1	; 0x01
    4432:	82 81       	ldd	r24, Z+2	; 0x02
    4434:	93 81       	ldd	r25, Z+3	; 0x03
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	40 e2       	ldi	r20, 0x20	; 32
    443c:	51 e4       	ldi	r21, 0x41	; 65
    443e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4442:	dc 01       	movw	r26, r24
    4444:	cb 01       	movw	r24, r22
    4446:	bc 01       	movw	r22, r24
    4448:	cd 01       	movw	r24, r26
    444a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    444e:	dc 01       	movw	r26, r24
    4450:	cb 01       	movw	r24, r22
    4452:	9b af       	std	Y+59, r25	; 0x3b
    4454:	8a af       	std	Y+58, r24	; 0x3a
    4456:	0f c0       	rjmp	.+30     	; 0x4476 <HLCD_vInit+0x6d4>
    4458:	88 ec       	ldi	r24, 0xC8	; 200
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	99 af       	std	Y+57, r25	; 0x39
    445e:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4460:	88 ad       	ldd	r24, Y+56	; 0x38
    4462:	99 ad       	ldd	r25, Y+57	; 0x39
    4464:	01 97       	sbiw	r24, 0x01	; 1
    4466:	f1 f7       	brne	.-4      	; 0x4464 <HLCD_vInit+0x6c2>
    4468:	99 af       	std	Y+57, r25	; 0x39
    446a:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    446c:	8a ad       	ldd	r24, Y+58	; 0x3a
    446e:	9b ad       	ldd	r25, Y+59	; 0x3b
    4470:	01 97       	sbiw	r24, 0x01	; 1
    4472:	9b af       	std	Y+59, r25	; 0x3b
    4474:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4476:	8a ad       	ldd	r24, Y+58	; 0x3a
    4478:	9b ad       	ldd	r25, Y+59	; 0x3b
    447a:	00 97       	sbiw	r24, 0x00	; 0
    447c:	69 f7       	brne	.-38     	; 0x4458 <HLCD_vInit+0x6b6>
    447e:	2e c0       	rjmp	.+92     	; 0x44dc <HLCD_vInit+0x73a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4480:	6c ad       	ldd	r22, Y+60	; 0x3c
    4482:	7d ad       	ldd	r23, Y+61	; 0x3d
    4484:	8e ad       	ldd	r24, Y+62	; 0x3e
    4486:	9f ad       	ldd	r25, Y+63	; 0x3f
    4488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	9b af       	std	Y+59, r25	; 0x3b
    4492:	8a af       	std	Y+58, r24	; 0x3a
    4494:	8a ad       	ldd	r24, Y+58	; 0x3a
    4496:	9b ad       	ldd	r25, Y+59	; 0x3b
    4498:	9f ab       	std	Y+55, r25	; 0x37
    449a:	8e ab       	std	Y+54, r24	; 0x36
    449c:	8e a9       	ldd	r24, Y+54	; 0x36
    449e:	9f a9       	ldd	r25, Y+55	; 0x37
    44a0:	01 97       	sbiw	r24, 0x01	; 1
    44a2:	f1 f7       	brne	.-4      	; 0x44a0 <HLCD_vInit+0x6fe>
    44a4:	9f ab       	std	Y+55, r25	; 0x37
    44a6:	8e ab       	std	Y+54, r24	; 0x36
    44a8:	19 c0       	rjmp	.+50     	; 0x44dc <HLCD_vInit+0x73a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    44aa:	8e 01       	movw	r16, r28
    44ac:	0c 5b       	subi	r16, 0xBC	; 188
    44ae:	1f 4f       	sbci	r17, 0xFF	; 255
    44b0:	fe 01       	movw	r30, r28
    44b2:	eb 5b       	subi	r30, 0xBB	; 187
    44b4:	ff 4f       	sbci	r31, 0xFF	; 255
    44b6:	60 81       	ld	r22, Z
    44b8:	71 81       	ldd	r23, Z+1	; 0x01
    44ba:	82 81       	ldd	r24, Z+2	; 0x02
    44bc:	93 81       	ldd	r25, Z+3	; 0x03
    44be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	f8 01       	movw	r30, r16
    44c8:	80 83       	st	Z, r24
    44ca:	fe 01       	movw	r30, r28
    44cc:	ec 5b       	subi	r30, 0xBC	; 188
    44ce:	ff 4f       	sbci	r31, 0xFF	; 255
    44d0:	80 81       	ld	r24, Z
    44d2:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    44d4:	8d a9       	ldd	r24, Y+53	; 0x35
    44d6:	8a 95       	dec	r24
    44d8:	f1 f7       	brne	.-4      	; 0x44d6 <HLCD_vInit+0x734>
    44da:	8d ab       	std	Y+53, r24	; 0x35

	_delay_us(4500);

	write4bits(0x03 << 4);
    44dc:	80 e3       	ldi	r24, 0x30	; 48
    44de:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <write4bits>
    44e2:	80 e0       	ldi	r24, 0x00	; 0
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	a6 e1       	ldi	r26, 0x16	; 22
    44e8:	b3 e4       	ldi	r27, 0x43	; 67
    44ea:	89 ab       	std	Y+49, r24	; 0x31
    44ec:	9a ab       	std	Y+50, r25	; 0x32
    44ee:	ab ab       	std	Y+51, r26	; 0x33
    44f0:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    44f2:	69 a9       	ldd	r22, Y+49	; 0x31
    44f4:	7a a9       	ldd	r23, Y+50	; 0x32
    44f6:	8b a9       	ldd	r24, Y+51	; 0x33
    44f8:	9c a9       	ldd	r25, Y+52	; 0x34
    44fa:	2b ea       	ldi	r18, 0xAB	; 171
    44fc:	3a ea       	ldi	r19, 0xAA	; 170
    44fe:	4a e2       	ldi	r20, 0x2A	; 42
    4500:	50 e4       	ldi	r21, 0x40	; 64
    4502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4506:	dc 01       	movw	r26, r24
    4508:	cb 01       	movw	r24, r22
    450a:	8d a7       	std	Y+45, r24	; 0x2d
    450c:	9e a7       	std	Y+46, r25	; 0x2e
    450e:	af a7       	std	Y+47, r26	; 0x2f
    4510:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    4512:	6d a5       	ldd	r22, Y+45	; 0x2d
    4514:	7e a5       	ldd	r23, Y+46	; 0x2e
    4516:	8f a5       	ldd	r24, Y+47	; 0x2f
    4518:	98 a9       	ldd	r25, Y+48	; 0x30
    451a:	20 e0       	ldi	r18, 0x00	; 0
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	40 e8       	ldi	r20, 0x80	; 128
    4520:	5f e3       	ldi	r21, 0x3F	; 63
    4522:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4526:	88 23       	and	r24, r24
    4528:	1c f4       	brge	.+6      	; 0x4530 <HLCD_vInit+0x78e>
		__ticks = 1;
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	8c a7       	std	Y+44, r24	; 0x2c
    452e:	91 c0       	rjmp	.+290    	; 0x4652 <HLCD_vInit+0x8b0>
	else if (__tmp > 255)
    4530:	6d a5       	ldd	r22, Y+45	; 0x2d
    4532:	7e a5       	ldd	r23, Y+46	; 0x2e
    4534:	8f a5       	ldd	r24, Y+47	; 0x2f
    4536:	98 a9       	ldd	r25, Y+48	; 0x30
    4538:	20 e0       	ldi	r18, 0x00	; 0
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	4f e7       	ldi	r20, 0x7F	; 127
    453e:	53 e4       	ldi	r21, 0x43	; 67
    4540:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4544:	18 16       	cp	r1, r24
    4546:	0c f0       	brlt	.+2      	; 0x454a <HLCD_vInit+0x7a8>
    4548:	7b c0       	rjmp	.+246    	; 0x4640 <HLCD_vInit+0x89e>
	{
		_delay_ms(__us / 1000.0);
    454a:	69 a9       	ldd	r22, Y+49	; 0x31
    454c:	7a a9       	ldd	r23, Y+50	; 0x32
    454e:	8b a9       	ldd	r24, Y+51	; 0x33
    4550:	9c a9       	ldd	r25, Y+52	; 0x34
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	30 e0       	ldi	r19, 0x00	; 0
    4556:	4a e7       	ldi	r20, 0x7A	; 122
    4558:	54 e4       	ldi	r21, 0x44	; 68
    455a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    455e:	dc 01       	movw	r26, r24
    4560:	cb 01       	movw	r24, r22
    4562:	88 a7       	std	Y+40, r24	; 0x28
    4564:	99 a7       	std	Y+41, r25	; 0x29
    4566:	aa a7       	std	Y+42, r26	; 0x2a
    4568:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    456a:	68 a5       	ldd	r22, Y+40	; 0x28
    456c:	79 a5       	ldd	r23, Y+41	; 0x29
    456e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4570:	9b a5       	ldd	r25, Y+43	; 0x2b
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	4a ef       	ldi	r20, 0xFA	; 250
    4578:	54 e4       	ldi	r21, 0x44	; 68
    457a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    457e:	dc 01       	movw	r26, r24
    4580:	cb 01       	movw	r24, r22
    4582:	8c a3       	std	Y+36, r24	; 0x24
    4584:	9d a3       	std	Y+37, r25	; 0x25
    4586:	ae a3       	std	Y+38, r26	; 0x26
    4588:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    458a:	6c a1       	ldd	r22, Y+36	; 0x24
    458c:	7d a1       	ldd	r23, Y+37	; 0x25
    458e:	8e a1       	ldd	r24, Y+38	; 0x26
    4590:	9f a1       	ldd	r25, Y+39	; 0x27
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	30 e0       	ldi	r19, 0x00	; 0
    4596:	40 e8       	ldi	r20, 0x80	; 128
    4598:	5f e3       	ldi	r21, 0x3F	; 63
    459a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    459e:	88 23       	and	r24, r24
    45a0:	2c f4       	brge	.+10     	; 0x45ac <HLCD_vInit+0x80a>
		__ticks = 1;
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	9b a3       	std	Y+35, r25	; 0x23
    45a8:	8a a3       	std	Y+34, r24	; 0x22
    45aa:	3f c0       	rjmp	.+126    	; 0x462a <HLCD_vInit+0x888>
	else if (__tmp > 65535)
    45ac:	6c a1       	ldd	r22, Y+36	; 0x24
    45ae:	7d a1       	ldd	r23, Y+37	; 0x25
    45b0:	8e a1       	ldd	r24, Y+38	; 0x26
    45b2:	9f a1       	ldd	r25, Y+39	; 0x27
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	3f ef       	ldi	r19, 0xFF	; 255
    45b8:	4f e7       	ldi	r20, 0x7F	; 127
    45ba:	57 e4       	ldi	r21, 0x47	; 71
    45bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45c0:	18 16       	cp	r1, r24
    45c2:	4c f5       	brge	.+82     	; 0x4616 <HLCD_vInit+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c4:	68 a5       	ldd	r22, Y+40	; 0x28
    45c6:	79 a5       	ldd	r23, Y+41	; 0x29
    45c8:	8a a5       	ldd	r24, Y+42	; 0x2a
    45ca:	9b a5       	ldd	r25, Y+43	; 0x2b
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	40 e2       	ldi	r20, 0x20	; 32
    45d2:	51 e4       	ldi	r21, 0x41	; 65
    45d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d8:	dc 01       	movw	r26, r24
    45da:	cb 01       	movw	r24, r22
    45dc:	bc 01       	movw	r22, r24
    45de:	cd 01       	movw	r24, r26
    45e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e4:	dc 01       	movw	r26, r24
    45e6:	cb 01       	movw	r24, r22
    45e8:	9b a3       	std	Y+35, r25	; 0x23
    45ea:	8a a3       	std	Y+34, r24	; 0x22
    45ec:	0f c0       	rjmp	.+30     	; 0x460c <HLCD_vInit+0x86a>
    45ee:	88 ec       	ldi	r24, 0xC8	; 200
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	99 a3       	std	Y+33, r25	; 0x21
    45f4:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    45f6:	88 a1       	ldd	r24, Y+32	; 0x20
    45f8:	99 a1       	ldd	r25, Y+33	; 0x21
    45fa:	01 97       	sbiw	r24, 0x01	; 1
    45fc:	f1 f7       	brne	.-4      	; 0x45fa <HLCD_vInit+0x858>
    45fe:	99 a3       	std	Y+33, r25	; 0x21
    4600:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4602:	8a a1       	ldd	r24, Y+34	; 0x22
    4604:	9b a1       	ldd	r25, Y+35	; 0x23
    4606:	01 97       	sbiw	r24, 0x01	; 1
    4608:	9b a3       	std	Y+35, r25	; 0x23
    460a:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    460c:	8a a1       	ldd	r24, Y+34	; 0x22
    460e:	9b a1       	ldd	r25, Y+35	; 0x23
    4610:	00 97       	sbiw	r24, 0x00	; 0
    4612:	69 f7       	brne	.-38     	; 0x45ee <HLCD_vInit+0x84c>
    4614:	24 c0       	rjmp	.+72     	; 0x465e <HLCD_vInit+0x8bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4616:	6c a1       	ldd	r22, Y+36	; 0x24
    4618:	7d a1       	ldd	r23, Y+37	; 0x25
    461a:	8e a1       	ldd	r24, Y+38	; 0x26
    461c:	9f a1       	ldd	r25, Y+39	; 0x27
    461e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4622:	dc 01       	movw	r26, r24
    4624:	cb 01       	movw	r24, r22
    4626:	9b a3       	std	Y+35, r25	; 0x23
    4628:	8a a3       	std	Y+34, r24	; 0x22
    462a:	8a a1       	ldd	r24, Y+34	; 0x22
    462c:	9b a1       	ldd	r25, Y+35	; 0x23
    462e:	9f 8f       	std	Y+31, r25	; 0x1f
    4630:	8e 8f       	std	Y+30, r24	; 0x1e
    4632:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4634:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4636:	01 97       	sbiw	r24, 0x01	; 1
    4638:	f1 f7       	brne	.-4      	; 0x4636 <HLCD_vInit+0x894>
    463a:	9f 8f       	std	Y+31, r25	; 0x1f
    463c:	8e 8f       	std	Y+30, r24	; 0x1e
    463e:	0f c0       	rjmp	.+30     	; 0x465e <HLCD_vInit+0x8bc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4640:	6d a5       	ldd	r22, Y+45	; 0x2d
    4642:	7e a5       	ldd	r23, Y+46	; 0x2e
    4644:	8f a5       	ldd	r24, Y+47	; 0x2f
    4646:	98 a9       	ldd	r25, Y+48	; 0x30
    4648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    464c:	dc 01       	movw	r26, r24
    464e:	cb 01       	movw	r24, r22
    4650:	8c a7       	std	Y+44, r24	; 0x2c
    4652:	8c a5       	ldd	r24, Y+44	; 0x2c
    4654:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4656:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4658:	8a 95       	dec	r24
    465a:	f1 f7       	brne	.-4      	; 0x4658 <HLCD_vInit+0x8b6>
    465c:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_us(150);

	write4bits(0x02 << 4);
    465e:	80 e2       	ldi	r24, 0x20	; 32
    4660:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <write4bits>

	command(LCD_FUNCTIONSET | displayfunction);
    4664:	fe 01       	movw	r30, r28
    4666:	ed 57       	subi	r30, 0x7D	; 125
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	80 81       	ld	r24, Z
    466c:	80 62       	ori	r24, 0x20	; 32
    466e:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <command>

	u08 displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    4672:	fe 01       	movw	r30, r28
    4674:	ee 57       	subi	r30, 0x7E	; 126
    4676:	ff 4f       	sbci	r31, 0xFF	; 255
    4678:	84 e0       	ldi	r24, 0x04	; 4
    467a:	80 83       	st	Z, r24
	command(LCD_DISPLAYCONTROL | displaycontrol);
    467c:	fe 01       	movw	r30, r28
    467e:	ee 57       	subi	r30, 0x7E	; 126
    4680:	ff 4f       	sbci	r31, 0xFF	; 255
    4682:	80 81       	ld	r24, Z
    4684:	88 60       	ori	r24, 0x08	; 8
    4686:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <command>
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
    468a:	81 e0       	ldi	r24, 0x01	; 1
    468c:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <command>
    4690:	80 e0       	ldi	r24, 0x00	; 0
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	a0 e0       	ldi	r26, 0x00	; 0
    4696:	b0 e4       	ldi	r27, 0x40	; 64
    4698:	89 8f       	std	Y+25, r24	; 0x19
    469a:	9a 8f       	std	Y+26, r25	; 0x1a
    469c:	ab 8f       	std	Y+27, r26	; 0x1b
    469e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46a0:	69 8d       	ldd	r22, Y+25	; 0x19
    46a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46a8:	20 e0       	ldi	r18, 0x00	; 0
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	4a ef       	ldi	r20, 0xFA	; 250
    46ae:	54 e4       	ldi	r21, 0x44	; 68
    46b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46b4:	dc 01       	movw	r26, r24
    46b6:	cb 01       	movw	r24, r22
    46b8:	8d 8b       	std	Y+21, r24	; 0x15
    46ba:	9e 8b       	std	Y+22, r25	; 0x16
    46bc:	af 8b       	std	Y+23, r26	; 0x17
    46be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46c0:	6d 89       	ldd	r22, Y+21	; 0x15
    46c2:	7e 89       	ldd	r23, Y+22	; 0x16
    46c4:	8f 89       	ldd	r24, Y+23	; 0x17
    46c6:	98 8d       	ldd	r25, Y+24	; 0x18
    46c8:	20 e0       	ldi	r18, 0x00	; 0
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	40 e8       	ldi	r20, 0x80	; 128
    46ce:	5f e3       	ldi	r21, 0x3F	; 63
    46d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46d4:	88 23       	and	r24, r24
    46d6:	2c f4       	brge	.+10     	; 0x46e2 <HLCD_vInit+0x940>
		__ticks = 1;
    46d8:	81 e0       	ldi	r24, 0x01	; 1
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	9c 8b       	std	Y+20, r25	; 0x14
    46de:	8b 8b       	std	Y+19, r24	; 0x13
    46e0:	3f c0       	rjmp	.+126    	; 0x4760 <HLCD_vInit+0x9be>
	else if (__tmp > 65535)
    46e2:	6d 89       	ldd	r22, Y+21	; 0x15
    46e4:	7e 89       	ldd	r23, Y+22	; 0x16
    46e6:	8f 89       	ldd	r24, Y+23	; 0x17
    46e8:	98 8d       	ldd	r25, Y+24	; 0x18
    46ea:	20 e0       	ldi	r18, 0x00	; 0
    46ec:	3f ef       	ldi	r19, 0xFF	; 255
    46ee:	4f e7       	ldi	r20, 0x7F	; 127
    46f0:	57 e4       	ldi	r21, 0x47	; 71
    46f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46f6:	18 16       	cp	r1, r24
    46f8:	4c f5       	brge	.+82     	; 0x474c <HLCD_vInit+0x9aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46fa:	69 8d       	ldd	r22, Y+25	; 0x19
    46fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4700:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4702:	20 e0       	ldi	r18, 0x00	; 0
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	40 e2       	ldi	r20, 0x20	; 32
    4708:	51 e4       	ldi	r21, 0x41	; 65
    470a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470e:	dc 01       	movw	r26, r24
    4710:	cb 01       	movw	r24, r22
    4712:	bc 01       	movw	r22, r24
    4714:	cd 01       	movw	r24, r26
    4716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    471a:	dc 01       	movw	r26, r24
    471c:	cb 01       	movw	r24, r22
    471e:	9c 8b       	std	Y+20, r25	; 0x14
    4720:	8b 8b       	std	Y+19, r24	; 0x13
    4722:	0f c0       	rjmp	.+30     	; 0x4742 <HLCD_vInit+0x9a0>
    4724:	88 ec       	ldi	r24, 0xC8	; 200
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	9a 8b       	std	Y+18, r25	; 0x12
    472a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    472c:	89 89       	ldd	r24, Y+17	; 0x11
    472e:	9a 89       	ldd	r25, Y+18	; 0x12
    4730:	01 97       	sbiw	r24, 0x01	; 1
    4732:	f1 f7       	brne	.-4      	; 0x4730 <HLCD_vInit+0x98e>
    4734:	9a 8b       	std	Y+18, r25	; 0x12
    4736:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4738:	8b 89       	ldd	r24, Y+19	; 0x13
    473a:	9c 89       	ldd	r25, Y+20	; 0x14
    473c:	01 97       	sbiw	r24, 0x01	; 1
    473e:	9c 8b       	std	Y+20, r25	; 0x14
    4740:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4742:	8b 89       	ldd	r24, Y+19	; 0x13
    4744:	9c 89       	ldd	r25, Y+20	; 0x14
    4746:	00 97       	sbiw	r24, 0x00	; 0
    4748:	69 f7       	brne	.-38     	; 0x4724 <HLCD_vInit+0x982>
    474a:	14 c0       	rjmp	.+40     	; 0x4774 <HLCD_vInit+0x9d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    474c:	6d 89       	ldd	r22, Y+21	; 0x15
    474e:	7e 89       	ldd	r23, Y+22	; 0x16
    4750:	8f 89       	ldd	r24, Y+23	; 0x17
    4752:	98 8d       	ldd	r25, Y+24	; 0x18
    4754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4758:	dc 01       	movw	r26, r24
    475a:	cb 01       	movw	r24, r22
    475c:	9c 8b       	std	Y+20, r25	; 0x14
    475e:	8b 8b       	std	Y+19, r24	; 0x13
    4760:	8b 89       	ldd	r24, Y+19	; 0x13
    4762:	9c 89       	ldd	r25, Y+20	; 0x14
    4764:	98 8b       	std	Y+16, r25	; 0x10
    4766:	8f 87       	std	Y+15, r24	; 0x0f
    4768:	8f 85       	ldd	r24, Y+15	; 0x0f
    476a:	98 89       	ldd	r25, Y+16	; 0x10
    476c:	01 97       	sbiw	r24, 0x01	; 1
    476e:	f1 f7       	brne	.-4      	; 0x476c <HLCD_vInit+0x9ca>
    4770:	98 8b       	std	Y+16, r25	; 0x10
    4772:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	u08 displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    4774:	fe 01       	movw	r30, r28
    4776:	ef 57       	subi	r30, 0x7F	; 127
    4778:	ff 4f       	sbci	r31, 0xFF	; 255
    477a:	82 e0       	ldi	r24, 0x02	; 2
    477c:	80 83       	st	Z, r24

	// set the entry mode
	command(LCD_ENTRYMODESET | displaymode);
    477e:	fe 01       	movw	r30, r28
    4780:	ef 57       	subi	r30, 0x7F	; 127
    4782:	ff 4f       	sbci	r31, 0xFF	; 255
    4784:	80 81       	ld	r24, Z
    4786:	84 60       	ori	r24, 0x04	; 4
    4788:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <command>

	command(LCD_RETURNHOME);  // set cursor position to zero
    478c:	82 e0       	ldi	r24, 0x02	; 2
    478e:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <command>
    4792:	80 e0       	ldi	r24, 0x00	; 0
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	a0 e0       	ldi	r26, 0x00	; 0
    4798:	b0 e4       	ldi	r27, 0x40	; 64
    479a:	8b 87       	std	Y+11, r24	; 0x0b
    479c:	9c 87       	std	Y+12, r25	; 0x0c
    479e:	ad 87       	std	Y+13, r26	; 0x0d
    47a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    47a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    47a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    47a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    47aa:	20 e0       	ldi	r18, 0x00	; 0
    47ac:	30 e0       	ldi	r19, 0x00	; 0
    47ae:	4a ef       	ldi	r20, 0xFA	; 250
    47b0:	54 e4       	ldi	r21, 0x44	; 68
    47b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b6:	dc 01       	movw	r26, r24
    47b8:	cb 01       	movw	r24, r22
    47ba:	8f 83       	std	Y+7, r24	; 0x07
    47bc:	98 87       	std	Y+8, r25	; 0x08
    47be:	a9 87       	std	Y+9, r26	; 0x09
    47c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47c2:	6f 81       	ldd	r22, Y+7	; 0x07
    47c4:	78 85       	ldd	r23, Y+8	; 0x08
    47c6:	89 85       	ldd	r24, Y+9	; 0x09
    47c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	30 e0       	ldi	r19, 0x00	; 0
    47ce:	40 e8       	ldi	r20, 0x80	; 128
    47d0:	5f e3       	ldi	r21, 0x3F	; 63
    47d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47d6:	88 23       	and	r24, r24
    47d8:	2c f4       	brge	.+10     	; 0x47e4 <HLCD_vInit+0xa42>
		__ticks = 1;
    47da:	81 e0       	ldi	r24, 0x01	; 1
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	9e 83       	std	Y+6, r25	; 0x06
    47e0:	8d 83       	std	Y+5, r24	; 0x05
    47e2:	3f c0       	rjmp	.+126    	; 0x4862 <HLCD_vInit+0xac0>
	else if (__tmp > 65535)
    47e4:	6f 81       	ldd	r22, Y+7	; 0x07
    47e6:	78 85       	ldd	r23, Y+8	; 0x08
    47e8:	89 85       	ldd	r24, Y+9	; 0x09
    47ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	3f ef       	ldi	r19, 0xFF	; 255
    47f0:	4f e7       	ldi	r20, 0x7F	; 127
    47f2:	57 e4       	ldi	r21, 0x47	; 71
    47f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47f8:	18 16       	cp	r1, r24
    47fa:	4c f5       	brge	.+82     	; 0x484e <HLCD_vInit+0xaac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    47fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4800:	8d 85       	ldd	r24, Y+13	; 0x0d
    4802:	9e 85       	ldd	r25, Y+14	; 0x0e
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	30 e0       	ldi	r19, 0x00	; 0
    4808:	40 e2       	ldi	r20, 0x20	; 32
    480a:	51 e4       	ldi	r21, 0x41	; 65
    480c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4810:	dc 01       	movw	r26, r24
    4812:	cb 01       	movw	r24, r22
    4814:	bc 01       	movw	r22, r24
    4816:	cd 01       	movw	r24, r26
    4818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    481c:	dc 01       	movw	r26, r24
    481e:	cb 01       	movw	r24, r22
    4820:	9e 83       	std	Y+6, r25	; 0x06
    4822:	8d 83       	std	Y+5, r24	; 0x05
    4824:	0f c0       	rjmp	.+30     	; 0x4844 <HLCD_vInit+0xaa2>
    4826:	88 ec       	ldi	r24, 0xC8	; 200
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	9c 83       	std	Y+4, r25	; 0x04
    482c:	8b 83       	std	Y+3, r24	; 0x03
    482e:	8b 81       	ldd	r24, Y+3	; 0x03
    4830:	9c 81       	ldd	r25, Y+4	; 0x04
    4832:	01 97       	sbiw	r24, 0x01	; 1
    4834:	f1 f7       	brne	.-4      	; 0x4832 <HLCD_vInit+0xa90>
    4836:	9c 83       	std	Y+4, r25	; 0x04
    4838:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    483a:	8d 81       	ldd	r24, Y+5	; 0x05
    483c:	9e 81       	ldd	r25, Y+6	; 0x06
    483e:	01 97       	sbiw	r24, 0x01	; 1
    4840:	9e 83       	std	Y+6, r25	; 0x06
    4842:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4844:	8d 81       	ldd	r24, Y+5	; 0x05
    4846:	9e 81       	ldd	r25, Y+6	; 0x06
    4848:	00 97       	sbiw	r24, 0x00	; 0
    484a:	69 f7       	brne	.-38     	; 0x4826 <HLCD_vInit+0xa84>
    484c:	14 c0       	rjmp	.+40     	; 0x4876 <HLCD_vInit+0xad4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    484e:	6f 81       	ldd	r22, Y+7	; 0x07
    4850:	78 85       	ldd	r23, Y+8	; 0x08
    4852:	89 85       	ldd	r24, Y+9	; 0x09
    4854:	9a 85       	ldd	r25, Y+10	; 0x0a
    4856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	9e 83       	std	Y+6, r25	; 0x06
    4860:	8d 83       	std	Y+5, r24	; 0x05
    4862:	8d 81       	ldd	r24, Y+5	; 0x05
    4864:	9e 81       	ldd	r25, Y+6	; 0x06
    4866:	9a 83       	std	Y+2, r25	; 0x02
    4868:	89 83       	std	Y+1, r24	; 0x01
    486a:	89 81       	ldd	r24, Y+1	; 0x01
    486c:	9a 81       	ldd	r25, Y+2	; 0x02
    486e:	01 97       	sbiw	r24, 0x01	; 1
    4870:	f1 f7       	brne	.-4      	; 0x486e <HLCD_vInit+0xacc>
    4872:	9a 83       	std	Y+2, r25	; 0x02
    4874:	89 83       	std	Y+1, r24	; 0x01
	HLCD_vSendCommand(0b10001000);
	HLCD_vSendCommand(0b00001000);
	HLCD_vSendCommand(0b00011000);
	HLCD_vSendCommand(0b00001000);
	HLCD_vSendCommand(0b11001000);*/
}
    4876:	cd 57       	subi	r28, 0x7D	; 125
    4878:	df 4f       	sbci	r29, 0xFF	; 255
    487a:	0f b6       	in	r0, 0x3f	; 63
    487c:	f8 94       	cli
    487e:	de bf       	out	0x3e, r29	; 62
    4880:	0f be       	out	0x3f, r0	; 63
    4882:	cd bf       	out	0x3d, r28	; 61
    4884:	cf 91       	pop	r28
    4886:	df 91       	pop	r29
    4888:	1f 91       	pop	r17
    488a:	0f 91       	pop	r16
    488c:	08 95       	ret

0000488e <HLCD_vPrintString>:
void HLCD_vPrintString(u08 A_u8String[]){
    488e:	df 93       	push	r29
    4890:	cf 93       	push	r28
    4892:	00 d0       	rcall	.+0      	; 0x4894 <HLCD_vPrintString+0x6>
    4894:	0f 92       	push	r0
    4896:	cd b7       	in	r28, 0x3d	; 61
    4898:	de b7       	in	r29, 0x3e	; 62
    489a:	9b 83       	std	Y+3, r25	; 0x03
    489c:	8a 83       	std	Y+2, r24	; 0x02
	for(u08 L_u8i=0;A_u8String[L_u8i]!='\0';L_u8i++){
    489e:	19 82       	std	Y+1, r1	; 0x01
    48a0:	0e c0       	rjmp	.+28     	; 0x48be <HLCD_vPrintString+0x30>
		HLCD_vSendChar(A_u8String[L_u8i]);
    48a2:	89 81       	ldd	r24, Y+1	; 0x01
    48a4:	28 2f       	mov	r18, r24
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	8a 81       	ldd	r24, Y+2	; 0x02
    48aa:	9b 81       	ldd	r25, Y+3	; 0x03
    48ac:	fc 01       	movw	r30, r24
    48ae:	e2 0f       	add	r30, r18
    48b0:	f3 1f       	adc	r31, r19
    48b2:	80 81       	ld	r24, Z
    48b4:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <HLCD_vSendChar>
	HLCD_vSendCommand(0b00011000);
	HLCD_vSendCommand(0b00001000);
	HLCD_vSendCommand(0b11001000);*/
}
void HLCD_vPrintString(u08 A_u8String[]){
	for(u08 L_u8i=0;A_u8String[L_u8i]!='\0';L_u8i++){
    48b8:	89 81       	ldd	r24, Y+1	; 0x01
    48ba:	8f 5f       	subi	r24, 0xFF	; 255
    48bc:	89 83       	std	Y+1, r24	; 0x01
    48be:	89 81       	ldd	r24, Y+1	; 0x01
    48c0:	28 2f       	mov	r18, r24
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	8a 81       	ldd	r24, Y+2	; 0x02
    48c6:	9b 81       	ldd	r25, Y+3	; 0x03
    48c8:	fc 01       	movw	r30, r24
    48ca:	e2 0f       	add	r30, r18
    48cc:	f3 1f       	adc	r31, r19
    48ce:	80 81       	ld	r24, Z
    48d0:	88 23       	and	r24, r24
    48d2:	39 f7       	brne	.-50     	; 0x48a2 <HLCD_vPrintString+0x14>
		HLCD_vSendChar(A_u8String[L_u8i]);
	}
}
    48d4:	0f 90       	pop	r0
    48d6:	0f 90       	pop	r0
    48d8:	0f 90       	pop	r0
    48da:	cf 91       	pop	r28
    48dc:	df 91       	pop	r29
    48de:	08 95       	ret

000048e0 <HLCD_vPrintNumber>:
void HLCD_vPrintNumber(s32 A_s32Number){
    48e0:	ef 92       	push	r14
    48e2:	ff 92       	push	r15
    48e4:	0f 93       	push	r16
    48e6:	1f 93       	push	r17
    48e8:	df 93       	push	r29
    48ea:	cf 93       	push	r28
    48ec:	cd b7       	in	r28, 0x3d	; 61
    48ee:	de b7       	in	r29, 0x3e	; 62
    48f0:	2d 97       	sbiw	r28, 0x0d	; 13
    48f2:	0f b6       	in	r0, 0x3f	; 63
    48f4:	f8 94       	cli
    48f6:	de bf       	out	0x3e, r29	; 62
    48f8:	0f be       	out	0x3f, r0	; 63
    48fa:	cd bf       	out	0x3d, r28	; 61
    48fc:	6a 87       	std	Y+10, r22	; 0x0a
    48fe:	7b 87       	std	Y+11, r23	; 0x0b
    4900:	8c 87       	std	Y+12, r24	; 0x0c
    4902:	9d 87       	std	Y+13, r25	; 0x0d
	u08 L_u8counter=0;
    4904:	19 86       	std	Y+9, r1	; 0x09
	u32 L_u8power=1;
    4906:	81 e0       	ldi	r24, 0x01	; 1
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	a0 e0       	ldi	r26, 0x00	; 0
    490c:	b0 e0       	ldi	r27, 0x00	; 0
    490e:	8d 83       	std	Y+5, r24	; 0x05
    4910:	9e 83       	std	Y+6, r25	; 0x06
    4912:	af 83       	std	Y+7, r26	; 0x07
    4914:	b8 87       	std	Y+8, r27	; 0x08
	s32 A_s32CopyNumber=A_s32Number;
    4916:	8a 85       	ldd	r24, Y+10	; 0x0a
    4918:	9b 85       	ldd	r25, Y+11	; 0x0b
    491a:	ac 85       	ldd	r26, Y+12	; 0x0c
    491c:	bd 85       	ldd	r27, Y+13	; 0x0d
    491e:	89 83       	std	Y+1, r24	; 0x01
    4920:	9a 83       	std	Y+2, r25	; 0x02
    4922:	ab 83       	std	Y+3, r26	; 0x03
    4924:	bc 83       	std	Y+4, r27	; 0x04
    4926:	15 c0       	rjmp	.+42     	; 0x4952 <HLCD_vPrintNumber+0x72>
	while((A_s32CopyNumber/10)!=0)
		{
			L_u8counter++;
    4928:	89 85       	ldd	r24, Y+9	; 0x09
    492a:	8f 5f       	subi	r24, 0xFF	; 255
    492c:	89 87       	std	Y+9, r24	; 0x09
			A_s32CopyNumber/=10;
    492e:	89 81       	ldd	r24, Y+1	; 0x01
    4930:	9a 81       	ldd	r25, Y+2	; 0x02
    4932:	ab 81       	ldd	r26, Y+3	; 0x03
    4934:	bc 81       	ldd	r27, Y+4	; 0x04
    4936:	2a e0       	ldi	r18, 0x0A	; 10
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	40 e0       	ldi	r20, 0x00	; 0
    493c:	50 e0       	ldi	r21, 0x00	; 0
    493e:	bc 01       	movw	r22, r24
    4940:	cd 01       	movw	r24, r26
    4942:	0e 94 36 31 	call	0x626c	; 0x626c <__divmodsi4>
    4946:	da 01       	movw	r26, r20
    4948:	c9 01       	movw	r24, r18
    494a:	89 83       	std	Y+1, r24	; 0x01
    494c:	9a 83       	std	Y+2, r25	; 0x02
    494e:	ab 83       	std	Y+3, r26	; 0x03
    4950:	bc 83       	std	Y+4, r27	; 0x04
}
void HLCD_vPrintNumber(s32 A_s32Number){
	u08 L_u8counter=0;
	u32 L_u8power=1;
	s32 A_s32CopyNumber=A_s32Number;
	while((A_s32CopyNumber/10)!=0)
    4952:	89 81       	ldd	r24, Y+1	; 0x01
    4954:	9a 81       	ldd	r25, Y+2	; 0x02
    4956:	ab 81       	ldd	r26, Y+3	; 0x03
    4958:	bc 81       	ldd	r27, Y+4	; 0x04
    495a:	09 96       	adiw	r24, 0x09	; 9
    495c:	a1 1d       	adc	r26, r1
    495e:	b1 1d       	adc	r27, r1
    4960:	83 31       	cpi	r24, 0x13	; 19
    4962:	91 05       	cpc	r25, r1
    4964:	a1 05       	cpc	r26, r1
    4966:	b1 05       	cpc	r27, r1
    4968:	f8 f6       	brcc	.-66     	; 0x4928 <HLCD_vPrintNumber+0x48>
    496a:	15 c0       	rjmp	.+42     	; 0x4996 <HLCD_vPrintNumber+0xb6>
			L_u8counter++;
			A_s32CopyNumber/=10;
		}
	for(;L_u8counter>0;L_u8counter--)
	{
		L_u8power*=10;
    496c:	8d 81       	ldd	r24, Y+5	; 0x05
    496e:	9e 81       	ldd	r25, Y+6	; 0x06
    4970:	af 81       	ldd	r26, Y+7	; 0x07
    4972:	b8 85       	ldd	r27, Y+8	; 0x08
    4974:	2a e0       	ldi	r18, 0x0A	; 10
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	40 e0       	ldi	r20, 0x00	; 0
    497a:	50 e0       	ldi	r21, 0x00	; 0
    497c:	bc 01       	movw	r22, r24
    497e:	cd 01       	movw	r24, r26
    4980:	0e 94 ce 30 	call	0x619c	; 0x619c <__mulsi3>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	8d 83       	std	Y+5, r24	; 0x05
    498a:	9e 83       	std	Y+6, r25	; 0x06
    498c:	af 83       	std	Y+7, r26	; 0x07
    498e:	b8 87       	std	Y+8, r27	; 0x08
	while((A_s32CopyNumber/10)!=0)
		{
			L_u8counter++;
			A_s32CopyNumber/=10;
		}
	for(;L_u8counter>0;L_u8counter--)
    4990:	89 85       	ldd	r24, Y+9	; 0x09
    4992:	81 50       	subi	r24, 0x01	; 1
    4994:	89 87       	std	Y+9, r24	; 0x09
    4996:	89 85       	ldd	r24, Y+9	; 0x09
    4998:	88 23       	and	r24, r24
    499a:	41 f7       	brne	.-48     	; 0x496c <HLCD_vPrintNumber+0x8c>
	{
		L_u8power*=10;
	}
	if((A_s32Number/10)>=0&&(A_s32Number%10)>=0)
    499c:	8a 85       	ldd	r24, Y+10	; 0x0a
    499e:	9b 85       	ldd	r25, Y+11	; 0x0b
    49a0:	ac 85       	ldd	r26, Y+12	; 0x0c
    49a2:	bd 85       	ldd	r27, Y+13	; 0x0d
    49a4:	87 3f       	cpi	r24, 0xF7	; 247
    49a6:	2f ef       	ldi	r18, 0xFF	; 255
    49a8:	92 07       	cpc	r25, r18
    49aa:	2f ef       	ldi	r18, 0xFF	; 255
    49ac:	a2 07       	cpc	r26, r18
    49ae:	2f ef       	ldi	r18, 0xFF	; 255
    49b0:	b2 07       	cpc	r27, r18
    49b2:	0c f4       	brge	.+2      	; 0x49b6 <HLCD_vPrintNumber+0xd6>
    49b4:	8a c0       	rjmp	.+276    	; 0x4aca <HLCD_vPrintNumber+0x1ea>
    49b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    49b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    49ba:	ac 85       	ldd	r26, Y+12	; 0x0c
    49bc:	bd 85       	ldd	r27, Y+13	; 0x0d
    49be:	2a e0       	ldi	r18, 0x0A	; 10
    49c0:	30 e0       	ldi	r19, 0x00	; 0
    49c2:	40 e0       	ldi	r20, 0x00	; 0
    49c4:	50 e0       	ldi	r21, 0x00	; 0
    49c6:	bc 01       	movw	r22, r24
    49c8:	cd 01       	movw	r24, r26
    49ca:	0e 94 36 31 	call	0x626c	; 0x626c <__divmodsi4>
    49ce:	dc 01       	movw	r26, r24
    49d0:	cb 01       	movw	r24, r22
    49d2:	bb 23       	and	r27, r27
    49d4:	0c f4       	brge	.+2      	; 0x49d8 <HLCD_vPrintNumber+0xf8>
    49d6:	79 c0       	rjmp	.+242    	; 0x4aca <HLCD_vPrintNumber+0x1ea>
    49d8:	5c c0       	rjmp	.+184    	; 0x4a92 <HLCD_vPrintNumber+0x1b2>
	{
		while(L_u8power>1)
		{
			if((A_s32Number>=(L_u8power)))
    49da:	2a 85       	ldd	r18, Y+10	; 0x0a
    49dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    49de:	4c 85       	ldd	r20, Y+12	; 0x0c
    49e0:	5d 85       	ldd	r21, Y+13	; 0x0d
    49e2:	8d 81       	ldd	r24, Y+5	; 0x05
    49e4:	9e 81       	ldd	r25, Y+6	; 0x06
    49e6:	af 81       	ldd	r26, Y+7	; 0x07
    49e8:	b8 85       	ldd	r27, Y+8	; 0x08
    49ea:	28 17       	cp	r18, r24
    49ec:	39 07       	cpc	r19, r25
    49ee:	4a 07       	cpc	r20, r26
    49f0:	5b 07       	cpc	r21, r27
    49f2:	90 f0       	brcs	.+36     	; 0x4a18 <HLCD_vPrintNumber+0x138>
			{
			HLCD_vSendChar(48+(A_s32Number/(L_u8power)));}
    49f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    49f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    49f8:	ac 85       	ldd	r26, Y+12	; 0x0c
    49fa:	bd 85       	ldd	r27, Y+13	; 0x0d
    49fc:	2d 81       	ldd	r18, Y+5	; 0x05
    49fe:	3e 81       	ldd	r19, Y+6	; 0x06
    4a00:	4f 81       	ldd	r20, Y+7	; 0x07
    4a02:	58 85       	ldd	r21, Y+8	; 0x08
    4a04:	bc 01       	movw	r22, r24
    4a06:	cd 01       	movw	r24, r26
    4a08:	0e 94 14 31 	call	0x6228	; 0x6228 <__udivmodsi4>
    4a0c:	da 01       	movw	r26, r20
    4a0e:	c9 01       	movw	r24, r18
    4a10:	80 5d       	subi	r24, 0xD0	; 208
    4a12:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <HLCD_vSendChar>
    4a16:	03 c0       	rjmp	.+6      	; 0x4a1e <HLCD_vPrintNumber+0x13e>
			else
				HLCD_vSendChar(48+0);
    4a18:	80 e3       	ldi	r24, 0x30	; 48
    4a1a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <HLCD_vSendChar>
			A_s32Number-=(A_s32Number/(L_u8power))*(L_u8power);
    4a1e:	ea 84       	ldd	r14, Y+10	; 0x0a
    4a20:	fb 84       	ldd	r15, Y+11	; 0x0b
    4a22:	0c 85       	ldd	r16, Y+12	; 0x0c
    4a24:	1d 85       	ldd	r17, Y+13	; 0x0d
    4a26:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a28:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a2a:	ac 85       	ldd	r26, Y+12	; 0x0c
    4a2c:	bd 85       	ldd	r27, Y+13	; 0x0d
    4a2e:	2d 81       	ldd	r18, Y+5	; 0x05
    4a30:	3e 81       	ldd	r19, Y+6	; 0x06
    4a32:	4f 81       	ldd	r20, Y+7	; 0x07
    4a34:	58 85       	ldd	r21, Y+8	; 0x08
    4a36:	bc 01       	movw	r22, r24
    4a38:	cd 01       	movw	r24, r26
    4a3a:	0e 94 14 31 	call	0x6228	; 0x6228 <__udivmodsi4>
    4a3e:	da 01       	movw	r26, r20
    4a40:	c9 01       	movw	r24, r18
    4a42:	2d 81       	ldd	r18, Y+5	; 0x05
    4a44:	3e 81       	ldd	r19, Y+6	; 0x06
    4a46:	4f 81       	ldd	r20, Y+7	; 0x07
    4a48:	58 85       	ldd	r21, Y+8	; 0x08
    4a4a:	bc 01       	movw	r22, r24
    4a4c:	cd 01       	movw	r24, r26
    4a4e:	0e 94 ce 30 	call	0x619c	; 0x619c <__mulsi3>
    4a52:	dc 01       	movw	r26, r24
    4a54:	cb 01       	movw	r24, r22
    4a56:	a8 01       	movw	r20, r16
    4a58:	97 01       	movw	r18, r14
    4a5a:	28 1b       	sub	r18, r24
    4a5c:	39 0b       	sbc	r19, r25
    4a5e:	4a 0b       	sbc	r20, r26
    4a60:	5b 0b       	sbc	r21, r27
    4a62:	da 01       	movw	r26, r20
    4a64:	c9 01       	movw	r24, r18
    4a66:	8a 87       	std	Y+10, r24	; 0x0a
    4a68:	9b 87       	std	Y+11, r25	; 0x0b
    4a6a:	ac 87       	std	Y+12, r26	; 0x0c
    4a6c:	bd 87       	std	Y+13, r27	; 0x0d
			L_u8power/=10;
    4a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a70:	9e 81       	ldd	r25, Y+6	; 0x06
    4a72:	af 81       	ldd	r26, Y+7	; 0x07
    4a74:	b8 85       	ldd	r27, Y+8	; 0x08
    4a76:	2a e0       	ldi	r18, 0x0A	; 10
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e0       	ldi	r20, 0x00	; 0
    4a7c:	50 e0       	ldi	r21, 0x00	; 0
    4a7e:	bc 01       	movw	r22, r24
    4a80:	cd 01       	movw	r24, r26
    4a82:	0e 94 14 31 	call	0x6228	; 0x6228 <__udivmodsi4>
    4a86:	da 01       	movw	r26, r20
    4a88:	c9 01       	movw	r24, r18
    4a8a:	8d 83       	std	Y+5, r24	; 0x05
    4a8c:	9e 83       	std	Y+6, r25	; 0x06
    4a8e:	af 83       	std	Y+7, r26	; 0x07
    4a90:	b8 87       	std	Y+8, r27	; 0x08
	{
		L_u8power*=10;
	}
	if((A_s32Number/10)>=0&&(A_s32Number%10)>=0)
	{
		while(L_u8power>1)
    4a92:	8d 81       	ldd	r24, Y+5	; 0x05
    4a94:	9e 81       	ldd	r25, Y+6	; 0x06
    4a96:	af 81       	ldd	r26, Y+7	; 0x07
    4a98:	b8 85       	ldd	r27, Y+8	; 0x08
    4a9a:	82 30       	cpi	r24, 0x02	; 2
    4a9c:	91 05       	cpc	r25, r1
    4a9e:	a1 05       	cpc	r26, r1
    4aa0:	b1 05       	cpc	r27, r1
    4aa2:	08 f0       	brcs	.+2      	; 0x4aa6 <HLCD_vPrintNumber+0x1c6>
    4aa4:	9a cf       	rjmp	.-204    	; 0x49da <HLCD_vPrintNumber+0xfa>
				HLCD_vSendChar(48+0);
			A_s32Number-=(A_s32Number/(L_u8power))*(L_u8power);
			L_u8power/=10;

		}
		HLCD_vSendChar(48+(A_s32Number%10));
    4aa6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4aa8:	9b 85       	ldd	r25, Y+11	; 0x0b
    4aaa:	ac 85       	ldd	r26, Y+12	; 0x0c
    4aac:	bd 85       	ldd	r27, Y+13	; 0x0d
    4aae:	2a e0       	ldi	r18, 0x0A	; 10
    4ab0:	30 e0       	ldi	r19, 0x00	; 0
    4ab2:	40 e0       	ldi	r20, 0x00	; 0
    4ab4:	50 e0       	ldi	r21, 0x00	; 0
    4ab6:	bc 01       	movw	r22, r24
    4ab8:	cd 01       	movw	r24, r26
    4aba:	0e 94 36 31 	call	0x626c	; 0x626c <__divmodsi4>
    4abe:	dc 01       	movw	r26, r24
    4ac0:	cb 01       	movw	r24, r22
    4ac2:	80 5d       	subi	r24, 0xD0	; 208
    4ac4:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <HLCD_vSendChar>
    4ac8:	89 c0       	rjmp	.+274    	; 0x4bdc <HLCD_vPrintNumber+0x2fc>

	}

	else
	{
		HLCD_vSendChar('-');
    4aca:	8d e2       	ldi	r24, 0x2D	; 45
    4acc:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <HLCD_vSendChar>
		A_s32Number*=-1;
    4ad0:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ad2:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ad4:	ac 85       	ldd	r26, Y+12	; 0x0c
    4ad6:	bd 85       	ldd	r27, Y+13	; 0x0d
    4ad8:	b0 95       	com	r27
    4ada:	a0 95       	com	r26
    4adc:	90 95       	com	r25
    4ade:	81 95       	neg	r24
    4ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ae2:	af 4f       	sbci	r26, 0xFF	; 255
    4ae4:	bf 4f       	sbci	r27, 0xFF	; 255
    4ae6:	8a 87       	std	Y+10, r24	; 0x0a
    4ae8:	9b 87       	std	Y+11, r25	; 0x0b
    4aea:	ac 87       	std	Y+12, r26	; 0x0c
    4aec:	bd 87       	std	Y+13, r27	; 0x0d
    4aee:	5c c0       	rjmp	.+184    	; 0x4ba8 <HLCD_vPrintNumber+0x2c8>
		while(L_u8power!=0)
		{
			if((A_s32Number>=(L_u8power)))
    4af0:	2a 85       	ldd	r18, Y+10	; 0x0a
    4af2:	3b 85       	ldd	r19, Y+11	; 0x0b
    4af4:	4c 85       	ldd	r20, Y+12	; 0x0c
    4af6:	5d 85       	ldd	r21, Y+13	; 0x0d
    4af8:	8d 81       	ldd	r24, Y+5	; 0x05
    4afa:	9e 81       	ldd	r25, Y+6	; 0x06
    4afc:	af 81       	ldd	r26, Y+7	; 0x07
    4afe:	b8 85       	ldd	r27, Y+8	; 0x08
    4b00:	28 17       	cp	r18, r24
    4b02:	39 07       	cpc	r19, r25
    4b04:	4a 07       	cpc	r20, r26
    4b06:	5b 07       	cpc	r21, r27
    4b08:	90 f0       	brcs	.+36     	; 0x4b2e <HLCD_vPrintNumber+0x24e>
						{
						HLCD_vSendChar(48+(A_s32Number/(L_u8power)));}
    4b0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b0e:	ac 85       	ldd	r26, Y+12	; 0x0c
    4b10:	bd 85       	ldd	r27, Y+13	; 0x0d
    4b12:	2d 81       	ldd	r18, Y+5	; 0x05
    4b14:	3e 81       	ldd	r19, Y+6	; 0x06
    4b16:	4f 81       	ldd	r20, Y+7	; 0x07
    4b18:	58 85       	ldd	r21, Y+8	; 0x08
    4b1a:	bc 01       	movw	r22, r24
    4b1c:	cd 01       	movw	r24, r26
    4b1e:	0e 94 14 31 	call	0x6228	; 0x6228 <__udivmodsi4>
    4b22:	da 01       	movw	r26, r20
    4b24:	c9 01       	movw	r24, r18
    4b26:	80 5d       	subi	r24, 0xD0	; 208
    4b28:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <HLCD_vSendChar>
    4b2c:	03 c0       	rjmp	.+6      	; 0x4b34 <HLCD_vPrintNumber+0x254>
						else
							HLCD_vSendChar(48+0);
    4b2e:	80 e3       	ldi	r24, 0x30	; 48
    4b30:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <HLCD_vSendChar>
			A_s32Number-=(A_s32Number/(L_u8power))*(L_u8power);
    4b34:	ea 84       	ldd	r14, Y+10	; 0x0a
    4b36:	fb 84       	ldd	r15, Y+11	; 0x0b
    4b38:	0c 85       	ldd	r16, Y+12	; 0x0c
    4b3a:	1d 85       	ldd	r17, Y+13	; 0x0d
    4b3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b40:	ac 85       	ldd	r26, Y+12	; 0x0c
    4b42:	bd 85       	ldd	r27, Y+13	; 0x0d
    4b44:	2d 81       	ldd	r18, Y+5	; 0x05
    4b46:	3e 81       	ldd	r19, Y+6	; 0x06
    4b48:	4f 81       	ldd	r20, Y+7	; 0x07
    4b4a:	58 85       	ldd	r21, Y+8	; 0x08
    4b4c:	bc 01       	movw	r22, r24
    4b4e:	cd 01       	movw	r24, r26
    4b50:	0e 94 14 31 	call	0x6228	; 0x6228 <__udivmodsi4>
    4b54:	da 01       	movw	r26, r20
    4b56:	c9 01       	movw	r24, r18
    4b58:	2d 81       	ldd	r18, Y+5	; 0x05
    4b5a:	3e 81       	ldd	r19, Y+6	; 0x06
    4b5c:	4f 81       	ldd	r20, Y+7	; 0x07
    4b5e:	58 85       	ldd	r21, Y+8	; 0x08
    4b60:	bc 01       	movw	r22, r24
    4b62:	cd 01       	movw	r24, r26
    4b64:	0e 94 ce 30 	call	0x619c	; 0x619c <__mulsi3>
    4b68:	dc 01       	movw	r26, r24
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	a8 01       	movw	r20, r16
    4b6e:	97 01       	movw	r18, r14
    4b70:	28 1b       	sub	r18, r24
    4b72:	39 0b       	sbc	r19, r25
    4b74:	4a 0b       	sbc	r20, r26
    4b76:	5b 0b       	sbc	r21, r27
    4b78:	da 01       	movw	r26, r20
    4b7a:	c9 01       	movw	r24, r18
    4b7c:	8a 87       	std	Y+10, r24	; 0x0a
    4b7e:	9b 87       	std	Y+11, r25	; 0x0b
    4b80:	ac 87       	std	Y+12, r26	; 0x0c
    4b82:	bd 87       	std	Y+13, r27	; 0x0d
			L_u8power/=10;
    4b84:	8d 81       	ldd	r24, Y+5	; 0x05
    4b86:	9e 81       	ldd	r25, Y+6	; 0x06
    4b88:	af 81       	ldd	r26, Y+7	; 0x07
    4b8a:	b8 85       	ldd	r27, Y+8	; 0x08
    4b8c:	2a e0       	ldi	r18, 0x0A	; 10
    4b8e:	30 e0       	ldi	r19, 0x00	; 0
    4b90:	40 e0       	ldi	r20, 0x00	; 0
    4b92:	50 e0       	ldi	r21, 0x00	; 0
    4b94:	bc 01       	movw	r22, r24
    4b96:	cd 01       	movw	r24, r26
    4b98:	0e 94 14 31 	call	0x6228	; 0x6228 <__udivmodsi4>
    4b9c:	da 01       	movw	r26, r20
    4b9e:	c9 01       	movw	r24, r18
    4ba0:	8d 83       	std	Y+5, r24	; 0x05
    4ba2:	9e 83       	std	Y+6, r25	; 0x06
    4ba4:	af 83       	std	Y+7, r26	; 0x07
    4ba6:	b8 87       	std	Y+8, r27	; 0x08

	else
	{
		HLCD_vSendChar('-');
		A_s32Number*=-1;
		while(L_u8power!=0)
    4ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    4baa:	9e 81       	ldd	r25, Y+6	; 0x06
    4bac:	af 81       	ldd	r26, Y+7	; 0x07
    4bae:	b8 85       	ldd	r27, Y+8	; 0x08
    4bb0:	00 97       	sbiw	r24, 0x00	; 0
    4bb2:	a1 05       	cpc	r26, r1
    4bb4:	b1 05       	cpc	r27, r1
    4bb6:	09 f0       	breq	.+2      	; 0x4bba <HLCD_vPrintNumber+0x2da>
    4bb8:	9b cf       	rjmp	.-202    	; 0x4af0 <HLCD_vPrintNumber+0x210>
							HLCD_vSendChar(48+0);
			A_s32Number-=(A_s32Number/(L_u8power))*(L_u8power);
			L_u8power/=10;

		}
		HLCD_vSendChar(48+(A_s32Number%10));
    4bba:	8a 85       	ldd	r24, Y+10	; 0x0a
    4bbc:	9b 85       	ldd	r25, Y+11	; 0x0b
    4bbe:	ac 85       	ldd	r26, Y+12	; 0x0c
    4bc0:	bd 85       	ldd	r27, Y+13	; 0x0d
    4bc2:	2a e0       	ldi	r18, 0x0A	; 10
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	40 e0       	ldi	r20, 0x00	; 0
    4bc8:	50 e0       	ldi	r21, 0x00	; 0
    4bca:	bc 01       	movw	r22, r24
    4bcc:	cd 01       	movw	r24, r26
    4bce:	0e 94 36 31 	call	0x626c	; 0x626c <__divmodsi4>
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	cb 01       	movw	r24, r22
    4bd6:	80 5d       	subi	r24, 0xD0	; 208
    4bd8:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <HLCD_vSendChar>


	}
}
    4bdc:	2d 96       	adiw	r28, 0x0d	; 13
    4bde:	0f b6       	in	r0, 0x3f	; 63
    4be0:	f8 94       	cli
    4be2:	de bf       	out	0x3e, r29	; 62
    4be4:	0f be       	out	0x3f, r0	; 63
    4be6:	cd bf       	out	0x3d, r28	; 61
    4be8:	cf 91       	pop	r28
    4bea:	df 91       	pop	r29
    4bec:	1f 91       	pop	r17
    4bee:	0f 91       	pop	r16
    4bf0:	ff 90       	pop	r15
    4bf2:	ef 90       	pop	r14
    4bf4:	08 95       	ret

00004bf6 <HLCD_vSetCursorPosition>:
void HLCD_vSetCursorPosition(u08 A_u8linePos,u08 A_u8lineNum)
{
    4bf6:	df 93       	push	r29
    4bf8:	cf 93       	push	r28
    4bfa:	00 d0       	rcall	.+0      	; 0x4bfc <HLCD_vSetCursorPosition+0x6>
    4bfc:	00 d0       	rcall	.+0      	; 0x4bfe <HLCD_vSetCursorPosition+0x8>
    4bfe:	cd b7       	in	r28, 0x3d	; 61
    4c00:	de b7       	in	r29, 0x3e	; 62
    4c02:	89 83       	std	Y+1, r24	; 0x01
    4c04:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8linePos)
    4c06:	89 81       	ldd	r24, Y+1	; 0x01
    4c08:	28 2f       	mov	r18, r24
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	3c 83       	std	Y+4, r19	; 0x04
    4c0e:	2b 83       	std	Y+3, r18	; 0x03
    4c10:	8b 81       	ldd	r24, Y+3	; 0x03
    4c12:	9c 81       	ldd	r25, Y+4	; 0x04
    4c14:	81 30       	cpi	r24, 0x01	; 1
    4c16:	91 05       	cpc	r25, r1
    4c18:	d1 f0       	breq	.+52     	; 0x4c4e <HLCD_vSetCursorPosition+0x58>
    4c1a:	2b 81       	ldd	r18, Y+3	; 0x03
    4c1c:	3c 81       	ldd	r19, Y+4	; 0x04
    4c1e:	22 30       	cpi	r18, 0x02	; 2
    4c20:	31 05       	cpc	r19, r1
    4c22:	2c f4       	brge	.+10     	; 0x4c2e <HLCD_vSetCursorPosition+0x38>
    4c24:	8b 81       	ldd	r24, Y+3	; 0x03
    4c26:	9c 81       	ldd	r25, Y+4	; 0x04
    4c28:	00 97       	sbiw	r24, 0x00	; 0
    4c2a:	61 f0       	breq	.+24     	; 0x4c44 <HLCD_vSetCursorPosition+0x4e>
    4c2c:	21 c0       	rjmp	.+66     	; 0x4c70 <HLCD_vSetCursorPosition+0x7a>
    4c2e:	2b 81       	ldd	r18, Y+3	; 0x03
    4c30:	3c 81       	ldd	r19, Y+4	; 0x04
    4c32:	22 30       	cpi	r18, 0x02	; 2
    4c34:	31 05       	cpc	r19, r1
    4c36:	89 f0       	breq	.+34     	; 0x4c5a <HLCD_vSetCursorPosition+0x64>
    4c38:	8b 81       	ldd	r24, Y+3	; 0x03
    4c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c3c:	83 30       	cpi	r24, 0x03	; 3
    4c3e:	91 05       	cpc	r25, r1
    4c40:	91 f0       	breq	.+36     	; 0x4c66 <HLCD_vSetCursorPosition+0x70>
    4c42:	16 c0       	rjmp	.+44     	; 0x4c70 <HLCD_vSetCursorPosition+0x7a>
	{
	case 0:
		HLCD_vSendCommand((A_u8lineNum+0)|0x80);
    4c44:	8a 81       	ldd	r24, Y+2	; 0x02
    4c46:	80 68       	ori	r24, 0x80	; 128
    4c48:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_vSendCommand>
    4c4c:	11 c0       	rjmp	.+34     	; 0x4c70 <HLCD_vSetCursorPosition+0x7a>
		break;
	case 1:
		HLCD_vSendCommand((A_u8lineNum+0x40)|0x80);
    4c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c50:	80 5c       	subi	r24, 0xC0	; 192
    4c52:	80 68       	ori	r24, 0x80	; 128
    4c54:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_vSendCommand>
    4c58:	0b c0       	rjmp	.+22     	; 0x4c70 <HLCD_vSetCursorPosition+0x7a>
		break;
	case 2:
		HLCD_vSendCommand((A_u8lineNum+0x14)|0x80);
    4c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c5c:	8c 5e       	subi	r24, 0xEC	; 236
    4c5e:	80 68       	ori	r24, 0x80	; 128
    4c60:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_vSendCommand>
    4c64:	05 c0       	rjmp	.+10     	; 0x4c70 <HLCD_vSetCursorPosition+0x7a>
		break;
	case 3:
		HLCD_vSendCommand((A_u8lineNum+0x54)|0x80);
    4c66:	8a 81       	ldd	r24, Y+2	; 0x02
    4c68:	8c 5a       	subi	r24, 0xAC	; 172
    4c6a:	80 68       	ori	r24, 0x80	; 128
    4c6c:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_vSendCommand>
		break;



	}
}
    4c70:	0f 90       	pop	r0
    4c72:	0f 90       	pop	r0
    4c74:	0f 90       	pop	r0
    4c76:	0f 90       	pop	r0
    4c78:	cf 91       	pop	r28
    4c7a:	df 91       	pop	r29
    4c7c:	08 95       	ret

00004c7e <HLCD_vSaveCustomChar>:
void HLCD_vSaveCustomChar(u08 A_u8Cgram_index,u08 A_u8CharData[])
{
    4c7e:	df 93       	push	r29
    4c80:	cf 93       	push	r28
    4c82:	00 d0       	rcall	.+0      	; 0x4c84 <HLCD_vSaveCustomChar+0x6>
    4c84:	00 d0       	rcall	.+0      	; 0x4c86 <HLCD_vSaveCustomChar+0x8>
    4c86:	cd b7       	in	r28, 0x3d	; 61
    4c88:	de b7       	in	r29, 0x3e	; 62
    4c8a:	8a 83       	std	Y+2, r24	; 0x02
    4c8c:	7c 83       	std	Y+4, r23	; 0x04
    4c8e:	6b 83       	std	Y+3, r22	; 0x03
	HLCD_vSendCommand(0b01000000+(A_u8Cgram_index*8));
    4c90:	8a 81       	ldd	r24, Y+2	; 0x02
    4c92:	88 2f       	mov	r24, r24
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	08 96       	adiw	r24, 0x08	; 8
    4c98:	88 0f       	add	r24, r24
    4c9a:	99 1f       	adc	r25, r25
    4c9c:	88 0f       	add	r24, r24
    4c9e:	99 1f       	adc	r25, r25
    4ca0:	88 0f       	add	r24, r24
    4ca2:	99 1f       	adc	r25, r25
    4ca4:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_vSendCommand>
	for(u08 L_u8Idx=0;L_u8Idx<8;L_u8Idx++)
    4ca8:	19 82       	std	Y+1, r1	; 0x01
    4caa:	0e c0       	rjmp	.+28     	; 0x4cc8 <HLCD_vSaveCustomChar+0x4a>
	{
		HLCD_vSendChar(A_u8CharData[L_u8Idx]);
    4cac:	89 81       	ldd	r24, Y+1	; 0x01
    4cae:	28 2f       	mov	r18, r24
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    4cb6:	fc 01       	movw	r30, r24
    4cb8:	e2 0f       	add	r30, r18
    4cba:	f3 1f       	adc	r31, r19
    4cbc:	80 81       	ld	r24, Z
    4cbe:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <HLCD_vSendChar>
	}
}
void HLCD_vSaveCustomChar(u08 A_u8Cgram_index,u08 A_u8CharData[])
{
	HLCD_vSendCommand(0b01000000+(A_u8Cgram_index*8));
	for(u08 L_u8Idx=0;L_u8Idx<8;L_u8Idx++)
    4cc2:	89 81       	ldd	r24, Y+1	; 0x01
    4cc4:	8f 5f       	subi	r24, 0xFF	; 255
    4cc6:	89 83       	std	Y+1, r24	; 0x01
    4cc8:	89 81       	ldd	r24, Y+1	; 0x01
    4cca:	88 30       	cpi	r24, 0x08	; 8
    4ccc:	78 f3       	brcs	.-34     	; 0x4cac <HLCD_vSaveCustomChar+0x2e>
	{
		HLCD_vSendChar(A_u8CharData[L_u8Idx]);
	}
	HLCD_vSendCommand(0x80);
    4cce:	80 e8       	ldi	r24, 0x80	; 128
    4cd0:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_vSendCommand>
}
    4cd4:	0f 90       	pop	r0
    4cd6:	0f 90       	pop	r0
    4cd8:	0f 90       	pop	r0
    4cda:	0f 90       	pop	r0
    4cdc:	cf 91       	pop	r28
    4cde:	df 91       	pop	r29
    4ce0:	08 95       	ret

00004ce2 <expanderWrite>:
void expanderWrite(u08 data)
{
    4ce2:	df 93       	push	r29
    4ce4:	cf 93       	push	r28
    4ce6:	0f 92       	push	r0
    4ce8:	cd b7       	in	r28, 0x3d	; 61
    4cea:	de b7       	in	r29, 0x3e	; 62
    4cec:	89 83       	std	Y+1, r24	; 0x01
	TWI_u08SendStartCondition();
    4cee:	0e 94 61 06 	call	0xcc2	; 0xcc2 <TWI_u08SendStartCondition>
	TWI_u08SendSlaveAddressRW(0x27,TWI_WRITE);
    4cf2:	87 e2       	ldi	r24, 0x27	; 39
    4cf4:	60 e0       	ldi	r22, 0x00	; 0
    4cf6:	0e 94 89 06 	call	0xd12	; 0xd12 <TWI_u08SendSlaveAddressRW>
	TWI_u08SendByte((int)(data) | 0x08);
    4cfa:	89 81       	ldd	r24, Y+1	; 0x01
    4cfc:	88 60       	ori	r24, 0x08	; 8
    4cfe:	0e 94 b4 06 	call	0xd68	; 0xd68 <TWI_u08SendByte>
	TWI_u08SendStopCondition();
    4d02:	0e 94 15 07 	call	0xe2a	; 0xe2a <TWI_u08SendStopCondition>
}
    4d06:	0f 90       	pop	r0
    4d08:	cf 91       	pop	r28
    4d0a:	df 91       	pop	r29
    4d0c:	08 95       	ret

00004d0e <write4bits>:
void write4bits(u08 value)
{
    4d0e:	df 93       	push	r29
    4d10:	cf 93       	push	r28
    4d12:	0f 92       	push	r0
    4d14:	cd b7       	in	r28, 0x3d	; 61
    4d16:	de b7       	in	r29, 0x3e	; 62
    4d18:	89 83       	std	Y+1, r24	; 0x01
	expanderWrite(value);
    4d1a:	89 81       	ldd	r24, Y+1	; 0x01
    4d1c:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <expanderWrite>
	pulseEnable(value);
    4d20:	89 81       	ldd	r24, Y+1	; 0x01
    4d22:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <pulseEnable>
}
    4d26:	0f 90       	pop	r0
    4d28:	cf 91       	pop	r28
    4d2a:	df 91       	pop	r29
    4d2c:	08 95       	ret

00004d2e <send>:
void send(u08 value, u08 mode)
{
    4d2e:	df 93       	push	r29
    4d30:	cf 93       	push	r28
    4d32:	00 d0       	rcall	.+0      	; 0x4d34 <send+0x6>
    4d34:	00 d0       	rcall	.+0      	; 0x4d36 <send+0x8>
    4d36:	cd b7       	in	r28, 0x3d	; 61
    4d38:	de b7       	in	r29, 0x3e	; 62
    4d3a:	8b 83       	std	Y+3, r24	; 0x03
    4d3c:	6c 83       	std	Y+4, r22	; 0x04
	u08 highnib=value&0xf0;
    4d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d40:	80 7f       	andi	r24, 0xF0	; 240
    4d42:	8a 83       	std	Y+2, r24	; 0x02
	u08 lownib=(value<<4)&0xf0;
    4d44:	8b 81       	ldd	r24, Y+3	; 0x03
    4d46:	88 2f       	mov	r24, r24
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	82 95       	swap	r24
    4d4c:	92 95       	swap	r25
    4d4e:	90 7f       	andi	r25, 0xF0	; 240
    4d50:	98 27       	eor	r25, r24
    4d52:	80 7f       	andi	r24, 0xF0	; 240
    4d54:	98 27       	eor	r25, r24
    4d56:	89 83       	std	Y+1, r24	; 0x01
    write4bits((highnib)|mode);
    4d58:	9a 81       	ldd	r25, Y+2	; 0x02
    4d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    4d5c:	89 2b       	or	r24, r25
    4d5e:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <write4bits>
	write4bits((lownib)|mode);
    4d62:	99 81       	ldd	r25, Y+1	; 0x01
    4d64:	8c 81       	ldd	r24, Y+4	; 0x04
    4d66:	89 2b       	or	r24, r25
    4d68:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <write4bits>
}
    4d6c:	0f 90       	pop	r0
    4d6e:	0f 90       	pop	r0
    4d70:	0f 90       	pop	r0
    4d72:	0f 90       	pop	r0
    4d74:	cf 91       	pop	r28
    4d76:	df 91       	pop	r29
    4d78:	08 95       	ret

00004d7a <command>:

void command(u08 value)
{
    4d7a:	df 93       	push	r29
    4d7c:	cf 93       	push	r28
    4d7e:	0f 92       	push	r0
    4d80:	cd b7       	in	r28, 0x3d	; 61
    4d82:	de b7       	in	r29, 0x3e	; 62
    4d84:	89 83       	std	Y+1, r24	; 0x01
	send(value, 0);
    4d86:	89 81       	ldd	r24, Y+1	; 0x01
    4d88:	60 e0       	ldi	r22, 0x00	; 0
    4d8a:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <send>
}
    4d8e:	0f 90       	pop	r0
    4d90:	cf 91       	pop	r28
    4d92:	df 91       	pop	r29
    4d94:	08 95       	ret

00004d96 <pulseEnable>:

void pulseEnable(u08 data)
{
    4d96:	df 93       	push	r29
    4d98:	cf 93       	push	r28
    4d9a:	cd b7       	in	r28, 0x3d	; 61
    4d9c:	de b7       	in	r29, 0x3e	; 62
    4d9e:	e1 97       	sbiw	r28, 0x31	; 49
    4da0:	0f b6       	in	r0, 0x3f	; 63
    4da2:	f8 94       	cli
    4da4:	de bf       	out	0x3e, r29	; 62
    4da6:	0f be       	out	0x3f, r0	; 63
    4da8:	cd bf       	out	0x3d, r28	; 61
    4daa:	89 ab       	std	Y+49, r24	; 0x31
	expanderWrite(data | 0x04);	// En high
    4dac:	89 a9       	ldd	r24, Y+49	; 0x31
    4dae:	84 60       	ori	r24, 0x04	; 4
    4db0:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <expanderWrite>
    4db4:	80 e0       	ldi	r24, 0x00	; 0
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	a0 e8       	ldi	r26, 0x80	; 128
    4dba:	bf e3       	ldi	r27, 0x3F	; 63
    4dbc:	8d a7       	std	Y+45, r24	; 0x2d
    4dbe:	9e a7       	std	Y+46, r25	; 0x2e
    4dc0:	af a7       	std	Y+47, r26	; 0x2f
    4dc2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4dc4:	6d a5       	ldd	r22, Y+45	; 0x2d
    4dc6:	7e a5       	ldd	r23, Y+46	; 0x2e
    4dc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4dca:	98 a9       	ldd	r25, Y+48	; 0x30
    4dcc:	2b ea       	ldi	r18, 0xAB	; 171
    4dce:	3a ea       	ldi	r19, 0xAA	; 170
    4dd0:	4a e2       	ldi	r20, 0x2A	; 42
    4dd2:	50 e4       	ldi	r21, 0x40	; 64
    4dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dd8:	dc 01       	movw	r26, r24
    4dda:	cb 01       	movw	r24, r22
    4ddc:	89 a7       	std	Y+41, r24	; 0x29
    4dde:	9a a7       	std	Y+42, r25	; 0x2a
    4de0:	ab a7       	std	Y+43, r26	; 0x2b
    4de2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    4de4:	69 a5       	ldd	r22, Y+41	; 0x29
    4de6:	7a a5       	ldd	r23, Y+42	; 0x2a
    4de8:	8b a5       	ldd	r24, Y+43	; 0x2b
    4dea:	9c a5       	ldd	r25, Y+44	; 0x2c
    4dec:	20 e0       	ldi	r18, 0x00	; 0
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	40 e8       	ldi	r20, 0x80	; 128
    4df2:	5f e3       	ldi	r21, 0x3F	; 63
    4df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4df8:	88 23       	and	r24, r24
    4dfa:	1c f4       	brge	.+6      	; 0x4e02 <pulseEnable+0x6c>
		__ticks = 1;
    4dfc:	81 e0       	ldi	r24, 0x01	; 1
    4dfe:	88 a7       	std	Y+40, r24	; 0x28
    4e00:	91 c0       	rjmp	.+290    	; 0x4f24 <pulseEnable+0x18e>
	else if (__tmp > 255)
    4e02:	69 a5       	ldd	r22, Y+41	; 0x29
    4e04:	7a a5       	ldd	r23, Y+42	; 0x2a
    4e06:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e08:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e0a:	20 e0       	ldi	r18, 0x00	; 0
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
    4e0e:	4f e7       	ldi	r20, 0x7F	; 127
    4e10:	53 e4       	ldi	r21, 0x43	; 67
    4e12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e16:	18 16       	cp	r1, r24
    4e18:	0c f0       	brlt	.+2      	; 0x4e1c <pulseEnable+0x86>
    4e1a:	7b c0       	rjmp	.+246    	; 0x4f12 <pulseEnable+0x17c>
	{
		_delay_ms(__us / 1000.0);
    4e1c:	6d a5       	ldd	r22, Y+45	; 0x2d
    4e1e:	7e a5       	ldd	r23, Y+46	; 0x2e
    4e20:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e22:	98 a9       	ldd	r25, Y+48	; 0x30
    4e24:	20 e0       	ldi	r18, 0x00	; 0
    4e26:	30 e0       	ldi	r19, 0x00	; 0
    4e28:	4a e7       	ldi	r20, 0x7A	; 122
    4e2a:	54 e4       	ldi	r21, 0x44	; 68
    4e2c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4e30:	dc 01       	movw	r26, r24
    4e32:	cb 01       	movw	r24, r22
    4e34:	8c a3       	std	Y+36, r24	; 0x24
    4e36:	9d a3       	std	Y+37, r25	; 0x25
    4e38:	ae a3       	std	Y+38, r26	; 0x26
    4e3a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e3c:	6c a1       	ldd	r22, Y+36	; 0x24
    4e3e:	7d a1       	ldd	r23, Y+37	; 0x25
    4e40:	8e a1       	ldd	r24, Y+38	; 0x26
    4e42:	9f a1       	ldd	r25, Y+39	; 0x27
    4e44:	20 e0       	ldi	r18, 0x00	; 0
    4e46:	30 e0       	ldi	r19, 0x00	; 0
    4e48:	4a ef       	ldi	r20, 0xFA	; 250
    4e4a:	54 e4       	ldi	r21, 0x44	; 68
    4e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e50:	dc 01       	movw	r26, r24
    4e52:	cb 01       	movw	r24, r22
    4e54:	88 a3       	std	Y+32, r24	; 0x20
    4e56:	99 a3       	std	Y+33, r25	; 0x21
    4e58:	aa a3       	std	Y+34, r26	; 0x22
    4e5a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    4e5c:	68 a1       	ldd	r22, Y+32	; 0x20
    4e5e:	79 a1       	ldd	r23, Y+33	; 0x21
    4e60:	8a a1       	ldd	r24, Y+34	; 0x22
    4e62:	9b a1       	ldd	r25, Y+35	; 0x23
    4e64:	20 e0       	ldi	r18, 0x00	; 0
    4e66:	30 e0       	ldi	r19, 0x00	; 0
    4e68:	40 e8       	ldi	r20, 0x80	; 128
    4e6a:	5f e3       	ldi	r21, 0x3F	; 63
    4e6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e70:	88 23       	and	r24, r24
    4e72:	2c f4       	brge	.+10     	; 0x4e7e <pulseEnable+0xe8>
		__ticks = 1;
    4e74:	81 e0       	ldi	r24, 0x01	; 1
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	9f 8f       	std	Y+31, r25	; 0x1f
    4e7a:	8e 8f       	std	Y+30, r24	; 0x1e
    4e7c:	3f c0       	rjmp	.+126    	; 0x4efc <pulseEnable+0x166>
	else if (__tmp > 65535)
    4e7e:	68 a1       	ldd	r22, Y+32	; 0x20
    4e80:	79 a1       	ldd	r23, Y+33	; 0x21
    4e82:	8a a1       	ldd	r24, Y+34	; 0x22
    4e84:	9b a1       	ldd	r25, Y+35	; 0x23
    4e86:	20 e0       	ldi	r18, 0x00	; 0
    4e88:	3f ef       	ldi	r19, 0xFF	; 255
    4e8a:	4f e7       	ldi	r20, 0x7F	; 127
    4e8c:	57 e4       	ldi	r21, 0x47	; 71
    4e8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e92:	18 16       	cp	r1, r24
    4e94:	4c f5       	brge	.+82     	; 0x4ee8 <pulseEnable+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e96:	6c a1       	ldd	r22, Y+36	; 0x24
    4e98:	7d a1       	ldd	r23, Y+37	; 0x25
    4e9a:	8e a1       	ldd	r24, Y+38	; 0x26
    4e9c:	9f a1       	ldd	r25, Y+39	; 0x27
    4e9e:	20 e0       	ldi	r18, 0x00	; 0
    4ea0:	30 e0       	ldi	r19, 0x00	; 0
    4ea2:	40 e2       	ldi	r20, 0x20	; 32
    4ea4:	51 e4       	ldi	r21, 0x41	; 65
    4ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eaa:	dc 01       	movw	r26, r24
    4eac:	cb 01       	movw	r24, r22
    4eae:	bc 01       	movw	r22, r24
    4eb0:	cd 01       	movw	r24, r26
    4eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	cb 01       	movw	r24, r22
    4eba:	9f 8f       	std	Y+31, r25	; 0x1f
    4ebc:	8e 8f       	std	Y+30, r24	; 0x1e
    4ebe:	0f c0       	rjmp	.+30     	; 0x4ede <pulseEnable+0x148>
    4ec0:	88 ec       	ldi	r24, 0xC8	; 200
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	9d 8f       	std	Y+29, r25	; 0x1d
    4ec6:	8c 8f       	std	Y+28, r24	; 0x1c
    4ec8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4eca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4ecc:	01 97       	sbiw	r24, 0x01	; 1
    4ece:	f1 f7       	brne	.-4      	; 0x4ecc <pulseEnable+0x136>
    4ed0:	9d 8f       	std	Y+29, r25	; 0x1d
    4ed2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ed4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4ed6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4ed8:	01 97       	sbiw	r24, 0x01	; 1
    4eda:	9f 8f       	std	Y+31, r25	; 0x1f
    4edc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ede:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4ee0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4ee2:	00 97       	sbiw	r24, 0x00	; 0
    4ee4:	69 f7       	brne	.-38     	; 0x4ec0 <pulseEnable+0x12a>
    4ee6:	24 c0       	rjmp	.+72     	; 0x4f30 <pulseEnable+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ee8:	68 a1       	ldd	r22, Y+32	; 0x20
    4eea:	79 a1       	ldd	r23, Y+33	; 0x21
    4eec:	8a a1       	ldd	r24, Y+34	; 0x22
    4eee:	9b a1       	ldd	r25, Y+35	; 0x23
    4ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ef4:	dc 01       	movw	r26, r24
    4ef6:	cb 01       	movw	r24, r22
    4ef8:	9f 8f       	std	Y+31, r25	; 0x1f
    4efa:	8e 8f       	std	Y+30, r24	; 0x1e
    4efc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4efe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4f00:	9b 8f       	std	Y+27, r25	; 0x1b
    4f02:	8a 8f       	std	Y+26, r24	; 0x1a
    4f04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4f06:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4f08:	01 97       	sbiw	r24, 0x01	; 1
    4f0a:	f1 f7       	brne	.-4      	; 0x4f08 <pulseEnable+0x172>
    4f0c:	9b 8f       	std	Y+27, r25	; 0x1b
    4f0e:	8a 8f       	std	Y+26, r24	; 0x1a
    4f10:	0f c0       	rjmp	.+30     	; 0x4f30 <pulseEnable+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4f12:	69 a5       	ldd	r22, Y+41	; 0x29
    4f14:	7a a5       	ldd	r23, Y+42	; 0x2a
    4f16:	8b a5       	ldd	r24, Y+43	; 0x2b
    4f18:	9c a5       	ldd	r25, Y+44	; 0x2c
    4f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f1e:	dc 01       	movw	r26, r24
    4f20:	cb 01       	movw	r24, r22
    4f22:	88 a7       	std	Y+40, r24	; 0x28
    4f24:	88 a5       	ldd	r24, Y+40	; 0x28
    4f26:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4f28:	89 8d       	ldd	r24, Y+25	; 0x19
    4f2a:	8a 95       	dec	r24
    4f2c:	f1 f7       	brne	.-4      	; 0x4f2a <pulseEnable+0x194>
    4f2e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);		// enable pulse must be >450ns

	expanderWrite(data & ~(0x04));	// En low
    4f30:	89 a9       	ldd	r24, Y+49	; 0x31
    4f32:	8b 7f       	andi	r24, 0xFB	; 251
    4f34:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <expanderWrite>
    4f38:	80 e0       	ldi	r24, 0x00	; 0
    4f3a:	90 e0       	ldi	r25, 0x00	; 0
    4f3c:	a8 e4       	ldi	r26, 0x48	; 72
    4f3e:	b2 e4       	ldi	r27, 0x42	; 66
    4f40:	8d 8b       	std	Y+21, r24	; 0x15
    4f42:	9e 8b       	std	Y+22, r25	; 0x16
    4f44:	af 8b       	std	Y+23, r26	; 0x17
    4f46:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4f48:	6d 89       	ldd	r22, Y+21	; 0x15
    4f4a:	7e 89       	ldd	r23, Y+22	; 0x16
    4f4c:	8f 89       	ldd	r24, Y+23	; 0x17
    4f4e:	98 8d       	ldd	r25, Y+24	; 0x18
    4f50:	2b ea       	ldi	r18, 0xAB	; 171
    4f52:	3a ea       	ldi	r19, 0xAA	; 170
    4f54:	4a e2       	ldi	r20, 0x2A	; 42
    4f56:	50 e4       	ldi	r21, 0x40	; 64
    4f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f5c:	dc 01       	movw	r26, r24
    4f5e:	cb 01       	movw	r24, r22
    4f60:	89 8b       	std	Y+17, r24	; 0x11
    4f62:	9a 8b       	std	Y+18, r25	; 0x12
    4f64:	ab 8b       	std	Y+19, r26	; 0x13
    4f66:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4f68:	69 89       	ldd	r22, Y+17	; 0x11
    4f6a:	7a 89       	ldd	r23, Y+18	; 0x12
    4f6c:	8b 89       	ldd	r24, Y+19	; 0x13
    4f6e:	9c 89       	ldd	r25, Y+20	; 0x14
    4f70:	20 e0       	ldi	r18, 0x00	; 0
    4f72:	30 e0       	ldi	r19, 0x00	; 0
    4f74:	40 e8       	ldi	r20, 0x80	; 128
    4f76:	5f e3       	ldi	r21, 0x3F	; 63
    4f78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f7c:	88 23       	and	r24, r24
    4f7e:	1c f4       	brge	.+6      	; 0x4f86 <pulseEnable+0x1f0>
		__ticks = 1;
    4f80:	81 e0       	ldi	r24, 0x01	; 1
    4f82:	88 8b       	std	Y+16, r24	; 0x10
    4f84:	91 c0       	rjmp	.+290    	; 0x50a8 <pulseEnable+0x312>
	else if (__tmp > 255)
    4f86:	69 89       	ldd	r22, Y+17	; 0x11
    4f88:	7a 89       	ldd	r23, Y+18	; 0x12
    4f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    4f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    4f8e:	20 e0       	ldi	r18, 0x00	; 0
    4f90:	30 e0       	ldi	r19, 0x00	; 0
    4f92:	4f e7       	ldi	r20, 0x7F	; 127
    4f94:	53 e4       	ldi	r21, 0x43	; 67
    4f96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f9a:	18 16       	cp	r1, r24
    4f9c:	0c f0       	brlt	.+2      	; 0x4fa0 <pulseEnable+0x20a>
    4f9e:	7b c0       	rjmp	.+246    	; 0x5096 <pulseEnable+0x300>
	{
		_delay_ms(__us / 1000.0);
    4fa0:	6d 89       	ldd	r22, Y+21	; 0x15
    4fa2:	7e 89       	ldd	r23, Y+22	; 0x16
    4fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    4fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    4fa8:	20 e0       	ldi	r18, 0x00	; 0
    4faa:	30 e0       	ldi	r19, 0x00	; 0
    4fac:	4a e7       	ldi	r20, 0x7A	; 122
    4fae:	54 e4       	ldi	r21, 0x44	; 68
    4fb0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4fb4:	dc 01       	movw	r26, r24
    4fb6:	cb 01       	movw	r24, r22
    4fb8:	8c 87       	std	Y+12, r24	; 0x0c
    4fba:	9d 87       	std	Y+13, r25	; 0x0d
    4fbc:	ae 87       	std	Y+14, r26	; 0x0e
    4fbe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fc0:	6c 85       	ldd	r22, Y+12	; 0x0c
    4fc2:	7d 85       	ldd	r23, Y+13	; 0x0d
    4fc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    4fc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    4fc8:	20 e0       	ldi	r18, 0x00	; 0
    4fca:	30 e0       	ldi	r19, 0x00	; 0
    4fcc:	4a ef       	ldi	r20, 0xFA	; 250
    4fce:	54 e4       	ldi	r21, 0x44	; 68
    4fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fd4:	dc 01       	movw	r26, r24
    4fd6:	cb 01       	movw	r24, r22
    4fd8:	88 87       	std	Y+8, r24	; 0x08
    4fda:	99 87       	std	Y+9, r25	; 0x09
    4fdc:	aa 87       	std	Y+10, r26	; 0x0a
    4fde:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4fe0:	68 85       	ldd	r22, Y+8	; 0x08
    4fe2:	79 85       	ldd	r23, Y+9	; 0x09
    4fe4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fe6:	9b 85       	ldd	r25, Y+11	; 0x0b
    4fe8:	20 e0       	ldi	r18, 0x00	; 0
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	40 e8       	ldi	r20, 0x80	; 128
    4fee:	5f e3       	ldi	r21, 0x3F	; 63
    4ff0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ff4:	88 23       	and	r24, r24
    4ff6:	2c f4       	brge	.+10     	; 0x5002 <pulseEnable+0x26c>
		__ticks = 1;
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	9f 83       	std	Y+7, r25	; 0x07
    4ffe:	8e 83       	std	Y+6, r24	; 0x06
    5000:	3f c0       	rjmp	.+126    	; 0x5080 <pulseEnable+0x2ea>
	else if (__tmp > 65535)
    5002:	68 85       	ldd	r22, Y+8	; 0x08
    5004:	79 85       	ldd	r23, Y+9	; 0x09
    5006:	8a 85       	ldd	r24, Y+10	; 0x0a
    5008:	9b 85       	ldd	r25, Y+11	; 0x0b
    500a:	20 e0       	ldi	r18, 0x00	; 0
    500c:	3f ef       	ldi	r19, 0xFF	; 255
    500e:	4f e7       	ldi	r20, 0x7F	; 127
    5010:	57 e4       	ldi	r21, 0x47	; 71
    5012:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5016:	18 16       	cp	r1, r24
    5018:	4c f5       	brge	.+82     	; 0x506c <pulseEnable+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    501a:	6c 85       	ldd	r22, Y+12	; 0x0c
    501c:	7d 85       	ldd	r23, Y+13	; 0x0d
    501e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5020:	9f 85       	ldd	r25, Y+15	; 0x0f
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	30 e0       	ldi	r19, 0x00	; 0
    5026:	40 e2       	ldi	r20, 0x20	; 32
    5028:	51 e4       	ldi	r21, 0x41	; 65
    502a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    502e:	dc 01       	movw	r26, r24
    5030:	cb 01       	movw	r24, r22
    5032:	bc 01       	movw	r22, r24
    5034:	cd 01       	movw	r24, r26
    5036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    503a:	dc 01       	movw	r26, r24
    503c:	cb 01       	movw	r24, r22
    503e:	9f 83       	std	Y+7, r25	; 0x07
    5040:	8e 83       	std	Y+6, r24	; 0x06
    5042:	0f c0       	rjmp	.+30     	; 0x5062 <pulseEnable+0x2cc>
    5044:	88 ec       	ldi	r24, 0xC8	; 200
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	9d 83       	std	Y+5, r25	; 0x05
    504a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    504c:	8c 81       	ldd	r24, Y+4	; 0x04
    504e:	9d 81       	ldd	r25, Y+5	; 0x05
    5050:	01 97       	sbiw	r24, 0x01	; 1
    5052:	f1 f7       	brne	.-4      	; 0x5050 <pulseEnable+0x2ba>
    5054:	9d 83       	std	Y+5, r25	; 0x05
    5056:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5058:	8e 81       	ldd	r24, Y+6	; 0x06
    505a:	9f 81       	ldd	r25, Y+7	; 0x07
    505c:	01 97       	sbiw	r24, 0x01	; 1
    505e:	9f 83       	std	Y+7, r25	; 0x07
    5060:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5062:	8e 81       	ldd	r24, Y+6	; 0x06
    5064:	9f 81       	ldd	r25, Y+7	; 0x07
    5066:	00 97       	sbiw	r24, 0x00	; 0
    5068:	69 f7       	brne	.-38     	; 0x5044 <pulseEnable+0x2ae>
    506a:	24 c0       	rjmp	.+72     	; 0x50b4 <pulseEnable+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    506c:	68 85       	ldd	r22, Y+8	; 0x08
    506e:	79 85       	ldd	r23, Y+9	; 0x09
    5070:	8a 85       	ldd	r24, Y+10	; 0x0a
    5072:	9b 85       	ldd	r25, Y+11	; 0x0b
    5074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5078:	dc 01       	movw	r26, r24
    507a:	cb 01       	movw	r24, r22
    507c:	9f 83       	std	Y+7, r25	; 0x07
    507e:	8e 83       	std	Y+6, r24	; 0x06
    5080:	8e 81       	ldd	r24, Y+6	; 0x06
    5082:	9f 81       	ldd	r25, Y+7	; 0x07
    5084:	9b 83       	std	Y+3, r25	; 0x03
    5086:	8a 83       	std	Y+2, r24	; 0x02
    5088:	8a 81       	ldd	r24, Y+2	; 0x02
    508a:	9b 81       	ldd	r25, Y+3	; 0x03
    508c:	01 97       	sbiw	r24, 0x01	; 1
    508e:	f1 f7       	brne	.-4      	; 0x508c <pulseEnable+0x2f6>
    5090:	9b 83       	std	Y+3, r25	; 0x03
    5092:	8a 83       	std	Y+2, r24	; 0x02
    5094:	0f c0       	rjmp	.+30     	; 0x50b4 <pulseEnable+0x31e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5096:	69 89       	ldd	r22, Y+17	; 0x11
    5098:	7a 89       	ldd	r23, Y+18	; 0x12
    509a:	8b 89       	ldd	r24, Y+19	; 0x13
    509c:	9c 89       	ldd	r25, Y+20	; 0x14
    509e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50a2:	dc 01       	movw	r26, r24
    50a4:	cb 01       	movw	r24, r22
    50a6:	88 8b       	std	Y+16, r24	; 0x10
    50a8:	88 89       	ldd	r24, Y+16	; 0x10
    50aa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    50ac:	89 81       	ldd	r24, Y+1	; 0x01
    50ae:	8a 95       	dec	r24
    50b0:	f1 f7       	brne	.-4      	; 0x50ae <pulseEnable+0x318>
    50b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);		// commands need > 37us to settle
}
    50b4:	e1 96       	adiw	r28, 0x31	; 49
    50b6:	0f b6       	in	r0, 0x3f	; 63
    50b8:	f8 94       	cli
    50ba:	de bf       	out	0x3e, r29	; 62
    50bc:	0f be       	out	0x3f, r0	; 63
    50be:	cd bf       	out	0x3d, r28	; 61
    50c0:	cf 91       	pop	r28
    50c2:	df 91       	pop	r29
    50c4:	08 95       	ret

000050c6 <HKPD_init>:

#include"util/delay.h"

u08 arr[]={'1','4','7','*','2','5','8','0','3','6','9','#','A','B','C','D'};

void HKPD_init(void){
    50c6:	df 93       	push	r29
    50c8:	cf 93       	push	r28
    50ca:	cd b7       	in	r28, 0x3d	; 61
    50cc:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPortDir(KPD_PORT,0x0f);
    50ce:	81 e0       	ldi	r24, 0x01	; 1
    50d0:	6f e0       	ldi	r22, 0x0F	; 15
    50d2:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <MDIO_vSetPortDir>
	MDIO_vSetPortVal(KPD_PORT,0xff);
    50d6:	81 e0       	ldi	r24, 0x01	; 1
    50d8:	6f ef       	ldi	r22, 0xFF	; 255
    50da:	0e 94 5d 15 	call	0x2aba	; 0x2aba <MDIO_vSetPortVal>
}
    50de:	cf 91       	pop	r28
    50e0:	df 91       	pop	r29
    50e2:	08 95       	ret

000050e4 <HKPD_u8GetPressedKey>:

u08 HKPD_u8GetPressedKey(void)
{
    50e4:	df 93       	push	r29
    50e6:	cf 93       	push	r28
    50e8:	cd b7       	in	r28, 0x3d	; 61
    50ea:	de b7       	in	r29, 0x3e	; 62
    50ec:	a2 97       	sbiw	r28, 0x22	; 34
    50ee:	0f b6       	in	r0, 0x3f	; 63
    50f0:	f8 94       	cli
    50f2:	de bf       	out	0x3e, r29	; 62
    50f4:	0f be       	out	0x3f, r0	; 63
    50f6:	cd bf       	out	0x3d, r28	; 61
	u08 L_u8Pressed_key = 0 ;
    50f8:	1a a2       	std	Y+34, r1	; 0x22
	u08 L_u8Pressed_key_1 = 0 ;
    50fa:	19 a2       	std	Y+33, r1	; 0x21
		for (u08 cols = 0 ; cols < 4 ; cols ++)
    50fc:	18 a2       	std	Y+32, r1	; 0x20
    50fe:	65 c1       	rjmp	.+714    	; 0x53ca <HKPD_u8GetPressedKey+0x2e6>
		{
			MDIO_vSetPinVal(KPD_PORT,cols,DIO_LOW);
    5100:	81 e0       	ldi	r24, 0x01	; 1
    5102:	68 a1       	ldd	r22, Y+32	; 0x20
    5104:	40 e0       	ldi	r20, 0x00	; 0
    5106:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

			for (u08 rows = 0 ; rows<4;rows++)
    510a:	1f 8e       	std	Y+31, r1	; 0x1f
    510c:	52 c1       	rjmp	.+676    	; 0x53b2 <HKPD_u8GetPressedKey+0x2ce>
			{
				if (MDIO_u8GetPinVal(KPD_PORT,rows+4)==0)
    510e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5110:	98 2f       	mov	r25, r24
    5112:	9c 5f       	subi	r25, 0xFC	; 252
    5114:	81 e0       	ldi	r24, 0x01	; 1
    5116:	69 2f       	mov	r22, r25
    5118:	0e 94 a2 14 	call	0x2944	; 0x2944 <MDIO_u8GetPinVal>
    511c:	88 23       	and	r24, r24
    511e:	09 f0       	breq	.+2      	; 0x5122 <HKPD_u8GetPressedKey+0x3e>
    5120:	c9 c0       	rjmp	.+402    	; 0x52b4 <HKPD_u8GetPressedKey+0x1d0>
				{
					L_u8Pressed_key = rows + (cols * 4) + 1 ;
    5122:	88 a1       	ldd	r24, Y+32	; 0x20
    5124:	88 2f       	mov	r24, r24
    5126:	90 e0       	ldi	r25, 0x00	; 0
    5128:	88 0f       	add	r24, r24
    512a:	99 1f       	adc	r25, r25
    512c:	88 0f       	add	r24, r24
    512e:	99 1f       	adc	r25, r25
    5130:	98 2f       	mov	r25, r24
    5132:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5134:	89 0f       	add	r24, r25
    5136:	8f 5f       	subi	r24, 0xFF	; 255
    5138:	8a a3       	std	Y+34, r24	; 0x22
    513a:	bc c0       	rjmp	.+376    	; 0x52b4 <HKPD_u8GetPressedKey+0x1d0>
				}
				while (MDIO_u8GetPinVal(KPD_PORT,rows+4)==0)
				{
					MDIO_vSetPinVal(KPD_PORT,cols,DIO_HIGH);
    513c:	81 e0       	ldi	r24, 0x01	; 1
    513e:	68 a1       	ldd	r22, Y+32	; 0x20
    5140:	41 e0       	ldi	r20, 0x01	; 1
    5142:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
					for (u08 col = 0 ; col < 4 ; col ++)
    5146:	1e 8e       	std	Y+30, r1	; 0x1e
    5148:	ac c0       	rjmp	.+344    	; 0x52a2 <HKPD_u8GetPressedKey+0x1be>
					{

						MDIO_vSetPinVal(KPD_PORT,col,DIO_LOW);
    514a:	81 e0       	ldi	r24, 0x01	; 1
    514c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    514e:	40 e0       	ldi	r20, 0x00	; 0
    5150:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

						for (u08 row = 0 ; row<4;row++)
    5154:	1d 8e       	std	Y+29, r1	; 0x1d
    5156:	99 c0       	rjmp	.+306    	; 0x528a <HKPD_u8GetPressedKey+0x1a6>
						{


							if (MDIO_u8GetPinVal(KPD_PORT,row+4)==0&&(col!=cols)&&(rows!=row))
    5158:	8d 8d       	ldd	r24, Y+29	; 0x1d
    515a:	98 2f       	mov	r25, r24
    515c:	9c 5f       	subi	r25, 0xFC	; 252
    515e:	81 e0       	ldi	r24, 0x01	; 1
    5160:	69 2f       	mov	r22, r25
    5162:	0e 94 a2 14 	call	0x2944	; 0x2944 <MDIO_u8GetPinVal>
    5166:	88 23       	and	r24, r24
    5168:	51 f4       	brne	.+20     	; 0x517e <HKPD_u8GetPressedKey+0x9a>
    516a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    516c:	88 a1       	ldd	r24, Y+32	; 0x20
    516e:	98 17       	cp	r25, r24
    5170:	31 f0       	breq	.+12     	; 0x517e <HKPD_u8GetPressedKey+0x9a>
    5172:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5174:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5176:	98 17       	cp	r25, r24
    5178:	11 f0       	breq	.+4      	; 0x517e <HKPD_u8GetPressedKey+0x9a>
							{
								L_u8Pressed_key_1 = 1 ;
    517a:	81 e0       	ldi	r24, 0x01	; 1
    517c:	89 a3       	std	Y+33, r24	; 0x21
							}
							while (MDIO_u8GetPinVal(KPD_PORT,row+4)==0&&(col!=cols)&&(rows!=row));
    517e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5180:	98 2f       	mov	r25, r24
    5182:	9c 5f       	subi	r25, 0xFC	; 252
    5184:	81 e0       	ldi	r24, 0x01	; 1
    5186:	69 2f       	mov	r22, r25
    5188:	0e 94 a2 14 	call	0x2944	; 0x2944 <MDIO_u8GetPinVal>
    518c:	88 23       	and	r24, r24
    518e:	41 f4       	brne	.+16     	; 0x51a0 <HKPD_u8GetPressedKey+0xbc>
    5190:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5192:	88 a1       	ldd	r24, Y+32	; 0x20
    5194:	98 17       	cp	r25, r24
    5196:	21 f0       	breq	.+8      	; 0x51a0 <HKPD_u8GetPressedKey+0xbc>
    5198:	9f 8d       	ldd	r25, Y+31	; 0x1f
    519a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    519c:	98 17       	cp	r25, r24
    519e:	79 f7       	brne	.-34     	; 0x517e <HKPD_u8GetPressedKey+0x9a>
    51a0:	80 e0       	ldi	r24, 0x00	; 0
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	a0 e2       	ldi	r26, 0x20	; 32
    51a6:	b1 e4       	ldi	r27, 0x41	; 65
    51a8:	89 8f       	std	Y+25, r24	; 0x19
    51aa:	9a 8f       	std	Y+26, r25	; 0x1a
    51ac:	ab 8f       	std	Y+27, r26	; 0x1b
    51ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51b0:	69 8d       	ldd	r22, Y+25	; 0x19
    51b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51b8:	20 e0       	ldi	r18, 0x00	; 0
    51ba:	30 e0       	ldi	r19, 0x00	; 0
    51bc:	4a ef       	ldi	r20, 0xFA	; 250
    51be:	54 e4       	ldi	r21, 0x44	; 68
    51c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51c4:	dc 01       	movw	r26, r24
    51c6:	cb 01       	movw	r24, r22
    51c8:	8d 8b       	std	Y+21, r24	; 0x15
    51ca:	9e 8b       	std	Y+22, r25	; 0x16
    51cc:	af 8b       	std	Y+23, r26	; 0x17
    51ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    51d0:	6d 89       	ldd	r22, Y+21	; 0x15
    51d2:	7e 89       	ldd	r23, Y+22	; 0x16
    51d4:	8f 89       	ldd	r24, Y+23	; 0x17
    51d6:	98 8d       	ldd	r25, Y+24	; 0x18
    51d8:	20 e0       	ldi	r18, 0x00	; 0
    51da:	30 e0       	ldi	r19, 0x00	; 0
    51dc:	40 e8       	ldi	r20, 0x80	; 128
    51de:	5f e3       	ldi	r21, 0x3F	; 63
    51e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51e4:	88 23       	and	r24, r24
    51e6:	2c f4       	brge	.+10     	; 0x51f2 <HKPD_u8GetPressedKey+0x10e>
		__ticks = 1;
    51e8:	81 e0       	ldi	r24, 0x01	; 1
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	9c 8b       	std	Y+20, r25	; 0x14
    51ee:	8b 8b       	std	Y+19, r24	; 0x13
    51f0:	3f c0       	rjmp	.+126    	; 0x5270 <HKPD_u8GetPressedKey+0x18c>
	else if (__tmp > 65535)
    51f2:	6d 89       	ldd	r22, Y+21	; 0x15
    51f4:	7e 89       	ldd	r23, Y+22	; 0x16
    51f6:	8f 89       	ldd	r24, Y+23	; 0x17
    51f8:	98 8d       	ldd	r25, Y+24	; 0x18
    51fa:	20 e0       	ldi	r18, 0x00	; 0
    51fc:	3f ef       	ldi	r19, 0xFF	; 255
    51fe:	4f e7       	ldi	r20, 0x7F	; 127
    5200:	57 e4       	ldi	r21, 0x47	; 71
    5202:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5206:	18 16       	cp	r1, r24
    5208:	4c f5       	brge	.+82     	; 0x525c <HKPD_u8GetPressedKey+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    520a:	69 8d       	ldd	r22, Y+25	; 0x19
    520c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    520e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5210:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5212:	20 e0       	ldi	r18, 0x00	; 0
    5214:	30 e0       	ldi	r19, 0x00	; 0
    5216:	40 e2       	ldi	r20, 0x20	; 32
    5218:	51 e4       	ldi	r21, 0x41	; 65
    521a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    521e:	dc 01       	movw	r26, r24
    5220:	cb 01       	movw	r24, r22
    5222:	bc 01       	movw	r22, r24
    5224:	cd 01       	movw	r24, r26
    5226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    522a:	dc 01       	movw	r26, r24
    522c:	cb 01       	movw	r24, r22
    522e:	9c 8b       	std	Y+20, r25	; 0x14
    5230:	8b 8b       	std	Y+19, r24	; 0x13
    5232:	0f c0       	rjmp	.+30     	; 0x5252 <HKPD_u8GetPressedKey+0x16e>
    5234:	88 ec       	ldi	r24, 0xC8	; 200
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	9a 8b       	std	Y+18, r25	; 0x12
    523a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    523c:	89 89       	ldd	r24, Y+17	; 0x11
    523e:	9a 89       	ldd	r25, Y+18	; 0x12
    5240:	01 97       	sbiw	r24, 0x01	; 1
    5242:	f1 f7       	brne	.-4      	; 0x5240 <HKPD_u8GetPressedKey+0x15c>
    5244:	9a 8b       	std	Y+18, r25	; 0x12
    5246:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5248:	8b 89       	ldd	r24, Y+19	; 0x13
    524a:	9c 89       	ldd	r25, Y+20	; 0x14
    524c:	01 97       	sbiw	r24, 0x01	; 1
    524e:	9c 8b       	std	Y+20, r25	; 0x14
    5250:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5252:	8b 89       	ldd	r24, Y+19	; 0x13
    5254:	9c 89       	ldd	r25, Y+20	; 0x14
    5256:	00 97       	sbiw	r24, 0x00	; 0
    5258:	69 f7       	brne	.-38     	; 0x5234 <HKPD_u8GetPressedKey+0x150>
    525a:	14 c0       	rjmp	.+40     	; 0x5284 <HKPD_u8GetPressedKey+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    525c:	6d 89       	ldd	r22, Y+21	; 0x15
    525e:	7e 89       	ldd	r23, Y+22	; 0x16
    5260:	8f 89       	ldd	r24, Y+23	; 0x17
    5262:	98 8d       	ldd	r25, Y+24	; 0x18
    5264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5268:	dc 01       	movw	r26, r24
    526a:	cb 01       	movw	r24, r22
    526c:	9c 8b       	std	Y+20, r25	; 0x14
    526e:	8b 8b       	std	Y+19, r24	; 0x13
    5270:	8b 89       	ldd	r24, Y+19	; 0x13
    5272:	9c 89       	ldd	r25, Y+20	; 0x14
    5274:	98 8b       	std	Y+16, r25	; 0x10
    5276:	8f 87       	std	Y+15, r24	; 0x0f
    5278:	8f 85       	ldd	r24, Y+15	; 0x0f
    527a:	98 89       	ldd	r25, Y+16	; 0x10
    527c:	01 97       	sbiw	r24, 0x01	; 1
    527e:	f1 f7       	brne	.-4      	; 0x527c <HKPD_u8GetPressedKey+0x198>
    5280:	98 8b       	std	Y+16, r25	; 0x10
    5282:	8f 87       	std	Y+15, r24	; 0x0f
					for (u08 col = 0 ; col < 4 ; col ++)
					{

						MDIO_vSetPinVal(KPD_PORT,col,DIO_LOW);

						for (u08 row = 0 ; row<4;row++)
    5284:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5286:	8f 5f       	subi	r24, 0xFF	; 255
    5288:	8d 8f       	std	Y+29, r24	; 0x1d
    528a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    528c:	84 30       	cpi	r24, 0x04	; 4
    528e:	08 f4       	brcc	.+2      	; 0x5292 <HKPD_u8GetPressedKey+0x1ae>
    5290:	63 cf       	rjmp	.-314    	; 0x5158 <HKPD_u8GetPressedKey+0x74>
								L_u8Pressed_key_1 = 1 ;
							}
							while (MDIO_u8GetPinVal(KPD_PORT,row+4)==0&&(col!=cols)&&(rows!=row));
							_delay_ms(10);
						}
						MDIO_vSetPinVal(KPD_PORT,col,DIO_HIGH);
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	6e 8d       	ldd	r22, Y+30	; 0x1e
    5296:	41 e0       	ldi	r20, 0x01	; 1
    5298:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
					L_u8Pressed_key = rows + (cols * 4) + 1 ;
				}
				while (MDIO_u8GetPinVal(KPD_PORT,rows+4)==0)
				{
					MDIO_vSetPinVal(KPD_PORT,cols,DIO_HIGH);
					for (u08 col = 0 ; col < 4 ; col ++)
    529c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    529e:	8f 5f       	subi	r24, 0xFF	; 255
    52a0:	8e 8f       	std	Y+30, r24	; 0x1e
    52a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    52a4:	84 30       	cpi	r24, 0x04	; 4
    52a6:	08 f4       	brcc	.+2      	; 0x52aa <HKPD_u8GetPressedKey+0x1c6>
    52a8:	50 cf       	rjmp	.-352    	; 0x514a <HKPD_u8GetPressedKey+0x66>
							while (MDIO_u8GetPinVal(KPD_PORT,row+4)==0&&(col!=cols)&&(rows!=row));
							_delay_ms(10);
						}
						MDIO_vSetPinVal(KPD_PORT,col,DIO_HIGH);
					}
					MDIO_vSetPinVal(KPD_PORT,cols,DIO_LOW);
    52aa:	81 e0       	ldi	r24, 0x01	; 1
    52ac:	68 a1       	ldd	r22, Y+32	; 0x20
    52ae:	40 e0       	ldi	r20, 0x00	; 0
    52b0:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
			{
				if (MDIO_u8GetPinVal(KPD_PORT,rows+4)==0)
				{
					L_u8Pressed_key = rows + (cols * 4) + 1 ;
				}
				while (MDIO_u8GetPinVal(KPD_PORT,rows+4)==0)
    52b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52b6:	98 2f       	mov	r25, r24
    52b8:	9c 5f       	subi	r25, 0xFC	; 252
    52ba:	81 e0       	ldi	r24, 0x01	; 1
    52bc:	69 2f       	mov	r22, r25
    52be:	0e 94 a2 14 	call	0x2944	; 0x2944 <MDIO_u8GetPinVal>
    52c2:	88 23       	and	r24, r24
    52c4:	09 f4       	brne	.+2      	; 0x52c8 <HKPD_u8GetPressedKey+0x1e4>
    52c6:	3a cf       	rjmp	.-396    	; 0x513c <HKPD_u8GetPressedKey+0x58>
    52c8:	80 e0       	ldi	r24, 0x00	; 0
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	a0 e2       	ldi	r26, 0x20	; 32
    52ce:	b1 e4       	ldi	r27, 0x41	; 65
    52d0:	8b 87       	std	Y+11, r24	; 0x0b
    52d2:	9c 87       	std	Y+12, r25	; 0x0c
    52d4:	ad 87       	std	Y+13, r26	; 0x0d
    52d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    52da:	7c 85       	ldd	r23, Y+12	; 0x0c
    52dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    52de:	9e 85       	ldd	r25, Y+14	; 0x0e
    52e0:	20 e0       	ldi	r18, 0x00	; 0
    52e2:	30 e0       	ldi	r19, 0x00	; 0
    52e4:	4a ef       	ldi	r20, 0xFA	; 250
    52e6:	54 e4       	ldi	r21, 0x44	; 68
    52e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52ec:	dc 01       	movw	r26, r24
    52ee:	cb 01       	movw	r24, r22
    52f0:	8f 83       	std	Y+7, r24	; 0x07
    52f2:	98 87       	std	Y+8, r25	; 0x08
    52f4:	a9 87       	std	Y+9, r26	; 0x09
    52f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    52f8:	6f 81       	ldd	r22, Y+7	; 0x07
    52fa:	78 85       	ldd	r23, Y+8	; 0x08
    52fc:	89 85       	ldd	r24, Y+9	; 0x09
    52fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5300:	20 e0       	ldi	r18, 0x00	; 0
    5302:	30 e0       	ldi	r19, 0x00	; 0
    5304:	40 e8       	ldi	r20, 0x80	; 128
    5306:	5f e3       	ldi	r21, 0x3F	; 63
    5308:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    530c:	88 23       	and	r24, r24
    530e:	2c f4       	brge	.+10     	; 0x531a <HKPD_u8GetPressedKey+0x236>
		__ticks = 1;
    5310:	81 e0       	ldi	r24, 0x01	; 1
    5312:	90 e0       	ldi	r25, 0x00	; 0
    5314:	9e 83       	std	Y+6, r25	; 0x06
    5316:	8d 83       	std	Y+5, r24	; 0x05
    5318:	3f c0       	rjmp	.+126    	; 0x5398 <HKPD_u8GetPressedKey+0x2b4>
	else if (__tmp > 65535)
    531a:	6f 81       	ldd	r22, Y+7	; 0x07
    531c:	78 85       	ldd	r23, Y+8	; 0x08
    531e:	89 85       	ldd	r24, Y+9	; 0x09
    5320:	9a 85       	ldd	r25, Y+10	; 0x0a
    5322:	20 e0       	ldi	r18, 0x00	; 0
    5324:	3f ef       	ldi	r19, 0xFF	; 255
    5326:	4f e7       	ldi	r20, 0x7F	; 127
    5328:	57 e4       	ldi	r21, 0x47	; 71
    532a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    532e:	18 16       	cp	r1, r24
    5330:	4c f5       	brge	.+82     	; 0x5384 <HKPD_u8GetPressedKey+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5332:	6b 85       	ldd	r22, Y+11	; 0x0b
    5334:	7c 85       	ldd	r23, Y+12	; 0x0c
    5336:	8d 85       	ldd	r24, Y+13	; 0x0d
    5338:	9e 85       	ldd	r25, Y+14	; 0x0e
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	40 e2       	ldi	r20, 0x20	; 32
    5340:	51 e4       	ldi	r21, 0x41	; 65
    5342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5346:	dc 01       	movw	r26, r24
    5348:	cb 01       	movw	r24, r22
    534a:	bc 01       	movw	r22, r24
    534c:	cd 01       	movw	r24, r26
    534e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5352:	dc 01       	movw	r26, r24
    5354:	cb 01       	movw	r24, r22
    5356:	9e 83       	std	Y+6, r25	; 0x06
    5358:	8d 83       	std	Y+5, r24	; 0x05
    535a:	0f c0       	rjmp	.+30     	; 0x537a <HKPD_u8GetPressedKey+0x296>
    535c:	88 ec       	ldi	r24, 0xC8	; 200
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	9c 83       	std	Y+4, r25	; 0x04
    5362:	8b 83       	std	Y+3, r24	; 0x03
    5364:	8b 81       	ldd	r24, Y+3	; 0x03
    5366:	9c 81       	ldd	r25, Y+4	; 0x04
    5368:	01 97       	sbiw	r24, 0x01	; 1
    536a:	f1 f7       	brne	.-4      	; 0x5368 <HKPD_u8GetPressedKey+0x284>
    536c:	9c 83       	std	Y+4, r25	; 0x04
    536e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5370:	8d 81       	ldd	r24, Y+5	; 0x05
    5372:	9e 81       	ldd	r25, Y+6	; 0x06
    5374:	01 97       	sbiw	r24, 0x01	; 1
    5376:	9e 83       	std	Y+6, r25	; 0x06
    5378:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    537a:	8d 81       	ldd	r24, Y+5	; 0x05
    537c:	9e 81       	ldd	r25, Y+6	; 0x06
    537e:	00 97       	sbiw	r24, 0x00	; 0
    5380:	69 f7       	brne	.-38     	; 0x535c <HKPD_u8GetPressedKey+0x278>
    5382:	14 c0       	rjmp	.+40     	; 0x53ac <HKPD_u8GetPressedKey+0x2c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5384:	6f 81       	ldd	r22, Y+7	; 0x07
    5386:	78 85       	ldd	r23, Y+8	; 0x08
    5388:	89 85       	ldd	r24, Y+9	; 0x09
    538a:	9a 85       	ldd	r25, Y+10	; 0x0a
    538c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5390:	dc 01       	movw	r26, r24
    5392:	cb 01       	movw	r24, r22
    5394:	9e 83       	std	Y+6, r25	; 0x06
    5396:	8d 83       	std	Y+5, r24	; 0x05
    5398:	8d 81       	ldd	r24, Y+5	; 0x05
    539a:	9e 81       	ldd	r25, Y+6	; 0x06
    539c:	9a 83       	std	Y+2, r25	; 0x02
    539e:	89 83       	std	Y+1, r24	; 0x01
    53a0:	89 81       	ldd	r24, Y+1	; 0x01
    53a2:	9a 81       	ldd	r25, Y+2	; 0x02
    53a4:	01 97       	sbiw	r24, 0x01	; 1
    53a6:	f1 f7       	brne	.-4      	; 0x53a4 <HKPD_u8GetPressedKey+0x2c0>
    53a8:	9a 83       	std	Y+2, r25	; 0x02
    53aa:	89 83       	std	Y+1, r24	; 0x01
	u08 L_u8Pressed_key_1 = 0 ;
		for (u08 cols = 0 ; cols < 4 ; cols ++)
		{
			MDIO_vSetPinVal(KPD_PORT,cols,DIO_LOW);

			for (u08 rows = 0 ; rows<4;rows++)
    53ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    53ae:	8f 5f       	subi	r24, 0xFF	; 255
    53b0:	8f 8f       	std	Y+31, r24	; 0x1f
    53b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    53b4:	84 30       	cpi	r24, 0x04	; 4
    53b6:	08 f4       	brcc	.+2      	; 0x53ba <HKPD_u8GetPressedKey+0x2d6>
    53b8:	aa ce       	rjmp	.-684    	; 0x510e <HKPD_u8GetPressedKey+0x2a>
					MDIO_vSetPinVal(KPD_PORT,cols,DIO_LOW);
				}

				_delay_ms(10);
			}
			MDIO_vSetPinVal(KPD_PORT,cols,DIO_HIGH);
    53ba:	81 e0       	ldi	r24, 0x01	; 1
    53bc:	68 a1       	ldd	r22, Y+32	; 0x20
    53be:	41 e0       	ldi	r20, 0x01	; 1
    53c0:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

u08 HKPD_u8GetPressedKey(void)
{
	u08 L_u8Pressed_key = 0 ;
	u08 L_u8Pressed_key_1 = 0 ;
		for (u08 cols = 0 ; cols < 4 ; cols ++)
    53c4:	88 a1       	ldd	r24, Y+32	; 0x20
    53c6:	8f 5f       	subi	r24, 0xFF	; 255
    53c8:	88 a3       	std	Y+32, r24	; 0x20
    53ca:	88 a1       	ldd	r24, Y+32	; 0x20
    53cc:	84 30       	cpi	r24, 0x04	; 4
    53ce:	08 f4       	brcc	.+2      	; 0x53d2 <HKPD_u8GetPressedKey+0x2ee>
    53d0:	97 ce       	rjmp	.-722    	; 0x5100 <HKPD_u8GetPressedKey+0x1c>

				_delay_ms(10);
			}
			MDIO_vSetPinVal(KPD_PORT,cols,DIO_HIGH);
		}
		if(L_u8Pressed_key_1!=0)
    53d2:	89 a1       	ldd	r24, Y+33	; 0x21
    53d4:	88 23       	and	r24, r24
    53d6:	11 f0       	breq	.+4      	; 0x53dc <HKPD_u8GetPressedKey+0x2f8>
		{
			L_u8Pressed_key=22;
    53d8:	86 e1       	ldi	r24, 0x16	; 22
    53da:	8a a3       	std	Y+34, r24	; 0x22
		}

	return arr[L_u8Pressed_key-1] ;
    53dc:	8a a1       	ldd	r24, Y+34	; 0x22
    53de:	88 2f       	mov	r24, r24
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	01 97       	sbiw	r24, 0x01	; 1
    53e4:	fc 01       	movw	r30, r24
    53e6:	e7 55       	subi	r30, 0x57	; 87
    53e8:	ff 4f       	sbci	r31, 0xFF	; 255
    53ea:	80 81       	ld	r24, Z
}
    53ec:	a2 96       	adiw	r28, 0x22	; 34
    53ee:	0f b6       	in	r0, 0x3f	; 63
    53f0:	f8 94       	cli
    53f2:	de bf       	out	0x3e, r29	; 62
    53f4:	0f be       	out	0x3f, r0	; 63
    53f6:	cd bf       	out	0x3d, r28	; 61
    53f8:	cf 91       	pop	r28
    53fa:	df 91       	pop	r29
    53fc:	08 95       	ret

000053fe <HIR_u8ReadIR>:
#include"../../MCAL/DIO/DIO_int.h"
#include"IR_int.h"


u08 HIR_u8ReadIR(IR_t* Sensor)
{
    53fe:	df 93       	push	r29
    5400:	cf 93       	push	r28
    5402:	00 d0       	rcall	.+0      	; 0x5404 <HIR_u8ReadIR+0x6>
    5404:	00 d0       	rcall	.+0      	; 0x5406 <HIR_u8ReadIR+0x8>
    5406:	0f 92       	push	r0
    5408:	cd b7       	in	r28, 0x3d	; 61
    540a:	de b7       	in	r29, 0x3e	; 62
    540c:	9b 83       	std	Y+3, r25	; 0x03
    540e:	8a 83       	std	Y+2, r24	; 0x02
	u08 Read=MDIO_u8GetPinVal(Sensor->Port,Sensor->Pin);
    5410:	ea 81       	ldd	r30, Y+2	; 0x02
    5412:	fb 81       	ldd	r31, Y+3	; 0x03
    5414:	80 81       	ld	r24, Z
    5416:	ea 81       	ldd	r30, Y+2	; 0x02
    5418:	fb 81       	ldd	r31, Y+3	; 0x03
    541a:	91 81       	ldd	r25, Z+1	; 0x01
    541c:	69 2f       	mov	r22, r25
    541e:	0e 94 a2 14 	call	0x2944	; 0x2944 <MDIO_u8GetPinVal>
    5422:	89 83       	std	Y+1, r24	; 0x01
	switch (Read)
    5424:	89 81       	ldd	r24, Y+1	; 0x01
    5426:	28 2f       	mov	r18, r24
    5428:	30 e0       	ldi	r19, 0x00	; 0
    542a:	3d 83       	std	Y+5, r19	; 0x05
    542c:	2c 83       	std	Y+4, r18	; 0x04
    542e:	8c 81       	ldd	r24, Y+4	; 0x04
    5430:	9d 81       	ldd	r25, Y+5	; 0x05
    5432:	00 97       	sbiw	r24, 0x00	; 0
    5434:	31 f0       	breq	.+12     	; 0x5442 <HIR_u8ReadIR+0x44>
    5436:	2c 81       	ldd	r18, Y+4	; 0x04
    5438:	3d 81       	ldd	r19, Y+5	; 0x05
    543a:	21 30       	cpi	r18, 0x01	; 1
    543c:	31 05       	cpc	r19, r1
    543e:	21 f0       	breq	.+8      	; 0x5448 <HIR_u8ReadIR+0x4a>
    5440:	04 c0       	rjmp	.+8      	; 0x544a <HIR_u8ReadIR+0x4c>
	{
	case IR_Exist:
		Read=1;
    5442:	81 e0       	ldi	r24, 0x01	; 1
    5444:	89 83       	std	Y+1, r24	; 0x01
    5446:	01 c0       	rjmp	.+2      	; 0x544a <HIR_u8ReadIR+0x4c>
		break;
	case IR_NotExist:
		Read=0;
    5448:	19 82       	std	Y+1, r1	; 0x01
		break;

	}
	return Read;
    544a:	89 81       	ldd	r24, Y+1	; 0x01
}
    544c:	0f 90       	pop	r0
    544e:	0f 90       	pop	r0
    5450:	0f 90       	pop	r0
    5452:	0f 90       	pop	r0
    5454:	0f 90       	pop	r0
    5456:	cf 91       	pop	r28
    5458:	df 91       	pop	r29
    545a:	08 95       	ret

0000545c <HIR_Init>:

IR_t HIR_Init(u08 A_u8Port,u08 A_u8Pin)
{
    545c:	df 93       	push	r29
    545e:	cf 93       	push	r28
    5460:	00 d0       	rcall	.+0      	; 0x5462 <HIR_Init+0x6>
    5462:	00 d0       	rcall	.+0      	; 0x5464 <HIR_Init+0x8>
    5464:	cd b7       	in	r28, 0x3d	; 61
    5466:	de b7       	in	r29, 0x3e	; 62
    5468:	8b 83       	std	Y+3, r24	; 0x03
    546a:	6c 83       	std	Y+4, r22	; 0x04
	IR_t L_xNewIR ;

	L_xNewIR.Port = A_u8Port;
    546c:	8b 81       	ldd	r24, Y+3	; 0x03
    546e:	89 83       	std	Y+1, r24	; 0x01
	L_xNewIR.Pin = A_u8Pin;
    5470:	8c 81       	ldd	r24, Y+4	; 0x04
    5472:	8a 83       	std	Y+2, r24	; 0x02
	MDIO_vSetPinDir(L_xNewIR.Port,L_xNewIR.Pin,DIO_Input);
    5474:	89 81       	ldd	r24, Y+1	; 0x01
    5476:	9a 81       	ldd	r25, Y+2	; 0x02
    5478:	69 2f       	mov	r22, r25
    547a:	40 e0       	ldi	r20, 0x00	; 0
    547c:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinVal(L_xNewIR.Port,L_xNewIR.Pin,DIO_LOW);
    5480:	89 81       	ldd	r24, Y+1	; 0x01
    5482:	9a 81       	ldd	r25, Y+2	; 0x02
    5484:	69 2f       	mov	r22, r25
    5486:	40 e0       	ldi	r20, 0x00	; 0
    5488:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
	return L_xNewIR;
    548c:	89 81       	ldd	r24, Y+1	; 0x01
    548e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5490:	0f 90       	pop	r0
    5492:	0f 90       	pop	r0
    5494:	0f 90       	pop	r0
    5496:	0f 90       	pop	r0
    5498:	cf 91       	pop	r28
    549a:	df 91       	pop	r29
    549c:	08 95       	ret

0000549e <HCLR_vInit>:
#include "CLR_int.h"
#include"../SHFT/SHFT_int.h"


void HCLR_vInit(void)
{
    549e:	df 93       	push	r29
    54a0:	cf 93       	push	r28
    54a2:	cd b7       	in	r28, 0x3d	; 61
    54a4:	de b7       	in	r29, 0x3e	; 62

	MTMR_vInit();
    54a6:	0e 94 4c 09 	call	0x1298	; 0x1298 <MTMR_vInit>

	MDIO_vSetPinDir(OUT_Port,OUT_Pin,DIO_Input);
    54aa:	83 e0       	ldi	r24, 0x03	; 3
    54ac:	66 e0       	ldi	r22, 0x06	; 6
    54ae:	40 e0       	ldi	r20, 0x00	; 0
    54b0:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(CLR_Port,S0_Pin,DIO_Output);
    54b4:	80 91 54 01 	lds	r24, 0x0154
    54b8:	90 91 55 01 	lds	r25, 0x0155
    54bc:	62 e0       	ldi	r22, 0x02	; 2
    54be:	41 e0       	ldi	r20, 0x01	; 1
    54c0:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(CLR_Port,S1_Pin,DIO_Output);
    54c4:	80 91 54 01 	lds	r24, 0x0154
    54c8:	90 91 55 01 	lds	r25, 0x0155
    54cc:	63 e0       	ldi	r22, 0x03	; 3
    54ce:	41 e0       	ldi	r20, 0x01	; 1
    54d0:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(CLR_Port,S2_Pin,DIO_Output);
    54d4:	80 91 54 01 	lds	r24, 0x0154
    54d8:	90 91 55 01 	lds	r25, 0x0155
    54dc:	64 e0       	ldi	r22, 0x04	; 4
    54de:	41 e0       	ldi	r20, 0x01	; 1
    54e0:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinDir(CLR_Port,S3_Pin,DIO_Output);
    54e4:	80 91 54 01 	lds	r24, 0x0154
    54e8:	90 91 55 01 	lds	r25, 0x0155
    54ec:	65 e0       	ldi	r22, 0x05	; 5
    54ee:	41 e0       	ldi	r20, 0x01	; 1
    54f0:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>

	MDIO_vSetPinVal(CLR_Port,S0_Pin,DIO_HIGH);
    54f4:	80 91 54 01 	lds	r24, 0x0154
    54f8:	90 91 55 01 	lds	r25, 0x0155
    54fc:	62 e0       	ldi	r22, 0x02	; 2
    54fe:	41 e0       	ldi	r20, 0x01	; 1
    5500:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
	MDIO_vSetPinVal(CLR_Port,S1_Pin,DIO_LOW);
    5504:	80 91 54 01 	lds	r24, 0x0154
    5508:	90 91 55 01 	lds	r25, 0x0155
    550c:	63 e0       	ldi	r22, 0x03	; 3
    550e:	40 e0       	ldi	r20, 0x00	; 0
    5510:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

	MGIE_vEnableGlobalInterrubt();
    5514:	0e 94 ed 11 	call	0x23da	; 0x23da <MGIE_vEnableGlobalInterrubt>

}
    5518:	cf 91       	pop	r28
    551a:	df 91       	pop	r29
    551c:	08 95       	ret

0000551e <HCLR_u8ScanColor>:

u08 HCLR_u8ScanColor(void)
{
    551e:	df 93       	push	r29
    5520:	cf 93       	push	r28
    5522:	cd b7       	in	r28, 0x3d	; 61
    5524:	de b7       	in	r29, 0x3e	; 62
	static u16 blueFrequency;
	static u08 x;
	static u08 Read;

	  // Setting RED (R) filtered photodiodes to be read
	  MDIO_vSetPinVal(CLR_Port,S2_Pin,DIO_LOW);
    5526:	80 91 54 01 	lds	r24, 0x0154
    552a:	90 91 55 01 	lds	r25, 0x0155
    552e:	64 e0       	ldi	r22, 0x04	; 4
    5530:	40 e0       	ldi	r20, 0x00	; 0
    5532:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
	  MDIO_vSetPinVal(CLR_Port,S3_Pin,DIO_LOW);
    5536:	80 91 54 01 	lds	r24, 0x0154
    553a:	90 91 55 01 	lds	r25, 0x0155
    553e:	65 e0       	ldi	r22, 0x05	; 5
    5540:	40 e0       	ldi	r20, 0x00	; 0
    5542:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

	  // Reading the output frequency
	  MTMR_vReadSignals(&redFrequency,&x);
    5546:	2e ee       	ldi	r18, 0xEE	; 238
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	83 ef       	ldi	r24, 0xF3	; 243
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	b9 01       	movw	r22, r18
    5550:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <MTMR_vReadSignals>

	  // Setting GREEN (G) filtered photodiodes to be read
	  MDIO_vSetPinVal(CLR_Port,S2_Pin,DIO_HIGH);
    5554:	80 91 54 01 	lds	r24, 0x0154
    5558:	90 91 55 01 	lds	r25, 0x0155
    555c:	64 e0       	ldi	r22, 0x04	; 4
    555e:	41 e0       	ldi	r20, 0x01	; 1
    5560:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
	  MDIO_vSetPinVal(CLR_Port,S3_Pin,DIO_HIGH);
    5564:	80 91 54 01 	lds	r24, 0x0154
    5568:	90 91 55 01 	lds	r25, 0x0155
    556c:	65 e0       	ldi	r22, 0x05	; 5
    556e:	41 e0       	ldi	r20, 0x01	; 1
    5570:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

	  // Reading the output frequency
	  MTMR_vReadSignals(&greenFrequency,&x);
    5574:	2e ee       	ldi	r18, 0xEE	; 238
    5576:	30 e0       	ldi	r19, 0x00	; 0
    5578:	81 ef       	ldi	r24, 0xF1	; 241
    557a:	90 e0       	ldi	r25, 0x00	; 0
    557c:	b9 01       	movw	r22, r18
    557e:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <MTMR_vReadSignals>


	  // Setting BLUE (B) filtered photodiodes to be read
 	  MDIO_vSetPinVal(CLR_Port,S2_Pin,DIO_LOW);
    5582:	80 91 54 01 	lds	r24, 0x0154
    5586:	90 91 55 01 	lds	r25, 0x0155
    558a:	64 e0       	ldi	r22, 0x04	; 4
    558c:	40 e0       	ldi	r20, 0x00	; 0
    558e:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
	  MDIO_vSetPinVal(CLR_Port,S3_Pin,DIO_HIGH);
    5592:	80 91 54 01 	lds	r24, 0x0154
    5596:	90 91 55 01 	lds	r25, 0x0155
    559a:	65 e0       	ldi	r22, 0x05	; 5
    559c:	41 e0       	ldi	r20, 0x01	; 1
    559e:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

	  // Reading the output frequency
	  MTMR_vReadSignals(&blueFrequency,&x);
    55a2:	2e ee       	ldi	r18, 0xEE	; 238
    55a4:	30 e0       	ldi	r19, 0x00	; 0
    55a6:	8f ee       	ldi	r24, 0xEF	; 239
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	b9 01       	movw	r22, r18
    55ac:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <MTMR_vReadSignals>


	  if((redFrequency<greenFrequency)&&(redFrequency<blueFrequency))
    55b0:	20 91 f3 00 	lds	r18, 0x00F3
    55b4:	30 91 f4 00 	lds	r19, 0x00F4
    55b8:	80 91 f1 00 	lds	r24, 0x00F1
    55bc:	90 91 f2 00 	lds	r25, 0x00F2
    55c0:	28 17       	cp	r18, r24
    55c2:	39 07       	cpc	r19, r25
    55c4:	70 f4       	brcc	.+28     	; 0x55e2 <HCLR_u8ScanColor+0xc4>
    55c6:	20 91 f3 00 	lds	r18, 0x00F3
    55ca:	30 91 f4 00 	lds	r19, 0x00F4
    55ce:	80 91 ef 00 	lds	r24, 0x00EF
    55d2:	90 91 f0 00 	lds	r25, 0x00F0
    55d6:	28 17       	cp	r18, r24
    55d8:	39 07       	cpc	r19, r25
    55da:	18 f4       	brcc	.+6      	; 0x55e2 <HCLR_u8ScanColor+0xc4>
	  {
		  Read = RED;
    55dc:	10 92 ed 00 	sts	0x00ED, r1
    55e0:	36 c0       	rjmp	.+108    	; 0x564e <HCLR_u8ScanColor+0x130>
	  }
	  else if((greenFrequency<redFrequency)&&(greenFrequency<blueFrequency))
    55e2:	20 91 f1 00 	lds	r18, 0x00F1
    55e6:	30 91 f2 00 	lds	r19, 0x00F2
    55ea:	80 91 f3 00 	lds	r24, 0x00F3
    55ee:	90 91 f4 00 	lds	r25, 0x00F4
    55f2:	28 17       	cp	r18, r24
    55f4:	39 07       	cpc	r19, r25
    55f6:	78 f4       	brcc	.+30     	; 0x5616 <HCLR_u8ScanColor+0xf8>
    55f8:	20 91 f1 00 	lds	r18, 0x00F1
    55fc:	30 91 f2 00 	lds	r19, 0x00F2
    5600:	80 91 ef 00 	lds	r24, 0x00EF
    5604:	90 91 f0 00 	lds	r25, 0x00F0
    5608:	28 17       	cp	r18, r24
    560a:	39 07       	cpc	r19, r25
    560c:	20 f4       	brcc	.+8      	; 0x5616 <HCLR_u8ScanColor+0xf8>
	  {
		  Read = GREEN;
    560e:	81 e0       	ldi	r24, 0x01	; 1
    5610:	80 93 ed 00 	sts	0x00ED, r24
    5614:	1c c0       	rjmp	.+56     	; 0x564e <HCLR_u8ScanColor+0x130>

	  }
	  else if((blueFrequency<redFrequency)&&(blueFrequency<greenFrequency))
    5616:	20 91 ef 00 	lds	r18, 0x00EF
    561a:	30 91 f0 00 	lds	r19, 0x00F0
    561e:	80 91 f3 00 	lds	r24, 0x00F3
    5622:	90 91 f4 00 	lds	r25, 0x00F4
    5626:	28 17       	cp	r18, r24
    5628:	39 07       	cpc	r19, r25
    562a:	78 f4       	brcc	.+30     	; 0x564a <HCLR_u8ScanColor+0x12c>
    562c:	20 91 ef 00 	lds	r18, 0x00EF
    5630:	30 91 f0 00 	lds	r19, 0x00F0
    5634:	80 91 f1 00 	lds	r24, 0x00F1
    5638:	90 91 f2 00 	lds	r25, 0x00F2
    563c:	28 17       	cp	r18, r24
    563e:	39 07       	cpc	r19, r25
    5640:	20 f4       	brcc	.+8      	; 0x564a <HCLR_u8ScanColor+0x12c>
	  {
		  Read = BLUE;
    5642:	82 e0       	ldi	r24, 0x02	; 2
    5644:	80 93 ed 00 	sts	0x00ED, r24
    5648:	02 c0       	rjmp	.+4      	; 0x564e <HCLR_u8ScanColor+0x130>
	  }
	  else
		  HCLR_u8ScanColor();
    564a:	0e 94 8f 2a 	call	0x551e	; 0x551e <HCLR_u8ScanColor>
	  return Read;
    564e:	80 91 ed 00 	lds	r24, 0x00ED


}
    5652:	cf 91       	pop	r28
    5654:	df 91       	pop	r29
    5656:	08 95       	ret

00005658 <HBZR_vInit>:

#include"BZR_int.h"
#include"BZR_cfg.h"

void HBZR_vInit(void)
{
    5658:	df 93       	push	r29
    565a:	cf 93       	push	r28
    565c:	cd b7       	in	r28, 0x3d	; 61
    565e:	de b7       	in	r29, 0x3e	; 62
	MDIO_vSetPinDir(BZR_Port,BZR_Pin,DIO_Output);
    5660:	82 e0       	ldi	r24, 0x02	; 2
    5662:	60 e0       	ldi	r22, 0x00	; 0
    5664:	41 e0       	ldi	r20, 0x01	; 1
    5666:	0e 94 a2 12 	call	0x2544	; 0x2544 <MDIO_vSetPinDir>
	MDIO_vSetPinVal(BZR_Port,BZR_Pin,DIO_LOW);
    566a:	82 e0       	ldi	r24, 0x02	; 2
    566c:	60 e0       	ldi	r22, 0x00	; 0
    566e:	40 e0       	ldi	r20, 0x00	; 0
    5670:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

}
    5674:	cf 91       	pop	r28
    5676:	df 91       	pop	r29
    5678:	08 95       	ret

0000567a <HBZR_vFinish>:
void HBZR_vFinish(void)
{
    567a:	df 93       	push	r29
    567c:	cf 93       	push	r28
    567e:	cd b7       	in	r28, 0x3d	; 61
    5680:	de b7       	in	r29, 0x3e	; 62
    5682:	2e 97       	sbiw	r28, 0x0e	; 14
    5684:	0f b6       	in	r0, 0x3f	; 63
    5686:	f8 94       	cli
    5688:	de bf       	out	0x3e, r29	; 62
    568a:	0f be       	out	0x3f, r0	; 63
    568c:	cd bf       	out	0x3d, r28	; 61
	MDIO_vSetPinVal(BZR_Port,BZR_Pin,DIO_HIGH);
    568e:	82 e0       	ldi	r24, 0x02	; 2
    5690:	60 e0       	ldi	r22, 0x00	; 0
    5692:	41 e0       	ldi	r20, 0x01	; 1
    5694:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    5698:	80 e0       	ldi	r24, 0x00	; 0
    569a:	90 e0       	ldi	r25, 0x00	; 0
    569c:	aa e7       	ldi	r26, 0x7A	; 122
    569e:	b4 e4       	ldi	r27, 0x44	; 68
    56a0:	8b 87       	std	Y+11, r24	; 0x0b
    56a2:	9c 87       	std	Y+12, r25	; 0x0c
    56a4:	ad 87       	std	Y+13, r26	; 0x0d
    56a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    56aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    56ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    56ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    56b0:	20 e0       	ldi	r18, 0x00	; 0
    56b2:	30 e0       	ldi	r19, 0x00	; 0
    56b4:	4a ef       	ldi	r20, 0xFA	; 250
    56b6:	54 e4       	ldi	r21, 0x44	; 68
    56b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56bc:	dc 01       	movw	r26, r24
    56be:	cb 01       	movw	r24, r22
    56c0:	8f 83       	std	Y+7, r24	; 0x07
    56c2:	98 87       	std	Y+8, r25	; 0x08
    56c4:	a9 87       	std	Y+9, r26	; 0x09
    56c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56c8:	6f 81       	ldd	r22, Y+7	; 0x07
    56ca:	78 85       	ldd	r23, Y+8	; 0x08
    56cc:	89 85       	ldd	r24, Y+9	; 0x09
    56ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    56d0:	20 e0       	ldi	r18, 0x00	; 0
    56d2:	30 e0       	ldi	r19, 0x00	; 0
    56d4:	40 e8       	ldi	r20, 0x80	; 128
    56d6:	5f e3       	ldi	r21, 0x3F	; 63
    56d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56dc:	88 23       	and	r24, r24
    56de:	2c f4       	brge	.+10     	; 0x56ea <HBZR_vFinish+0x70>
		__ticks = 1;
    56e0:	81 e0       	ldi	r24, 0x01	; 1
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	9e 83       	std	Y+6, r25	; 0x06
    56e6:	8d 83       	std	Y+5, r24	; 0x05
    56e8:	3f c0       	rjmp	.+126    	; 0x5768 <HBZR_vFinish+0xee>
	else if (__tmp > 65535)
    56ea:	6f 81       	ldd	r22, Y+7	; 0x07
    56ec:	78 85       	ldd	r23, Y+8	; 0x08
    56ee:	89 85       	ldd	r24, Y+9	; 0x09
    56f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    56f2:	20 e0       	ldi	r18, 0x00	; 0
    56f4:	3f ef       	ldi	r19, 0xFF	; 255
    56f6:	4f e7       	ldi	r20, 0x7F	; 127
    56f8:	57 e4       	ldi	r21, 0x47	; 71
    56fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56fe:	18 16       	cp	r1, r24
    5700:	4c f5       	brge	.+82     	; 0x5754 <HBZR_vFinish+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5702:	6b 85       	ldd	r22, Y+11	; 0x0b
    5704:	7c 85       	ldd	r23, Y+12	; 0x0c
    5706:	8d 85       	ldd	r24, Y+13	; 0x0d
    5708:	9e 85       	ldd	r25, Y+14	; 0x0e
    570a:	20 e0       	ldi	r18, 0x00	; 0
    570c:	30 e0       	ldi	r19, 0x00	; 0
    570e:	40 e2       	ldi	r20, 0x20	; 32
    5710:	51 e4       	ldi	r21, 0x41	; 65
    5712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5716:	dc 01       	movw	r26, r24
    5718:	cb 01       	movw	r24, r22
    571a:	bc 01       	movw	r22, r24
    571c:	cd 01       	movw	r24, r26
    571e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5722:	dc 01       	movw	r26, r24
    5724:	cb 01       	movw	r24, r22
    5726:	9e 83       	std	Y+6, r25	; 0x06
    5728:	8d 83       	std	Y+5, r24	; 0x05
    572a:	0f c0       	rjmp	.+30     	; 0x574a <HBZR_vFinish+0xd0>
    572c:	88 ec       	ldi	r24, 0xC8	; 200
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	9c 83       	std	Y+4, r25	; 0x04
    5732:	8b 83       	std	Y+3, r24	; 0x03
    5734:	8b 81       	ldd	r24, Y+3	; 0x03
    5736:	9c 81       	ldd	r25, Y+4	; 0x04
    5738:	01 97       	sbiw	r24, 0x01	; 1
    573a:	f1 f7       	brne	.-4      	; 0x5738 <HBZR_vFinish+0xbe>
    573c:	9c 83       	std	Y+4, r25	; 0x04
    573e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5740:	8d 81       	ldd	r24, Y+5	; 0x05
    5742:	9e 81       	ldd	r25, Y+6	; 0x06
    5744:	01 97       	sbiw	r24, 0x01	; 1
    5746:	9e 83       	std	Y+6, r25	; 0x06
    5748:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    574a:	8d 81       	ldd	r24, Y+5	; 0x05
    574c:	9e 81       	ldd	r25, Y+6	; 0x06
    574e:	00 97       	sbiw	r24, 0x00	; 0
    5750:	69 f7       	brne	.-38     	; 0x572c <HBZR_vFinish+0xb2>
    5752:	14 c0       	rjmp	.+40     	; 0x577c <HBZR_vFinish+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5754:	6f 81       	ldd	r22, Y+7	; 0x07
    5756:	78 85       	ldd	r23, Y+8	; 0x08
    5758:	89 85       	ldd	r24, Y+9	; 0x09
    575a:	9a 85       	ldd	r25, Y+10	; 0x0a
    575c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5760:	dc 01       	movw	r26, r24
    5762:	cb 01       	movw	r24, r22
    5764:	9e 83       	std	Y+6, r25	; 0x06
    5766:	8d 83       	std	Y+5, r24	; 0x05
    5768:	8d 81       	ldd	r24, Y+5	; 0x05
    576a:	9e 81       	ldd	r25, Y+6	; 0x06
    576c:	9a 83       	std	Y+2, r25	; 0x02
    576e:	89 83       	std	Y+1, r24	; 0x01
    5770:	89 81       	ldd	r24, Y+1	; 0x01
    5772:	9a 81       	ldd	r25, Y+2	; 0x02
    5774:	01 97       	sbiw	r24, 0x01	; 1
    5776:	f1 f7       	brne	.-4      	; 0x5774 <HBZR_vFinish+0xfa>
    5778:	9a 83       	std	Y+2, r25	; 0x02
    577a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	MDIO_vSetPinVal(BZR_Port,BZR_Pin,DIO_LOW);
    577c:	82 e0       	ldi	r24, 0x02	; 2
    577e:	60 e0       	ldi	r22, 0x00	; 0
    5780:	40 e0       	ldi	r20, 0x00	; 0
    5782:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>

}
    5786:	2e 96       	adiw	r28, 0x0e	; 14
    5788:	0f b6       	in	r0, 0x3f	; 63
    578a:	f8 94       	cli
    578c:	de bf       	out	0x3e, r29	; 62
    578e:	0f be       	out	0x3f, r0	; 63
    5790:	cd bf       	out	0x3d, r28	; 61
    5792:	cf 91       	pop	r28
    5794:	df 91       	pop	r29
    5796:	08 95       	ret

00005798 <HBZR_vError>:
void HBZR_vError(void)
{
    5798:	df 93       	push	r29
    579a:	cf 93       	push	r28
    579c:	cd b7       	in	r28, 0x3d	; 61
    579e:	de b7       	in	r29, 0x3e	; 62
    57a0:	6c 97       	sbiw	r28, 0x1c	; 28
    57a2:	0f b6       	in	r0, 0x3f	; 63
    57a4:	f8 94       	cli
    57a6:	de bf       	out	0x3e, r29	; 62
    57a8:	0f be       	out	0x3f, r0	; 63
    57aa:	cd bf       	out	0x3d, r28	; 61
	MDIO_vSetPinVal(BZR_Port,BZR_Pin,DIO_HIGH);
    57ac:	82 e0       	ldi	r24, 0x02	; 2
    57ae:	60 e0       	ldi	r22, 0x00	; 0
    57b0:	41 e0       	ldi	r20, 0x01	; 1
    57b2:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    57b6:	80 e0       	ldi	r24, 0x00	; 0
    57b8:	90 e0       	ldi	r25, 0x00	; 0
    57ba:	af e2       	ldi	r26, 0x2F	; 47
    57bc:	b4 e4       	ldi	r27, 0x44	; 68
    57be:	89 8f       	std	Y+25, r24	; 0x19
    57c0:	9a 8f       	std	Y+26, r25	; 0x1a
    57c2:	ab 8f       	std	Y+27, r26	; 0x1b
    57c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57c6:	69 8d       	ldd	r22, Y+25	; 0x19
    57c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57ce:	20 e0       	ldi	r18, 0x00	; 0
    57d0:	30 e0       	ldi	r19, 0x00	; 0
    57d2:	4a ef       	ldi	r20, 0xFA	; 250
    57d4:	54 e4       	ldi	r21, 0x44	; 68
    57d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57da:	dc 01       	movw	r26, r24
    57dc:	cb 01       	movw	r24, r22
    57de:	8d 8b       	std	Y+21, r24	; 0x15
    57e0:	9e 8b       	std	Y+22, r25	; 0x16
    57e2:	af 8b       	std	Y+23, r26	; 0x17
    57e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    57e6:	6d 89       	ldd	r22, Y+21	; 0x15
    57e8:	7e 89       	ldd	r23, Y+22	; 0x16
    57ea:	8f 89       	ldd	r24, Y+23	; 0x17
    57ec:	98 8d       	ldd	r25, Y+24	; 0x18
    57ee:	20 e0       	ldi	r18, 0x00	; 0
    57f0:	30 e0       	ldi	r19, 0x00	; 0
    57f2:	40 e8       	ldi	r20, 0x80	; 128
    57f4:	5f e3       	ldi	r21, 0x3F	; 63
    57f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    57fa:	88 23       	and	r24, r24
    57fc:	2c f4       	brge	.+10     	; 0x5808 <HBZR_vError+0x70>
		__ticks = 1;
    57fe:	81 e0       	ldi	r24, 0x01	; 1
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	9c 8b       	std	Y+20, r25	; 0x14
    5804:	8b 8b       	std	Y+19, r24	; 0x13
    5806:	3f c0       	rjmp	.+126    	; 0x5886 <HBZR_vError+0xee>
	else if (__tmp > 65535)
    5808:	6d 89       	ldd	r22, Y+21	; 0x15
    580a:	7e 89       	ldd	r23, Y+22	; 0x16
    580c:	8f 89       	ldd	r24, Y+23	; 0x17
    580e:	98 8d       	ldd	r25, Y+24	; 0x18
    5810:	20 e0       	ldi	r18, 0x00	; 0
    5812:	3f ef       	ldi	r19, 0xFF	; 255
    5814:	4f e7       	ldi	r20, 0x7F	; 127
    5816:	57 e4       	ldi	r21, 0x47	; 71
    5818:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    581c:	18 16       	cp	r1, r24
    581e:	4c f5       	brge	.+82     	; 0x5872 <HBZR_vError+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5820:	69 8d       	ldd	r22, Y+25	; 0x19
    5822:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5824:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5826:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5828:	20 e0       	ldi	r18, 0x00	; 0
    582a:	30 e0       	ldi	r19, 0x00	; 0
    582c:	40 e2       	ldi	r20, 0x20	; 32
    582e:	51 e4       	ldi	r21, 0x41	; 65
    5830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5834:	dc 01       	movw	r26, r24
    5836:	cb 01       	movw	r24, r22
    5838:	bc 01       	movw	r22, r24
    583a:	cd 01       	movw	r24, r26
    583c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5840:	dc 01       	movw	r26, r24
    5842:	cb 01       	movw	r24, r22
    5844:	9c 8b       	std	Y+20, r25	; 0x14
    5846:	8b 8b       	std	Y+19, r24	; 0x13
    5848:	0f c0       	rjmp	.+30     	; 0x5868 <HBZR_vError+0xd0>
    584a:	88 ec       	ldi	r24, 0xC8	; 200
    584c:	90 e0       	ldi	r25, 0x00	; 0
    584e:	9a 8b       	std	Y+18, r25	; 0x12
    5850:	89 8b       	std	Y+17, r24	; 0x11
    5852:	89 89       	ldd	r24, Y+17	; 0x11
    5854:	9a 89       	ldd	r25, Y+18	; 0x12
    5856:	01 97       	sbiw	r24, 0x01	; 1
    5858:	f1 f7       	brne	.-4      	; 0x5856 <HBZR_vError+0xbe>
    585a:	9a 8b       	std	Y+18, r25	; 0x12
    585c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    585e:	8b 89       	ldd	r24, Y+19	; 0x13
    5860:	9c 89       	ldd	r25, Y+20	; 0x14
    5862:	01 97       	sbiw	r24, 0x01	; 1
    5864:	9c 8b       	std	Y+20, r25	; 0x14
    5866:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5868:	8b 89       	ldd	r24, Y+19	; 0x13
    586a:	9c 89       	ldd	r25, Y+20	; 0x14
    586c:	00 97       	sbiw	r24, 0x00	; 0
    586e:	69 f7       	brne	.-38     	; 0x584a <HBZR_vError+0xb2>
    5870:	14 c0       	rjmp	.+40     	; 0x589a <HBZR_vError+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5872:	6d 89       	ldd	r22, Y+21	; 0x15
    5874:	7e 89       	ldd	r23, Y+22	; 0x16
    5876:	8f 89       	ldd	r24, Y+23	; 0x17
    5878:	98 8d       	ldd	r25, Y+24	; 0x18
    587a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    587e:	dc 01       	movw	r26, r24
    5880:	cb 01       	movw	r24, r22
    5882:	9c 8b       	std	Y+20, r25	; 0x14
    5884:	8b 8b       	std	Y+19, r24	; 0x13
    5886:	8b 89       	ldd	r24, Y+19	; 0x13
    5888:	9c 89       	ldd	r25, Y+20	; 0x14
    588a:	98 8b       	std	Y+16, r25	; 0x10
    588c:	8f 87       	std	Y+15, r24	; 0x0f
    588e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5890:	98 89       	ldd	r25, Y+16	; 0x10
    5892:	01 97       	sbiw	r24, 0x01	; 1
    5894:	f1 f7       	brne	.-4      	; 0x5892 <HBZR_vError+0xfa>
    5896:	98 8b       	std	Y+16, r25	; 0x10
    5898:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(700);
	MDIO_vSetPinVal(BZR_Port,BZR_Pin,DIO_LOW);
    589a:	82 e0       	ldi	r24, 0x02	; 2
    589c:	60 e0       	ldi	r22, 0x00	; 0
    589e:	40 e0       	ldi	r20, 0x00	; 0
    58a0:	0e 94 a2 13 	call	0x2744	; 0x2744 <MDIO_vSetPinVal>
    58a4:	80 e0       	ldi	r24, 0x00	; 0
    58a6:	90 e0       	ldi	r25, 0x00	; 0
    58a8:	af e2       	ldi	r26, 0x2F	; 47
    58aa:	b4 e4       	ldi	r27, 0x44	; 68
    58ac:	8b 87       	std	Y+11, r24	; 0x0b
    58ae:	9c 87       	std	Y+12, r25	; 0x0c
    58b0:	ad 87       	std	Y+13, r26	; 0x0d
    58b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    58b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    58b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    58ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    58bc:	20 e0       	ldi	r18, 0x00	; 0
    58be:	30 e0       	ldi	r19, 0x00	; 0
    58c0:	4a ef       	ldi	r20, 0xFA	; 250
    58c2:	54 e4       	ldi	r21, 0x44	; 68
    58c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58c8:	dc 01       	movw	r26, r24
    58ca:	cb 01       	movw	r24, r22
    58cc:	8f 83       	std	Y+7, r24	; 0x07
    58ce:	98 87       	std	Y+8, r25	; 0x08
    58d0:	a9 87       	std	Y+9, r26	; 0x09
    58d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    58d4:	6f 81       	ldd	r22, Y+7	; 0x07
    58d6:	78 85       	ldd	r23, Y+8	; 0x08
    58d8:	89 85       	ldd	r24, Y+9	; 0x09
    58da:	9a 85       	ldd	r25, Y+10	; 0x0a
    58dc:	20 e0       	ldi	r18, 0x00	; 0
    58de:	30 e0       	ldi	r19, 0x00	; 0
    58e0:	40 e8       	ldi	r20, 0x80	; 128
    58e2:	5f e3       	ldi	r21, 0x3F	; 63
    58e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58e8:	88 23       	and	r24, r24
    58ea:	2c f4       	brge	.+10     	; 0x58f6 <HBZR_vError+0x15e>
		__ticks = 1;
    58ec:	81 e0       	ldi	r24, 0x01	; 1
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	9e 83       	std	Y+6, r25	; 0x06
    58f2:	8d 83       	std	Y+5, r24	; 0x05
    58f4:	3f c0       	rjmp	.+126    	; 0x5974 <HBZR_vError+0x1dc>
	else if (__tmp > 65535)
    58f6:	6f 81       	ldd	r22, Y+7	; 0x07
    58f8:	78 85       	ldd	r23, Y+8	; 0x08
    58fa:	89 85       	ldd	r24, Y+9	; 0x09
    58fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    58fe:	20 e0       	ldi	r18, 0x00	; 0
    5900:	3f ef       	ldi	r19, 0xFF	; 255
    5902:	4f e7       	ldi	r20, 0x7F	; 127
    5904:	57 e4       	ldi	r21, 0x47	; 71
    5906:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    590a:	18 16       	cp	r1, r24
    590c:	4c f5       	brge	.+82     	; 0x5960 <HBZR_vError+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    590e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5910:	7c 85       	ldd	r23, Y+12	; 0x0c
    5912:	8d 85       	ldd	r24, Y+13	; 0x0d
    5914:	9e 85       	ldd	r25, Y+14	; 0x0e
    5916:	20 e0       	ldi	r18, 0x00	; 0
    5918:	30 e0       	ldi	r19, 0x00	; 0
    591a:	40 e2       	ldi	r20, 0x20	; 32
    591c:	51 e4       	ldi	r21, 0x41	; 65
    591e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5922:	dc 01       	movw	r26, r24
    5924:	cb 01       	movw	r24, r22
    5926:	bc 01       	movw	r22, r24
    5928:	cd 01       	movw	r24, r26
    592a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    592e:	dc 01       	movw	r26, r24
    5930:	cb 01       	movw	r24, r22
    5932:	9e 83       	std	Y+6, r25	; 0x06
    5934:	8d 83       	std	Y+5, r24	; 0x05
    5936:	0f c0       	rjmp	.+30     	; 0x5956 <HBZR_vError+0x1be>
    5938:	88 ec       	ldi	r24, 0xC8	; 200
    593a:	90 e0       	ldi	r25, 0x00	; 0
    593c:	9c 83       	std	Y+4, r25	; 0x04
    593e:	8b 83       	std	Y+3, r24	; 0x03
    5940:	8b 81       	ldd	r24, Y+3	; 0x03
    5942:	9c 81       	ldd	r25, Y+4	; 0x04
    5944:	01 97       	sbiw	r24, 0x01	; 1
    5946:	f1 f7       	brne	.-4      	; 0x5944 <HBZR_vError+0x1ac>
    5948:	9c 83       	std	Y+4, r25	; 0x04
    594a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    594c:	8d 81       	ldd	r24, Y+5	; 0x05
    594e:	9e 81       	ldd	r25, Y+6	; 0x06
    5950:	01 97       	sbiw	r24, 0x01	; 1
    5952:	9e 83       	std	Y+6, r25	; 0x06
    5954:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5956:	8d 81       	ldd	r24, Y+5	; 0x05
    5958:	9e 81       	ldd	r25, Y+6	; 0x06
    595a:	00 97       	sbiw	r24, 0x00	; 0
    595c:	69 f7       	brne	.-38     	; 0x5938 <HBZR_vError+0x1a0>
    595e:	14 c0       	rjmp	.+40     	; 0x5988 <HBZR_vError+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5960:	6f 81       	ldd	r22, Y+7	; 0x07
    5962:	78 85       	ldd	r23, Y+8	; 0x08
    5964:	89 85       	ldd	r24, Y+9	; 0x09
    5966:	9a 85       	ldd	r25, Y+10	; 0x0a
    5968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    596c:	dc 01       	movw	r26, r24
    596e:	cb 01       	movw	r24, r22
    5970:	9e 83       	std	Y+6, r25	; 0x06
    5972:	8d 83       	std	Y+5, r24	; 0x05
    5974:	8d 81       	ldd	r24, Y+5	; 0x05
    5976:	9e 81       	ldd	r25, Y+6	; 0x06
    5978:	9a 83       	std	Y+2, r25	; 0x02
    597a:	89 83       	std	Y+1, r24	; 0x01
    597c:	89 81       	ldd	r24, Y+1	; 0x01
    597e:	9a 81       	ldd	r25, Y+2	; 0x02
    5980:	01 97       	sbiw	r24, 0x01	; 1
    5982:	f1 f7       	brne	.-4      	; 0x5980 <HBZR_vError+0x1e8>
    5984:	9a 83       	std	Y+2, r25	; 0x02
    5986:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(700);

}
    5988:	6c 96       	adiw	r28, 0x1c	; 28
    598a:	0f b6       	in	r0, 0x3f	; 63
    598c:	f8 94       	cli
    598e:	de bf       	out	0x3e, r29	; 62
    5990:	0f be       	out	0x3f, r0	; 63
    5992:	cd bf       	out	0x3d, r28	; 61
    5994:	cf 91       	pop	r28
    5996:	df 91       	pop	r29
    5998:	08 95       	ret

0000599a <main>:
void SSD_DESPLAY(void);
void ScanColor(void);
void FillBox(void);


void main(void){
    599a:	0f 93       	push	r16
    599c:	1f 93       	push	r17
    599e:	df 93       	push	r29
    59a0:	cf 93       	push	r28
    59a2:	00 d0       	rcall	.+0      	; 0x59a4 <main+0xa>
    59a4:	cd b7       	in	r28, 0x3d	; 61
    59a6:	de b7       	in	r29, 0x3e	; 62


	HCLR_vInit();
    59a8:	0e 94 4f 2a 	call	0x549e	; 0x549e <HCLR_vInit>
	HBZR_vInit();
    59ac:	0e 94 2c 2b 	call	0x5658	; 0x5658 <HBZR_vInit>
	HKPD_init();
    59b0:	0e 94 63 28 	call	0x50c6	; 0x50c6 <HKPD_init>
	HLCD_vInit();
    59b4:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <HLCD_vInit>
	HLDCL_vInit();
    59b8:	0e 94 d5 18 	call	0x31aa	; 0x31aa <HLDCL_vInit>
	HSRV_vInit();
    59bc:	0e 94 05 18 	call	0x300a	; 0x300a <HSRV_vInit>
	HSYS_vInit();
    59c0:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <HSYS_vInit>
	HSTPR_Init();
    59c4:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <HSTPR_Init>
	HSHFT_vInit();
    59c8:	0e 94 74 18 	call	0x30e8	; 0x30e8 <HSHFT_vInit>

	u08 count_B=0;
    59cc:	1a 82       	std	Y+2, r1	; 0x02
	u08 CounterWeight=0;
    59ce:	19 82       	std	Y+1, r1	; 0x01
	interface();
    59d0:	0e 94 65 2d 	call	0x5aca	; 0x5aca <interface>

	MTMR_vInit();
    59d4:	0e 94 4c 09 	call	0x1298	; 0x1298 <MTMR_vInit>

	MGIE_vEnableGlobalInterrubt();
    59d8:	0e 94 ed 11 	call	0x23da	; 0x23da <MGIE_vEnableGlobalInterrubt>
	MTMR_vDelayOVF(Timer2,SSDRefreshTime,SSD_DESPLAY);
    59dc:	21 ee       	ldi	r18, 0xE1	; 225
    59de:	3f e2       	ldi	r19, 0x2F	; 47
    59e0:	82 e0       	ldi	r24, 0x02	; 2
    59e2:	64 e1       	ldi	r22, 0x14	; 20
    59e4:	70 e0       	ldi	r23, 0x00	; 0
    59e6:	a9 01       	movw	r20, r18
    59e8:	0e 94 8c 0a 	call	0x1518	; 0x1518 <MTMR_vDelayOVF>
	MTMR_vDelayOVF(Timer2,MotorRefreshTime,HSTPR_Rotate);
    59ec:	2e e2       	ldi	r18, 0x2E	; 46
    59ee:	37 e1       	ldi	r19, 0x17	; 23
    59f0:	82 e0       	ldi	r24, 0x02	; 2
    59f2:	61 e0       	ldi	r22, 0x01	; 1
    59f4:	70 e0       	ldi	r23, 0x00	; 0
    59f6:	a9 01       	movw	r20, r18
    59f8:	0e 94 8c 0a 	call	0x1518	; 0x1518 <MTMR_vDelayOVF>
	while(1)
	{
		if(HIR_u8ReadIR(&IR1_t))
    59fc:	89 eb       	ldi	r24, 0xB9	; 185
    59fe:	90 e0       	ldi	r25, 0x00	; 0
    5a00:	0e 94 ff 29 	call	0x53fe	; 0x53fe <HIR_u8ReadIR>
    5a04:	88 23       	and	r24, r24
    5a06:	d1 f3       	breq	.-12     	; 0x59fc <main+0x62>
		{
			HSYS_vTurnON(LC);
    5a08:	85 e0       	ldi	r24, 0x05	; 5
    5a0a:	0e 94 41 16 	call	0x2c82	; 0x2c82 <HSYS_vTurnON>
			MTMR_vEndTimer(Timer0);
    5a0e:	80 e0       	ldi	r24, 0x00	; 0
    5a10:	0e 94 55 0a 	call	0x14aa	; 0x14aa <MTMR_vEndTimer>
			Weight_B[CounterWeight]=HLDCL_vRead();
    5a14:	89 81       	ldd	r24, Y+1	; 0x01
    5a16:	08 2f       	mov	r16, r24
    5a18:	10 e0       	ldi	r17, 0x00	; 0
    5a1a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <HLDCL_vRead>
    5a1e:	f8 01       	movw	r30, r16
    5a20:	ea 5a       	subi	r30, 0xAA	; 170
    5a22:	fe 4f       	sbci	r31, 0xFE	; 254
    5a24:	80 83       	st	Z, r24
			MTMR_vStartTimer(Timer0);
    5a26:	80 e0       	ldi	r24, 0x00	; 0
    5a28:	0e 94 1b 0a 	call	0x1436	; 0x1436 <MTMR_vStartTimer>
			if((Weight_B[CounterWeight]>=(Weight-50))||(Weight_B[CounterWeight]<=(Weight+50)))
    5a2c:	89 81       	ldd	r24, Y+1	; 0x01
    5a2e:	88 2f       	mov	r24, r24
    5a30:	90 e0       	ldi	r25, 0x00	; 0
    5a32:	fc 01       	movw	r30, r24
    5a34:	ea 5a       	subi	r30, 0xAA	; 170
    5a36:	fe 4f       	sbci	r31, 0xFE	; 254
    5a38:	80 81       	ld	r24, Z
    5a3a:	28 2f       	mov	r18, r24
    5a3c:	30 e0       	ldi	r19, 0x00	; 0
    5a3e:	80 91 f7 00 	lds	r24, 0x00F7
    5a42:	88 2f       	mov	r24, r24
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	c2 97       	sbiw	r24, 0x32	; 50
    5a48:	28 17       	cp	r18, r24
    5a4a:	39 07       	cpc	r19, r25
    5a4c:	8c f4       	brge	.+34     	; 0x5a70 <main+0xd6>
    5a4e:	89 81       	ldd	r24, Y+1	; 0x01
    5a50:	88 2f       	mov	r24, r24
    5a52:	90 e0       	ldi	r25, 0x00	; 0
    5a54:	fc 01       	movw	r30, r24
    5a56:	ea 5a       	subi	r30, 0xAA	; 170
    5a58:	fe 4f       	sbci	r31, 0xFE	; 254
    5a5a:	80 81       	ld	r24, Z
    5a5c:	28 2f       	mov	r18, r24
    5a5e:	30 e0       	ldi	r19, 0x00	; 0
    5a60:	80 91 f7 00 	lds	r24, 0x00F7
    5a64:	88 2f       	mov	r24, r24
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	c2 96       	adiw	r24, 0x32	; 50
    5a6a:	82 17       	cp	r24, r18
    5a6c:	93 07       	cpc	r25, r19
    5a6e:	8c f0       	brlt	.+34     	; 0x5a92 <main+0xf8>
			{
				Flag_Appropriate[CounterWeight]=1;
    5a70:	89 81       	ldd	r24, Y+1	; 0x01
    5a72:	88 2f       	mov	r24, r24
    5a74:	90 e0       	ldi	r25, 0x00	; 0
    5a76:	fc 01       	movw	r30, r24
    5a78:	e7 50       	subi	r30, 0x07	; 7
    5a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7c:	81 e0       	ldi	r24, 0x01	; 1
    5a7e:	80 83       	st	Z, r24
				MTMR_vDelayOVF(Timer0,W2C,ScanColor);
    5a80:	2e ee       	ldi	r18, 0xEE	; 238
    5a82:	3f e2       	ldi	r19, 0x2F	; 47
    5a84:	80 e0       	ldi	r24, 0x00	; 0
    5a86:	68 ee       	ldi	r22, 0xE8	; 232
    5a88:	73 e0       	ldi	r23, 0x03	; 3
    5a8a:	a9 01       	movw	r20, r18
    5a8c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <MTMR_vDelayOVF>
    5a90:	0b c0       	rjmp	.+22     	; 0x5aa8 <main+0x10e>
			}
			else
			{
				MTMR_vDelayOVF(Timer0,W2S,ScanColor);
    5a92:	2e ee       	ldi	r18, 0xEE	; 238
    5a94:	3f e2       	ldi	r19, 0x2F	; 47
    5a96:	80 e0       	ldi	r24, 0x00	; 0
    5a98:	60 ed       	ldi	r22, 0xD0	; 208
    5a9a:	77 e0       	ldi	r23, 0x07	; 7
    5a9c:	a9 01       	movw	r20, r18
    5a9e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <MTMR_vDelayOVF>
				CounterWeight++;
    5aa2:	89 81       	ldd	r24, Y+1	; 0x01
    5aa4:	8f 5f       	subi	r24, 0xFF	; 255
    5aa6:	89 83       	std	Y+1, r24	; 0x01

			}
			HSYS_vTurnOFF(LC);
    5aa8:	85 e0       	ldi	r24, 0x05	; 5
    5aaa:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HSYS_vTurnOFF>
			HSYS_vTurnON(Servo);
    5aae:	84 e0       	ldi	r24, 0x04	; 4
    5ab0:	0e 94 41 16 	call	0x2c82	; 0x2c82 <HSYS_vTurnON>
			HSRV_vSetAngle(90);
    5ab4:	8a e5       	ldi	r24, 0x5A	; 90
    5ab6:	0e 94 19 18 	call	0x3032	; 0x3032 <HSRV_vSetAngle>
			HSTPR_Walk();
    5aba:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <HSTPR_Walk>
			if(CounterWeight==5)
    5abe:	89 81       	ldd	r24, Y+1	; 0x01
    5ac0:	85 30       	cpi	r24, 0x05	; 5
    5ac2:	09 f0       	breq	.+2      	; 0x5ac6 <main+0x12c>
    5ac4:	9b cf       	rjmp	.-202    	; 0x59fc <main+0x62>
				CounterWeight=0;
    5ac6:	19 82       	std	Y+1, r1	; 0x01
    5ac8:	99 cf       	rjmp	.-206    	; 0x59fc <main+0x62>

00005aca <interface>:
		}
	}
}

void interface(void)
{
    5aca:	df 93       	push	r29
    5acc:	cf 93       	push	r28
    5ace:	cd b7       	in	r28, 0x3d	; 61
    5ad0:	de b7       	in	r29, 0x3e	; 62
    5ad2:	6e 97       	sbiw	r28, 0x1e	; 30
    5ad4:	0f b6       	in	r0, 0x3f	; 63
    5ad6:	f8 94       	cli
    5ad8:	de bf       	out	0x3e, r29	; 62
    5ada:	0f be       	out	0x3f, r0	; 63
    5adc:	cd bf       	out	0x3d, r28	; 61
    5ade:	80 e0       	ldi	r24, 0x00	; 0
    5ae0:	90 e0       	ldi	r25, 0x00	; 0
    5ae2:	aa ef       	ldi	r26, 0xFA	; 250
    5ae4:	b3 e4       	ldi	r27, 0x43	; 67
    5ae6:	89 8f       	std	Y+25, r24	; 0x19
    5ae8:	9a 8f       	std	Y+26, r25	; 0x1a
    5aea:	ab 8f       	std	Y+27, r26	; 0x1b
    5aec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5aee:	69 8d       	ldd	r22, Y+25	; 0x19
    5af0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5af2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5af4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5af6:	20 e0       	ldi	r18, 0x00	; 0
    5af8:	30 e0       	ldi	r19, 0x00	; 0
    5afa:	4a ef       	ldi	r20, 0xFA	; 250
    5afc:	54 e4       	ldi	r21, 0x44	; 68
    5afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b02:	dc 01       	movw	r26, r24
    5b04:	cb 01       	movw	r24, r22
    5b06:	8d 8b       	std	Y+21, r24	; 0x15
    5b08:	9e 8b       	std	Y+22, r25	; 0x16
    5b0a:	af 8b       	std	Y+23, r26	; 0x17
    5b0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5b0e:	6d 89       	ldd	r22, Y+21	; 0x15
    5b10:	7e 89       	ldd	r23, Y+22	; 0x16
    5b12:	8f 89       	ldd	r24, Y+23	; 0x17
    5b14:	98 8d       	ldd	r25, Y+24	; 0x18
    5b16:	20 e0       	ldi	r18, 0x00	; 0
    5b18:	30 e0       	ldi	r19, 0x00	; 0
    5b1a:	40 e8       	ldi	r20, 0x80	; 128
    5b1c:	5f e3       	ldi	r21, 0x3F	; 63
    5b1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b22:	88 23       	and	r24, r24
    5b24:	2c f4       	brge	.+10     	; 0x5b30 <interface+0x66>
		__ticks = 1;
    5b26:	81 e0       	ldi	r24, 0x01	; 1
    5b28:	90 e0       	ldi	r25, 0x00	; 0
    5b2a:	9c 8b       	std	Y+20, r25	; 0x14
    5b2c:	8b 8b       	std	Y+19, r24	; 0x13
    5b2e:	3f c0       	rjmp	.+126    	; 0x5bae <interface+0xe4>
	else if (__tmp > 65535)
    5b30:	6d 89       	ldd	r22, Y+21	; 0x15
    5b32:	7e 89       	ldd	r23, Y+22	; 0x16
    5b34:	8f 89       	ldd	r24, Y+23	; 0x17
    5b36:	98 8d       	ldd	r25, Y+24	; 0x18
    5b38:	20 e0       	ldi	r18, 0x00	; 0
    5b3a:	3f ef       	ldi	r19, 0xFF	; 255
    5b3c:	4f e7       	ldi	r20, 0x7F	; 127
    5b3e:	57 e4       	ldi	r21, 0x47	; 71
    5b40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b44:	18 16       	cp	r1, r24
    5b46:	4c f5       	brge	.+82     	; 0x5b9a <interface+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b48:	69 8d       	ldd	r22, Y+25	; 0x19
    5b4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b50:	20 e0       	ldi	r18, 0x00	; 0
    5b52:	30 e0       	ldi	r19, 0x00	; 0
    5b54:	40 e2       	ldi	r20, 0x20	; 32
    5b56:	51 e4       	ldi	r21, 0x41	; 65
    5b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b5c:	dc 01       	movw	r26, r24
    5b5e:	cb 01       	movw	r24, r22
    5b60:	bc 01       	movw	r22, r24
    5b62:	cd 01       	movw	r24, r26
    5b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b68:	dc 01       	movw	r26, r24
    5b6a:	cb 01       	movw	r24, r22
    5b6c:	9c 8b       	std	Y+20, r25	; 0x14
    5b6e:	8b 8b       	std	Y+19, r24	; 0x13
    5b70:	0f c0       	rjmp	.+30     	; 0x5b90 <interface+0xc6>
    5b72:	88 ec       	ldi	r24, 0xC8	; 200
    5b74:	90 e0       	ldi	r25, 0x00	; 0
    5b76:	9a 8b       	std	Y+18, r25	; 0x12
    5b78:	89 8b       	std	Y+17, r24	; 0x11
    5b7a:	89 89       	ldd	r24, Y+17	; 0x11
    5b7c:	9a 89       	ldd	r25, Y+18	; 0x12
    5b7e:	01 97       	sbiw	r24, 0x01	; 1
    5b80:	f1 f7       	brne	.-4      	; 0x5b7e <interface+0xb4>
    5b82:	9a 8b       	std	Y+18, r25	; 0x12
    5b84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b86:	8b 89       	ldd	r24, Y+19	; 0x13
    5b88:	9c 89       	ldd	r25, Y+20	; 0x14
    5b8a:	01 97       	sbiw	r24, 0x01	; 1
    5b8c:	9c 8b       	std	Y+20, r25	; 0x14
    5b8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b90:	8b 89       	ldd	r24, Y+19	; 0x13
    5b92:	9c 89       	ldd	r25, Y+20	; 0x14
    5b94:	00 97       	sbiw	r24, 0x00	; 0
    5b96:	69 f7       	brne	.-38     	; 0x5b72 <interface+0xa8>
    5b98:	14 c0       	rjmp	.+40     	; 0x5bc2 <interface+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    5b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    5b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    5ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    5ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ba6:	dc 01       	movw	r26, r24
    5ba8:	cb 01       	movw	r24, r22
    5baa:	9c 8b       	std	Y+20, r25	; 0x14
    5bac:	8b 8b       	std	Y+19, r24	; 0x13
    5bae:	8b 89       	ldd	r24, Y+19	; 0x13
    5bb0:	9c 89       	ldd	r25, Y+20	; 0x14
    5bb2:	98 8b       	std	Y+16, r25	; 0x10
    5bb4:	8f 87       	std	Y+15, r24	; 0x0f
    5bb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    5bb8:	98 89       	ldd	r25, Y+16	; 0x10
    5bba:	01 97       	sbiw	r24, 0x01	; 1
    5bbc:	f1 f7       	brne	.-4      	; 0x5bba <interface+0xf0>
    5bbe:	98 8b       	std	Y+16, r25	; 0x10
    5bc0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	HLCD_vSetCursorPosition(1,8);
    5bc2:	81 e0       	ldi	r24, 0x01	; 1
    5bc4:	68 e0       	ldi	r22, 0x08	; 8
    5bc6:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <HLCD_vSetCursorPosition>
	HLCD_vPrintString("Hello");
    5bca:	80 e6       	ldi	r24, 0x60	; 96
    5bcc:	90 e0       	ldi	r25, 0x00	; 0
    5bce:	0e 94 47 24 	call	0x488e	; 0x488e <HLCD_vPrintString>
    5bd2:	80 e0       	ldi	r24, 0x00	; 0
    5bd4:	90 e0       	ldi	r25, 0x00	; 0
    5bd6:	aa e7       	ldi	r26, 0x7A	; 122
    5bd8:	b4 e4       	ldi	r27, 0x44	; 68
    5bda:	8b 87       	std	Y+11, r24	; 0x0b
    5bdc:	9c 87       	std	Y+12, r25	; 0x0c
    5bde:	ad 87       	std	Y+13, r26	; 0x0d
    5be0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    5be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    5be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bea:	20 e0       	ldi	r18, 0x00	; 0
    5bec:	30 e0       	ldi	r19, 0x00	; 0
    5bee:	4a ef       	ldi	r20, 0xFA	; 250
    5bf0:	54 e4       	ldi	r21, 0x44	; 68
    5bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bf6:	dc 01       	movw	r26, r24
    5bf8:	cb 01       	movw	r24, r22
    5bfa:	8f 83       	std	Y+7, r24	; 0x07
    5bfc:	98 87       	std	Y+8, r25	; 0x08
    5bfe:	a9 87       	std	Y+9, r26	; 0x09
    5c00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c02:	6f 81       	ldd	r22, Y+7	; 0x07
    5c04:	78 85       	ldd	r23, Y+8	; 0x08
    5c06:	89 85       	ldd	r24, Y+9	; 0x09
    5c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c0a:	20 e0       	ldi	r18, 0x00	; 0
    5c0c:	30 e0       	ldi	r19, 0x00	; 0
    5c0e:	40 e8       	ldi	r20, 0x80	; 128
    5c10:	5f e3       	ldi	r21, 0x3F	; 63
    5c12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c16:	88 23       	and	r24, r24
    5c18:	2c f4       	brge	.+10     	; 0x5c24 <interface+0x15a>
		__ticks = 1;
    5c1a:	81 e0       	ldi	r24, 0x01	; 1
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	9e 83       	std	Y+6, r25	; 0x06
    5c20:	8d 83       	std	Y+5, r24	; 0x05
    5c22:	3f c0       	rjmp	.+126    	; 0x5ca2 <interface+0x1d8>
	else if (__tmp > 65535)
    5c24:	6f 81       	ldd	r22, Y+7	; 0x07
    5c26:	78 85       	ldd	r23, Y+8	; 0x08
    5c28:	89 85       	ldd	r24, Y+9	; 0x09
    5c2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c2c:	20 e0       	ldi	r18, 0x00	; 0
    5c2e:	3f ef       	ldi	r19, 0xFF	; 255
    5c30:	4f e7       	ldi	r20, 0x7F	; 127
    5c32:	57 e4       	ldi	r21, 0x47	; 71
    5c34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c38:	18 16       	cp	r1, r24
    5c3a:	4c f5       	brge	.+82     	; 0x5c8e <interface+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c44:	20 e0       	ldi	r18, 0x00	; 0
    5c46:	30 e0       	ldi	r19, 0x00	; 0
    5c48:	40 e2       	ldi	r20, 0x20	; 32
    5c4a:	51 e4       	ldi	r21, 0x41	; 65
    5c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c50:	dc 01       	movw	r26, r24
    5c52:	cb 01       	movw	r24, r22
    5c54:	bc 01       	movw	r22, r24
    5c56:	cd 01       	movw	r24, r26
    5c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c5c:	dc 01       	movw	r26, r24
    5c5e:	cb 01       	movw	r24, r22
    5c60:	9e 83       	std	Y+6, r25	; 0x06
    5c62:	8d 83       	std	Y+5, r24	; 0x05
    5c64:	0f c0       	rjmp	.+30     	; 0x5c84 <interface+0x1ba>
    5c66:	88 ec       	ldi	r24, 0xC8	; 200
    5c68:	90 e0       	ldi	r25, 0x00	; 0
    5c6a:	9c 83       	std	Y+4, r25	; 0x04
    5c6c:	8b 83       	std	Y+3, r24	; 0x03
    5c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    5c70:	9c 81       	ldd	r25, Y+4	; 0x04
    5c72:	01 97       	sbiw	r24, 0x01	; 1
    5c74:	f1 f7       	brne	.-4      	; 0x5c72 <interface+0x1a8>
    5c76:	9c 83       	std	Y+4, r25	; 0x04
    5c78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    5c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    5c7e:	01 97       	sbiw	r24, 0x01	; 1
    5c80:	9e 83       	std	Y+6, r25	; 0x06
    5c82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c84:	8d 81       	ldd	r24, Y+5	; 0x05
    5c86:	9e 81       	ldd	r25, Y+6	; 0x06
    5c88:	00 97       	sbiw	r24, 0x00	; 0
    5c8a:	69 f7       	brne	.-38     	; 0x5c66 <interface+0x19c>
    5c8c:	14 c0       	rjmp	.+40     	; 0x5cb6 <interface+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    5c90:	78 85       	ldd	r23, Y+8	; 0x08
    5c92:	89 85       	ldd	r24, Y+9	; 0x09
    5c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c9a:	dc 01       	movw	r26, r24
    5c9c:	cb 01       	movw	r24, r22
    5c9e:	9e 83       	std	Y+6, r25	; 0x06
    5ca0:	8d 83       	std	Y+5, r24	; 0x05
    5ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    5ca6:	9a 83       	std	Y+2, r25	; 0x02
    5ca8:	89 83       	std	Y+1, r24	; 0x01
    5caa:	89 81       	ldd	r24, Y+1	; 0x01
    5cac:	9a 81       	ldd	r25, Y+2	; 0x02
    5cae:	01 97       	sbiw	r24, 0x01	; 1
    5cb0:	f1 f7       	brne	.-4      	; 0x5cae <interface+0x1e4>
    5cb2:	9a 83       	std	Y+2, r25	; 0x02
    5cb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	HLCD_vClearDisplay();
    5cb6:	0e 94 24 1b 	call	0x3648	; 0x3648 <HLCD_vClearDisplay>
	HLCD_vSetCursorPosition(0,1);
    5cba:	80 e0       	ldi	r24, 0x00	; 0
    5cbc:	61 e0       	ldi	r22, 0x01	; 1
    5cbe:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <HLCD_vSetCursorPosition>
	HLCD_vPrintString("Color: ");
    5cc2:	86 e6       	ldi	r24, 0x66	; 102
    5cc4:	90 e0       	ldi	r25, 0x00	; 0
    5cc6:	0e 94 47 24 	call	0x488e	; 0x488e <HLCD_vPrintString>
	HLCD_vSetCursorPosition(1,1);
    5cca:	81 e0       	ldi	r24, 0x01	; 1
    5ccc:	61 e0       	ldi	r22, 0x01	; 1
    5cce:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <HLCD_vSetCursorPosition>
	HLCD_vPrintString("1-RED ");
    5cd2:	8e e6       	ldi	r24, 0x6E	; 110
    5cd4:	90 e0       	ldi	r25, 0x00	; 0
    5cd6:	0e 94 47 24 	call	0x488e	; 0x488e <HLCD_vPrintString>
	HLCD_vSetCursorPosition(2,1);
    5cda:	82 e0       	ldi	r24, 0x02	; 2
    5cdc:	61 e0       	ldi	r22, 0x01	; 1
    5cde:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <HLCD_vSetCursorPosition>
	HLCD_vPrintString("2-GREEN ");
    5ce2:	85 e7       	ldi	r24, 0x75	; 117
    5ce4:	90 e0       	ldi	r25, 0x00	; 0
    5ce6:	0e 94 47 24 	call	0x488e	; 0x488e <HLCD_vPrintString>
	HLCD_vSetCursorPosition(3,1);
    5cea:	83 e0       	ldi	r24, 0x03	; 3
    5cec:	61 e0       	ldi	r22, 0x01	; 1
    5cee:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <HLCD_vSetCursorPosition>
	HLCD_vPrintString("3-BLUE ");
    5cf2:	8e e7       	ldi	r24, 0x7E	; 126
    5cf4:	90 e0       	ldi	r25, 0x00	; 0
    5cf6:	0e 94 47 24 	call	0x488e	; 0x488e <HLCD_vPrintString>
	while(HKPD_u8GetPressedKey());
    5cfa:	0e 94 72 28 	call	0x50e4	; 0x50e4 <HKPD_u8GetPressedKey>
    5cfe:	88 23       	and	r24, r24
    5d00:	e1 f7       	brne	.-8      	; 0x5cfa <interface+0x230>
	Color=HKPD_u8GetPressedKey();
    5d02:	0e 94 72 28 	call	0x50e4	; 0x50e4 <HKPD_u8GetPressedKey>
    5d06:	80 93 f6 00 	sts	0x00F6, r24
	HLCD_vClearDisplay();
    5d0a:	0e 94 24 1b 	call	0x3648	; 0x3648 <HLCD_vClearDisplay>
	HLCD_vSetCursorPosition(0,1);
    5d0e:	80 e0       	ldi	r24, 0x00	; 0
    5d10:	61 e0       	ldi	r22, 0x01	; 1
    5d12:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <HLCD_vSetCursorPosition>
	HLCD_vPrintString("Weight(in grams): ");
    5d16:	86 e8       	ldi	r24, 0x86	; 134
    5d18:	90 e0       	ldi	r25, 0x00	; 0
    5d1a:	0e 94 47 24 	call	0x488e	; 0x488e <HLCD_vPrintString>
	while(HKPD_u8GetPressedKey());
    5d1e:	0e 94 72 28 	call	0x50e4	; 0x50e4 <HKPD_u8GetPressedKey>
    5d22:	88 23       	and	r24, r24
    5d24:	e1 f7       	brne	.-8      	; 0x5d1e <interface+0x254>
	u08 counter_1=0;
    5d26:	1e 8e       	std	Y+30, r1	; 0x1e
    5d28:	2d c0       	rjmp	.+90     	; 0x5d84 <interface+0x2ba>
	while(HKPD_u8GetPressedKey()!='#')
	{
		Weight*=10;
    5d2a:	80 91 f7 00 	lds	r24, 0x00F7
    5d2e:	88 2f       	mov	r24, r24
    5d30:	90 e0       	ldi	r25, 0x00	; 0
    5d32:	9c 01       	movw	r18, r24
    5d34:	22 0f       	add	r18, r18
    5d36:	33 1f       	adc	r19, r19
    5d38:	c9 01       	movw	r24, r18
    5d3a:	88 0f       	add	r24, r24
    5d3c:	99 1f       	adc	r25, r25
    5d3e:	88 0f       	add	r24, r24
    5d40:	99 1f       	adc	r25, r25
    5d42:	82 0f       	add	r24, r18
    5d44:	93 1f       	adc	r25, r19
    5d46:	80 93 f7 00 	sts	0x00F7, r24
		Weight+=(HKPD_u8GetPressedKey()-'0');
    5d4a:	0e 94 72 28 	call	0x50e4	; 0x50e4 <HKPD_u8GetPressedKey>
    5d4e:	98 2f       	mov	r25, r24
    5d50:	80 91 f7 00 	lds	r24, 0x00F7
    5d54:	89 0f       	add	r24, r25
    5d56:	80 53       	subi	r24, 0x30	; 48
    5d58:	80 93 f7 00 	sts	0x00F7, r24
		counter_1++;
    5d5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d5e:	8f 5f       	subi	r24, 0xFF	; 255
    5d60:	8e 8f       	std	Y+30, r24	; 0x1e
		HLCD_vSetCursorPosition(0,20-counter_1);
    5d62:	94 e1       	ldi	r25, 0x14	; 20
    5d64:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5d66:	98 1b       	sub	r25, r24
    5d68:	80 e0       	ldi	r24, 0x00	; 0
    5d6a:	69 2f       	mov	r22, r25
    5d6c:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <HLCD_vSetCursorPosition>
		HLCD_vPrintNumber(Weight);
    5d70:	80 91 f7 00 	lds	r24, 0x00F7
    5d74:	88 2f       	mov	r24, r24
    5d76:	90 e0       	ldi	r25, 0x00	; 0
    5d78:	a0 e0       	ldi	r26, 0x00	; 0
    5d7a:	b0 e0       	ldi	r27, 0x00	; 0
    5d7c:	bc 01       	movw	r22, r24
    5d7e:	cd 01       	movw	r24, r26
    5d80:	0e 94 70 24 	call	0x48e0	; 0x48e0 <HLCD_vPrintNumber>
	HLCD_vClearDisplay();
	HLCD_vSetCursorPosition(0,1);
	HLCD_vPrintString("Weight(in grams): ");
	while(HKPD_u8GetPressedKey());
	u08 counter_1=0;
	while(HKPD_u8GetPressedKey()!='#')
    5d84:	0e 94 72 28 	call	0x50e4	; 0x50e4 <HKPD_u8GetPressedKey>
    5d88:	83 32       	cpi	r24, 0x23	; 35
    5d8a:	79 f6       	brne	.-98     	; 0x5d2a <interface+0x260>
		counter_1++;
		HLCD_vSetCursorPosition(0,20-counter_1);
		HLCD_vPrintNumber(Weight);

	}
	HLCD_vClearDisplay();
    5d8c:	0e 94 24 1b 	call	0x3648	; 0x3648 <HLCD_vClearDisplay>
	HLCD_vSetCursorPosition(0,1);
    5d90:	80 e0       	ldi	r24, 0x00	; 0
    5d92:	61 e0       	ldi	r22, 0x01	; 1
    5d94:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <HLCD_vSetCursorPosition>
	HLCD_vPrintString("Count: ");
    5d98:	89 e9       	ldi	r24, 0x99	; 153
    5d9a:	90 e0       	ldi	r25, 0x00	; 0
    5d9c:	0e 94 47 24 	call	0x488e	; 0x488e <HLCD_vPrintString>
	while(HKPD_u8GetPressedKey());
    5da0:	0e 94 72 28 	call	0x50e4	; 0x50e4 <HKPD_u8GetPressedKey>
    5da4:	88 23       	and	r24, r24
    5da6:	e1 f7       	brne	.-8      	; 0x5da0 <interface+0x2d6>
	u08 counter_2=0;
    5da8:	1d 8e       	std	Y+29, r1	; 0x1d
    5daa:	2d c0       	rjmp	.+90     	; 0x5e06 <interface+0x33c>
	while(HKPD_u8GetPressedKey()!='#')
	{
		count*=10;
    5dac:	80 91 f5 00 	lds	r24, 0x00F5
    5db0:	88 2f       	mov	r24, r24
    5db2:	90 e0       	ldi	r25, 0x00	; 0
    5db4:	9c 01       	movw	r18, r24
    5db6:	22 0f       	add	r18, r18
    5db8:	33 1f       	adc	r19, r19
    5dba:	c9 01       	movw	r24, r18
    5dbc:	88 0f       	add	r24, r24
    5dbe:	99 1f       	adc	r25, r25
    5dc0:	88 0f       	add	r24, r24
    5dc2:	99 1f       	adc	r25, r25
    5dc4:	82 0f       	add	r24, r18
    5dc6:	93 1f       	adc	r25, r19
    5dc8:	80 93 f5 00 	sts	0x00F5, r24
		count+=(HKPD_u8GetPressedKey()-'0');
    5dcc:	0e 94 72 28 	call	0x50e4	; 0x50e4 <HKPD_u8GetPressedKey>
    5dd0:	98 2f       	mov	r25, r24
    5dd2:	80 91 f5 00 	lds	r24, 0x00F5
    5dd6:	89 0f       	add	r24, r25
    5dd8:	80 53       	subi	r24, 0x30	; 48
    5dda:	80 93 f5 00 	sts	0x00F5, r24
		counter_2++;
    5dde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5de0:	8f 5f       	subi	r24, 0xFF	; 255
    5de2:	8d 8f       	std	Y+29, r24	; 0x1d
		HLCD_vSetCursorPosition(0,20-counter_2);
    5de4:	94 e1       	ldi	r25, 0x14	; 20
    5de6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5de8:	98 1b       	sub	r25, r24
    5dea:	80 e0       	ldi	r24, 0x00	; 0
    5dec:	69 2f       	mov	r22, r25
    5dee:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <HLCD_vSetCursorPosition>
		HLCD_vPrintNumber(count);
    5df2:	80 91 f5 00 	lds	r24, 0x00F5
    5df6:	88 2f       	mov	r24, r24
    5df8:	90 e0       	ldi	r25, 0x00	; 0
    5dfa:	a0 e0       	ldi	r26, 0x00	; 0
    5dfc:	b0 e0       	ldi	r27, 0x00	; 0
    5dfe:	bc 01       	movw	r22, r24
    5e00:	cd 01       	movw	r24, r26
    5e02:	0e 94 70 24 	call	0x48e0	; 0x48e0 <HLCD_vPrintNumber>
	HLCD_vClearDisplay();
	HLCD_vSetCursorPosition(0,1);
	HLCD_vPrintString("Count: ");
	while(HKPD_u8GetPressedKey());
	u08 counter_2=0;
	while(HKPD_u8GetPressedKey()!='#')
    5e06:	0e 94 72 28 	call	0x50e4	; 0x50e4 <HKPD_u8GetPressedKey>
    5e0a:	83 32       	cpi	r24, 0x23	; 35
    5e0c:	79 f6       	brne	.-98     	; 0x5dac <interface+0x2e2>
		HLCD_vPrintNumber(count);

	}


}
    5e0e:	6e 96       	adiw	r28, 0x1e	; 30
    5e10:	0f b6       	in	r0, 0x3f	; 63
    5e12:	f8 94       	cli
    5e14:	de bf       	out	0x3e, r29	; 62
    5e16:	0f be       	out	0x3f, r0	; 63
    5e18:	cd bf       	out	0x3d, r28	; 61
    5e1a:	cf 91       	pop	r28
    5e1c:	df 91       	pop	r29
    5e1e:	08 95       	ret

00005e20 <OpenSelender>:


void OpenSelender(void)
{
    5e20:	df 93       	push	r29
    5e22:	cf 93       	push	r28
    5e24:	cd b7       	in	r28, 0x3d	; 61
    5e26:	de b7       	in	r29, 0x3e	; 62
    5e28:	61 97       	sbiw	r28, 0x11	; 17
    5e2a:	0f b6       	in	r0, 0x3f	; 63
    5e2c:	f8 94       	cli
    5e2e:	de bf       	out	0x3e, r29	; 62
    5e30:	0f be       	out	0x3f, r0	; 63
    5e32:	cd bf       	out	0x3d, r28	; 61
	ScanColor_Flag=0;
    5e34:	10 92 fe 00 	sts	0x00FE, r1
	OpenSelender_Flag=1;
    5e38:	81 e0       	ldi	r24, 0x01	; 1
    5e3a:	80 93 ff 00 	sts	0x00FF, r24
	FillBox_Flag=0;
    5e3e:	10 92 00 01 	sts	0x0100, r1
	u08 i=0;
    5e42:	19 8a       	std	Y+17, r1	; 0x11
	HSYS_vTurnON(IR_3);
    5e44:	81 e0       	ldi	r24, 0x01	; 1
    5e46:	0e 94 41 16 	call	0x2c82	; 0x2c82 <HSYS_vTurnON>
	MTMR_vCheckTasks(OpenSelender);
    5e4a:	80 e1       	ldi	r24, 0x10	; 16
    5e4c:	9f e2       	ldi	r25, 0x2F	; 47
    5e4e:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MTMR_vCheckTasks>
	for(i=0;(i<ERRORtime)&&(~(HIR_u8ReadIR(&IR3_t)))&&OpenSelender_Flag;i++);
    5e52:	19 8a       	std	Y+17, r1	; 0x11
    5e54:	03 c0       	rjmp	.+6      	; 0x5e5c <OpenSelender+0x3c>
    5e56:	89 89       	ldd	r24, Y+17	; 0x11
    5e58:	8f 5f       	subi	r24, 0xFF	; 255
    5e5a:	89 8b       	std	Y+17, r24	; 0x11
    5e5c:	8d eb       	ldi	r24, 0xBD	; 189
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	0e 94 ff 29 	call	0x53fe	; 0x53fe <HIR_u8ReadIR>
    5e64:	88 2f       	mov	r24, r24
    5e66:	90 e0       	ldi	r25, 0x00	; 0
    5e68:	2f ef       	ldi	r18, 0xFF	; 255
    5e6a:	8f 3f       	cpi	r24, 0xFF	; 255
    5e6c:	92 07       	cpc	r25, r18
    5e6e:	21 f0       	breq	.+8      	; 0x5e78 <OpenSelender+0x58>
    5e70:	80 91 ff 00 	lds	r24, 0x00FF
    5e74:	88 23       	and	r24, r24
    5e76:	79 f7       	brne	.-34     	; 0x5e56 <OpenSelender+0x36>
	if(i==ERRORtime)
		HBZR_vError();
	for(u16 i2=0;(i2<IR2S)&&ScanColor_Flag;i2++);
    5e78:	18 8a       	std	Y+16, r1	; 0x10
    5e7a:	1f 86       	std	Y+15, r1	; 0x0f
    5e7c:	05 c0       	rjmp	.+10     	; 0x5e88 <OpenSelender+0x68>
    5e7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e80:	98 89       	ldd	r25, Y+16	; 0x10
    5e82:	01 96       	adiw	r24, 0x01	; 1
    5e84:	98 8b       	std	Y+16, r25	; 0x10
    5e86:	8f 87       	std	Y+15, r24	; 0x0f
    5e88:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e8a:	98 89       	ldd	r25, Y+16	; 0x10
    5e8c:	84 36       	cpi	r24, 0x64	; 100
    5e8e:	91 05       	cpc	r25, r1
    5e90:	20 f4       	brcc	.+8      	; 0x5e9a <OpenSelender+0x7a>
    5e92:	80 91 fe 00 	lds	r24, 0x00FE
    5e96:	88 23       	and	r24, r24
    5e98:	91 f7       	brne	.-28     	; 0x5e7e <OpenSelender+0x5e>
	MTMR_vEndTimer(Timer0);
    5e9a:	80 e0       	ldi	r24, 0x00	; 0
    5e9c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <MTMR_vEndTimer>
	MTMR_vDeleteTask(OpenSelender);
    5ea0:	80 e1       	ldi	r24, 0x10	; 16
    5ea2:	9f e2       	ldi	r25, 0x2F	; 47
    5ea4:	0e 94 75 0b 	call	0x16ea	; 0x16ea <MTMR_vDeleteTask>
	HSTPR_Stop();
    5ea8:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <HSTPR_Stop>
	HSYS_vTurnON(Selender);
    5eac:	86 e0       	ldi	r24, 0x06	; 6
    5eae:	0e 94 41 16 	call	0x2c82	; 0x2c82 <HSYS_vTurnON>
	HSYS_vTurnOFF(IR_3);
    5eb2:	81 e0       	ldi	r24, 0x01	; 1
    5eb4:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HSYS_vTurnOFF>
    5eb8:	80 e0       	ldi	r24, 0x00	; 0
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	a8 ec       	ldi	r26, 0xC8	; 200
    5ebe:	b2 e4       	ldi	r27, 0x42	; 66
    5ec0:	8b 87       	std	Y+11, r24	; 0x0b
    5ec2:	9c 87       	std	Y+12, r25	; 0x0c
    5ec4:	ad 87       	std	Y+13, r26	; 0x0d
    5ec6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ed0:	20 e0       	ldi	r18, 0x00	; 0
    5ed2:	30 e0       	ldi	r19, 0x00	; 0
    5ed4:	4a ef       	ldi	r20, 0xFA	; 250
    5ed6:	54 e4       	ldi	r21, 0x44	; 68
    5ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5edc:	dc 01       	movw	r26, r24
    5ede:	cb 01       	movw	r24, r22
    5ee0:	8f 83       	std	Y+7, r24	; 0x07
    5ee2:	98 87       	std	Y+8, r25	; 0x08
    5ee4:	a9 87       	std	Y+9, r26	; 0x09
    5ee6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    5eea:	78 85       	ldd	r23, Y+8	; 0x08
    5eec:	89 85       	ldd	r24, Y+9	; 0x09
    5eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ef0:	20 e0       	ldi	r18, 0x00	; 0
    5ef2:	30 e0       	ldi	r19, 0x00	; 0
    5ef4:	40 e8       	ldi	r20, 0x80	; 128
    5ef6:	5f e3       	ldi	r21, 0x3F	; 63
    5ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5efc:	88 23       	and	r24, r24
    5efe:	2c f4       	brge	.+10     	; 0x5f0a <OpenSelender+0xea>
		__ticks = 1;
    5f00:	81 e0       	ldi	r24, 0x01	; 1
    5f02:	90 e0       	ldi	r25, 0x00	; 0
    5f04:	9e 83       	std	Y+6, r25	; 0x06
    5f06:	8d 83       	std	Y+5, r24	; 0x05
    5f08:	3f c0       	rjmp	.+126    	; 0x5f88 <OpenSelender+0x168>
	else if (__tmp > 65535)
    5f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    5f0c:	78 85       	ldd	r23, Y+8	; 0x08
    5f0e:	89 85       	ldd	r24, Y+9	; 0x09
    5f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f12:	20 e0       	ldi	r18, 0x00	; 0
    5f14:	3f ef       	ldi	r19, 0xFF	; 255
    5f16:	4f e7       	ldi	r20, 0x7F	; 127
    5f18:	57 e4       	ldi	r21, 0x47	; 71
    5f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f1e:	18 16       	cp	r1, r24
    5f20:	4c f5       	brge	.+82     	; 0x5f74 <OpenSelender+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f22:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f24:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f26:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f28:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f2a:	20 e0       	ldi	r18, 0x00	; 0
    5f2c:	30 e0       	ldi	r19, 0x00	; 0
    5f2e:	40 e2       	ldi	r20, 0x20	; 32
    5f30:	51 e4       	ldi	r21, 0x41	; 65
    5f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f36:	dc 01       	movw	r26, r24
    5f38:	cb 01       	movw	r24, r22
    5f3a:	bc 01       	movw	r22, r24
    5f3c:	cd 01       	movw	r24, r26
    5f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f42:	dc 01       	movw	r26, r24
    5f44:	cb 01       	movw	r24, r22
    5f46:	9e 83       	std	Y+6, r25	; 0x06
    5f48:	8d 83       	std	Y+5, r24	; 0x05
    5f4a:	0f c0       	rjmp	.+30     	; 0x5f6a <OpenSelender+0x14a>
    5f4c:	88 ec       	ldi	r24, 0xC8	; 200
    5f4e:	90 e0       	ldi	r25, 0x00	; 0
    5f50:	9c 83       	std	Y+4, r25	; 0x04
    5f52:	8b 83       	std	Y+3, r24	; 0x03
    5f54:	8b 81       	ldd	r24, Y+3	; 0x03
    5f56:	9c 81       	ldd	r25, Y+4	; 0x04
    5f58:	01 97       	sbiw	r24, 0x01	; 1
    5f5a:	f1 f7       	brne	.-4      	; 0x5f58 <OpenSelender+0x138>
    5f5c:	9c 83       	std	Y+4, r25	; 0x04
    5f5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f60:	8d 81       	ldd	r24, Y+5	; 0x05
    5f62:	9e 81       	ldd	r25, Y+6	; 0x06
    5f64:	01 97       	sbiw	r24, 0x01	; 1
    5f66:	9e 83       	std	Y+6, r25	; 0x06
    5f68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    5f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    5f6e:	00 97       	sbiw	r24, 0x00	; 0
    5f70:	69 f7       	brne	.-38     	; 0x5f4c <OpenSelender+0x12c>
    5f72:	14 c0       	rjmp	.+40     	; 0x5f9c <OpenSelender+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f74:	6f 81       	ldd	r22, Y+7	; 0x07
    5f76:	78 85       	ldd	r23, Y+8	; 0x08
    5f78:	89 85       	ldd	r24, Y+9	; 0x09
    5f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f80:	dc 01       	movw	r26, r24
    5f82:	cb 01       	movw	r24, r22
    5f84:	9e 83       	std	Y+6, r25	; 0x06
    5f86:	8d 83       	std	Y+5, r24	; 0x05
    5f88:	8d 81       	ldd	r24, Y+5	; 0x05
    5f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    5f8c:	9a 83       	std	Y+2, r25	; 0x02
    5f8e:	89 83       	std	Y+1, r24	; 0x01
    5f90:	89 81       	ldd	r24, Y+1	; 0x01
    5f92:	9a 81       	ldd	r25, Y+2	; 0x02
    5f94:	01 97       	sbiw	r24, 0x01	; 1
    5f96:	f1 f7       	brne	.-4      	; 0x5f94 <OpenSelender+0x174>
    5f98:	9a 83       	std	Y+2, r25	; 0x02
    5f9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(SelenderBack);
	HSYS_vTurnOFF(Selender);
    5f9c:	86 e0       	ldi	r24, 0x06	; 6
    5f9e:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HSYS_vTurnOFF>
	HSTPR_Walk();
    5fa2:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <HSTPR_Walk>
	OpenSelender_Flag=0;
    5fa6:	10 92 ff 00 	sts	0x00FF, r1
	MTMR_vStartTimer(Timer0);
    5faa:	80 e0       	ldi	r24, 0x00	; 0
    5fac:	0e 94 1b 0a 	call	0x1436	; 0x1436 <MTMR_vStartTimer>
}
    5fb0:	61 96       	adiw	r28, 0x11	; 17
    5fb2:	0f b6       	in	r0, 0x3f	; 63
    5fb4:	f8 94       	cli
    5fb6:	de bf       	out	0x3e, r29	; 62
    5fb8:	0f be       	out	0x3f, r0	; 63
    5fba:	cd bf       	out	0x3d, r28	; 61
    5fbc:	cf 91       	pop	r28
    5fbe:	df 91       	pop	r29
    5fc0:	08 95       	ret

00005fc2 <SSD_DESPLAY>:


void SSD_DESPLAY(void)
{
    5fc2:	df 93       	push	r29
    5fc4:	cf 93       	push	r28
    5fc6:	cd b7       	in	r28, 0x3d	; 61
    5fc8:	de b7       	in	r29, 0x3e	; 62
	HSSD_vDisplayNum(counter);
    5fca:	80 91 f8 00 	lds	r24, 0x00F8
    5fce:	88 2f       	mov	r24, r24
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <HSSD_vDisplayNum>
}
    5fd6:	cf 91       	pop	r28
    5fd8:	df 91       	pop	r29
    5fda:	08 95       	ret

00005fdc <ScanColor>:

void ScanColor(void)
{
    5fdc:	0f 93       	push	r16
    5fde:	1f 93       	push	r17
    5fe0:	df 93       	push	r29
    5fe2:	cf 93       	push	r28
    5fe4:	00 d0       	rcall	.+0      	; 0x5fe6 <ScanColor+0xa>
    5fe6:	0f 92       	push	r0
    5fe8:	cd b7       	in	r28, 0x3d	; 61
    5fea:	de b7       	in	r29, 0x3e	; 62
	ScanColor_Flag=1;
    5fec:	81 e0       	ldi	r24, 0x01	; 1
    5fee:	80 93 fe 00 	sts	0x00FE, r24
	OpenSelender_Flag=0;
    5ff2:	10 92 ff 00 	sts	0x00FF, r1
	FillBox_Flag=0;
    5ff6:	10 92 00 01 	sts	0x0100, r1
	u08 i=0;
    5ffa:	1b 82       	std	Y+3, r1	; 0x03
	static u08 CounterColor=0;
	MTMR_vEndTimer(Timer0);
    5ffc:	80 e0       	ldi	r24, 0x00	; 0
    5ffe:	0e 94 55 0a 	call	0x14aa	; 0x14aa <MTMR_vEndTimer>
	HSYS_vTurnON(IR_2);
    6002:	80 e0       	ldi	r24, 0x00	; 0
    6004:	0e 94 41 16 	call	0x2c82	; 0x2c82 <HSYS_vTurnON>
	MTMR_vStartTimer(Timer0);
    6008:	80 e0       	ldi	r24, 0x00	; 0
    600a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <MTMR_vStartTimer>
	MTMR_vCheckTasks(ScanColor);
    600e:	8e ee       	ldi	r24, 0xEE	; 238
    6010:	9f e2       	ldi	r25, 0x2F	; 47
    6012:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MTMR_vCheckTasks>
	for(i=0;(i<ERRORtime)&&(~(HIR_u8ReadIR(&IR2_t)))&&ScanColor_Flag;i++);
    6016:	1b 82       	std	Y+3, r1	; 0x03
    6018:	03 c0       	rjmp	.+6      	; 0x6020 <ScanColor+0x44>
    601a:	8b 81       	ldd	r24, Y+3	; 0x03
    601c:	8f 5f       	subi	r24, 0xFF	; 255
    601e:	8b 83       	std	Y+3, r24	; 0x03
    6020:	8b eb       	ldi	r24, 0xBB	; 187
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	0e 94 ff 29 	call	0x53fe	; 0x53fe <HIR_u8ReadIR>
    6028:	88 2f       	mov	r24, r24
    602a:	90 e0       	ldi	r25, 0x00	; 0
    602c:	2f ef       	ldi	r18, 0xFF	; 255
    602e:	8f 3f       	cpi	r24, 0xFF	; 255
    6030:	92 07       	cpc	r25, r18
    6032:	21 f0       	breq	.+8      	; 0x603c <ScanColor+0x60>
    6034:	80 91 fe 00 	lds	r24, 0x00FE
    6038:	88 23       	and	r24, r24
    603a:	79 f7       	brne	.-34     	; 0x601a <ScanColor+0x3e>
	if(i==ERRORtime)
		HBZR_vError();

	HSYS_vTurnON(ColorSensor);
    603c:	83 e0       	ldi	r24, 0x03	; 3
    603e:	0e 94 41 16 	call	0x2c82	; 0x2c82 <HSYS_vTurnON>
	for(u16 i=0;(i<IR2C)&&ScanColor_Flag;i++);
    6042:	1a 82       	std	Y+2, r1	; 0x02
    6044:	19 82       	std	Y+1, r1	; 0x01
    6046:	05 c0       	rjmp	.+10     	; 0x6052 <ScanColor+0x76>
    6048:	89 81       	ldd	r24, Y+1	; 0x01
    604a:	9a 81       	ldd	r25, Y+2	; 0x02
    604c:	01 96       	adiw	r24, 0x01	; 1
    604e:	9a 83       	std	Y+2, r25	; 0x02
    6050:	89 83       	std	Y+1, r24	; 0x01
    6052:	89 81       	ldd	r24, Y+1	; 0x01
    6054:	9a 81       	ldd	r25, Y+2	; 0x02
    6056:	84 36       	cpi	r24, 0x64	; 100
    6058:	91 05       	cpc	r25, r1
    605a:	20 f4       	brcc	.+8      	; 0x6064 <ScanColor+0x88>
    605c:	80 91 fe 00 	lds	r24, 0x00FE
    6060:	88 23       	and	r24, r24
    6062:	91 f7       	brne	.-28     	; 0x6048 <ScanColor+0x6c>
	MTMR_vEndTimer(Timer0);
    6064:	80 e0       	ldi	r24, 0x00	; 0
    6066:	0e 94 55 0a 	call	0x14aa	; 0x14aa <MTMR_vEndTimer>
	MTMR_vDeleteTask(ScanColor);
    606a:	8e ee       	ldi	r24, 0xEE	; 238
    606c:	9f e2       	ldi	r25, 0x2F	; 47
    606e:	0e 94 75 0b 	call	0x16ea	; 0x16ea <MTMR_vDeleteTask>
	HSTPR_Stop();
    6072:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <HSTPR_Stop>
	MTMR_vChangeMood(Timer1,ICU);
    6076:	81 e0       	ldi	r24, 0x01	; 1
    6078:	64 e0       	ldi	r22, 0x04	; 4
    607a:	0e 94 24 07 	call	0xe48	; 0xe48 <MTMR_vChangeMood>
	Color_B[CounterColor]=HCLR_u8ScanColor();
    607e:	80 91 01 01 	lds	r24, 0x0101
    6082:	08 2f       	mov	r16, r24
    6084:	10 e0       	ldi	r17, 0x00	; 0
    6086:	0e 94 8f 2a 	call	0x551e	; 0x551e <HCLR_u8ScanColor>
    608a:	f8 01       	movw	r30, r16
    608c:	e5 5a       	subi	r30, 0xA5	; 165
    608e:	fe 4f       	sbci	r31, 0xFE	; 254
    6090:	80 83       	st	Z, r24
	MTMR_vChangeMood(Timer1,PWM);
    6092:	81 e0       	ldi	r24, 0x01	; 1
    6094:	62 e0       	ldi	r22, 0x02	; 2
    6096:	0e 94 24 07 	call	0xe48	; 0xe48 <MTMR_vChangeMood>
	if(Color_B==(Color-1))
    609a:	80 91 f6 00 	lds	r24, 0x00F6
    609e:	88 2f       	mov	r24, r24
    60a0:	90 e0       	ldi	r25, 0x00	; 0
    60a2:	01 97       	sbiw	r24, 0x01	; 1
    60a4:	21 e0       	ldi	r18, 0x01	; 1
    60a6:	8b 35       	cpi	r24, 0x5B	; 91
    60a8:	92 07       	cpc	r25, r18
    60aa:	49 f4       	brne	.+18     	; 0x60be <ScanColor+0xe2>
		Flag_Appropriate[CounterColor]=1;
    60ac:	80 91 01 01 	lds	r24, 0x0101
    60b0:	88 2f       	mov	r24, r24
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	fc 01       	movw	r30, r24
    60b6:	e7 50       	subi	r30, 0x07	; 7
    60b8:	ff 4f       	sbci	r31, 0xFF	; 255
    60ba:	81 e0       	ldi	r24, 0x01	; 1
    60bc:	80 83       	st	Z, r24
	HSYS_vTurnOFF(ColorSensor);
    60be:	83 e0       	ldi	r24, 0x03	; 3
    60c0:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HSYS_vTurnOFF>
	HSYS_vTurnOFF(IR_2);
    60c4:	80 e0       	ldi	r24, 0x00	; 0
    60c6:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HSYS_vTurnOFF>
	if(Flag_Appropriate==0)
		MTMR_vDelayOVF(Timer0,C2S,OpenSelender);
	else
		MTMR_vDelayOVF(Timer0,C2B,FillBox);
    60ca:	2f e8       	ldi	r18, 0x8F	; 143
    60cc:	30 e3       	ldi	r19, 0x30	; 48
    60ce:	80 e0       	ldi	r24, 0x00	; 0
    60d0:	68 ee       	ldi	r22, 0xE8	; 232
    60d2:	73 e0       	ldi	r23, 0x03	; 3
    60d4:	a9 01       	movw	r20, r18
    60d6:	0e 94 8c 0a 	call	0x1518	; 0x1518 <MTMR_vDelayOVF>
	Flag_Appropriate[CounterColor]=0;
    60da:	80 91 01 01 	lds	r24, 0x0101
    60de:	88 2f       	mov	r24, r24
    60e0:	90 e0       	ldi	r25, 0x00	; 0
    60e2:	fc 01       	movw	r30, r24
    60e4:	e7 50       	subi	r30, 0x07	; 7
    60e6:	ff 4f       	sbci	r31, 0xFF	; 255
    60e8:	10 82       	st	Z, r1
	CounterColor++;
    60ea:	80 91 01 01 	lds	r24, 0x0101
    60ee:	8f 5f       	subi	r24, 0xFF	; 255
    60f0:	80 93 01 01 	sts	0x0101, r24
	if(CounterColor==5)
    60f4:	80 91 01 01 	lds	r24, 0x0101
    60f8:	85 30       	cpi	r24, 0x05	; 5
    60fa:	11 f4       	brne	.+4      	; 0x6100 <ScanColor+0x124>
		CounterColor=0;
    60fc:	10 92 01 01 	sts	0x0101, r1

	HSTPR_Walk();
    6100:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <HSTPR_Walk>
	ScanColor_Flag=0;
    6104:	10 92 fe 00 	sts	0x00FE, r1
	MTMR_vStartTimer(Timer0);
    6108:	80 e0       	ldi	r24, 0x00	; 0
    610a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <MTMR_vStartTimer>
}
    610e:	0f 90       	pop	r0
    6110:	0f 90       	pop	r0
    6112:	0f 90       	pop	r0
    6114:	cf 91       	pop	r28
    6116:	df 91       	pop	r29
    6118:	1f 91       	pop	r17
    611a:	0f 91       	pop	r16
    611c:	08 95       	ret

0000611e <FillBox>:

void FillBox(void)
{
    611e:	df 93       	push	r29
    6120:	cf 93       	push	r28
    6122:	0f 92       	push	r0
    6124:	cd b7       	in	r28, 0x3d	; 61
    6126:	de b7       	in	r29, 0x3e	; 62
	ScanColor_Flag=0;
    6128:	10 92 fe 00 	sts	0x00FE, r1
	OpenSelender_Flag=0;
    612c:	10 92 ff 00 	sts	0x00FF, r1
	FillBox_Flag=1;
    6130:	81 e0       	ldi	r24, 0x01	; 1
    6132:	80 93 00 01 	sts	0x0100, r24
	u08 i=0;
    6136:	19 82       	std	Y+1, r1	; 0x01
	HSYS_vTurnON(IR_4);
    6138:	82 e0       	ldi	r24, 0x02	; 2
    613a:	0e 94 41 16 	call	0x2c82	; 0x2c82 <HSYS_vTurnON>
	MTMR_vCheckTasks(FillBox);
    613e:	8f e8       	ldi	r24, 0x8F	; 143
    6140:	90 e3       	ldi	r25, 0x30	; 48
    6142:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <MTMR_vCheckTasks>
	for(i=0;(i<ERRORtime)&&(~(HIR_u8ReadIR(&IR4_t)))&&FillBox_Flag;i++);
    6146:	19 82       	std	Y+1, r1	; 0x01
    6148:	03 c0       	rjmp	.+6      	; 0x6150 <FillBox+0x32>
    614a:	89 81       	ldd	r24, Y+1	; 0x01
    614c:	8f 5f       	subi	r24, 0xFF	; 255
    614e:	89 83       	std	Y+1, r24	; 0x01
    6150:	8f eb       	ldi	r24, 0xBF	; 191
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	0e 94 ff 29 	call	0x53fe	; 0x53fe <HIR_u8ReadIR>
    6158:	88 2f       	mov	r24, r24
    615a:	90 e0       	ldi	r25, 0x00	; 0
    615c:	2f ef       	ldi	r18, 0xFF	; 255
    615e:	8f 3f       	cpi	r24, 0xFF	; 255
    6160:	92 07       	cpc	r25, r18
    6162:	21 f0       	breq	.+8      	; 0x616c <FillBox+0x4e>
    6164:	80 91 00 01 	lds	r24, 0x0100
    6168:	88 23       	and	r24, r24
    616a:	79 f7       	brne	.-34     	; 0x614a <FillBox+0x2c>
	if(i==ERRORtime)
		HBZR_vError();
	MTMR_vEndTimer(Timer0);
    616c:	80 e0       	ldi	r24, 0x00	; 0
    616e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <MTMR_vEndTimer>
	MTMR_vDeleteTask(FillBox);
    6172:	8f e8       	ldi	r24, 0x8F	; 143
    6174:	90 e3       	ldi	r25, 0x30	; 48
    6176:	0e 94 75 0b 	call	0x16ea	; 0x16ea <MTMR_vDeleteTask>
	counter++;
    617a:	80 91 f8 00 	lds	r24, 0x00F8
    617e:	8f 5f       	subi	r24, 0xFF	; 255
    6180:	80 93 f8 00 	sts	0x00F8, r24
	HSYS_vTurnOFF(IR_4);
    6184:	82 e0       	ldi	r24, 0x02	; 2
    6186:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <HSYS_vTurnOFF>
	FillBox_Flag=0;
    618a:	10 92 00 01 	sts	0x0100, r1
	MTMR_vStartTimer(Timer0);
    618e:	80 e0       	ldi	r24, 0x00	; 0
    6190:	0e 94 1b 0a 	call	0x1436	; 0x1436 <MTMR_vStartTimer>
}
    6194:	0f 90       	pop	r0
    6196:	cf 91       	pop	r28
    6198:	df 91       	pop	r29
    619a:	08 95       	ret

0000619c <__mulsi3>:
    619c:	62 9f       	mul	r22, r18
    619e:	d0 01       	movw	r26, r0
    61a0:	73 9f       	mul	r23, r19
    61a2:	f0 01       	movw	r30, r0
    61a4:	82 9f       	mul	r24, r18
    61a6:	e0 0d       	add	r30, r0
    61a8:	f1 1d       	adc	r31, r1
    61aa:	64 9f       	mul	r22, r20
    61ac:	e0 0d       	add	r30, r0
    61ae:	f1 1d       	adc	r31, r1
    61b0:	92 9f       	mul	r25, r18
    61b2:	f0 0d       	add	r31, r0
    61b4:	83 9f       	mul	r24, r19
    61b6:	f0 0d       	add	r31, r0
    61b8:	74 9f       	mul	r23, r20
    61ba:	f0 0d       	add	r31, r0
    61bc:	65 9f       	mul	r22, r21
    61be:	f0 0d       	add	r31, r0
    61c0:	99 27       	eor	r25, r25
    61c2:	72 9f       	mul	r23, r18
    61c4:	b0 0d       	add	r27, r0
    61c6:	e1 1d       	adc	r30, r1
    61c8:	f9 1f       	adc	r31, r25
    61ca:	63 9f       	mul	r22, r19
    61cc:	b0 0d       	add	r27, r0
    61ce:	e1 1d       	adc	r30, r1
    61d0:	f9 1f       	adc	r31, r25
    61d2:	bd 01       	movw	r22, r26
    61d4:	cf 01       	movw	r24, r30
    61d6:	11 24       	eor	r1, r1
    61d8:	08 95       	ret

000061da <__udivmodhi4>:
    61da:	aa 1b       	sub	r26, r26
    61dc:	bb 1b       	sub	r27, r27
    61de:	51 e1       	ldi	r21, 0x11	; 17
    61e0:	07 c0       	rjmp	.+14     	; 0x61f0 <__udivmodhi4_ep>

000061e2 <__udivmodhi4_loop>:
    61e2:	aa 1f       	adc	r26, r26
    61e4:	bb 1f       	adc	r27, r27
    61e6:	a6 17       	cp	r26, r22
    61e8:	b7 07       	cpc	r27, r23
    61ea:	10 f0       	brcs	.+4      	; 0x61f0 <__udivmodhi4_ep>
    61ec:	a6 1b       	sub	r26, r22
    61ee:	b7 0b       	sbc	r27, r23

000061f0 <__udivmodhi4_ep>:
    61f0:	88 1f       	adc	r24, r24
    61f2:	99 1f       	adc	r25, r25
    61f4:	5a 95       	dec	r21
    61f6:	a9 f7       	brne	.-22     	; 0x61e2 <__udivmodhi4_loop>
    61f8:	80 95       	com	r24
    61fa:	90 95       	com	r25
    61fc:	bc 01       	movw	r22, r24
    61fe:	cd 01       	movw	r24, r26
    6200:	08 95       	ret

00006202 <__divmodhi4>:
    6202:	97 fb       	bst	r25, 7
    6204:	09 2e       	mov	r0, r25
    6206:	07 26       	eor	r0, r23
    6208:	0a d0       	rcall	.+20     	; 0x621e <__divmodhi4_neg1>
    620a:	77 fd       	sbrc	r23, 7
    620c:	04 d0       	rcall	.+8      	; 0x6216 <__divmodhi4_neg2>
    620e:	e5 df       	rcall	.-54     	; 0x61da <__udivmodhi4>
    6210:	06 d0       	rcall	.+12     	; 0x621e <__divmodhi4_neg1>
    6212:	00 20       	and	r0, r0
    6214:	1a f4       	brpl	.+6      	; 0x621c <__divmodhi4_exit>

00006216 <__divmodhi4_neg2>:
    6216:	70 95       	com	r23
    6218:	61 95       	neg	r22
    621a:	7f 4f       	sbci	r23, 0xFF	; 255

0000621c <__divmodhi4_exit>:
    621c:	08 95       	ret

0000621e <__divmodhi4_neg1>:
    621e:	f6 f7       	brtc	.-4      	; 0x621c <__divmodhi4_exit>
    6220:	90 95       	com	r25
    6222:	81 95       	neg	r24
    6224:	9f 4f       	sbci	r25, 0xFF	; 255
    6226:	08 95       	ret

00006228 <__udivmodsi4>:
    6228:	a1 e2       	ldi	r26, 0x21	; 33
    622a:	1a 2e       	mov	r1, r26
    622c:	aa 1b       	sub	r26, r26
    622e:	bb 1b       	sub	r27, r27
    6230:	fd 01       	movw	r30, r26
    6232:	0d c0       	rjmp	.+26     	; 0x624e <__udivmodsi4_ep>

00006234 <__udivmodsi4_loop>:
    6234:	aa 1f       	adc	r26, r26
    6236:	bb 1f       	adc	r27, r27
    6238:	ee 1f       	adc	r30, r30
    623a:	ff 1f       	adc	r31, r31
    623c:	a2 17       	cp	r26, r18
    623e:	b3 07       	cpc	r27, r19
    6240:	e4 07       	cpc	r30, r20
    6242:	f5 07       	cpc	r31, r21
    6244:	20 f0       	brcs	.+8      	; 0x624e <__udivmodsi4_ep>
    6246:	a2 1b       	sub	r26, r18
    6248:	b3 0b       	sbc	r27, r19
    624a:	e4 0b       	sbc	r30, r20
    624c:	f5 0b       	sbc	r31, r21

0000624e <__udivmodsi4_ep>:
    624e:	66 1f       	adc	r22, r22
    6250:	77 1f       	adc	r23, r23
    6252:	88 1f       	adc	r24, r24
    6254:	99 1f       	adc	r25, r25
    6256:	1a 94       	dec	r1
    6258:	69 f7       	brne	.-38     	; 0x6234 <__udivmodsi4_loop>
    625a:	60 95       	com	r22
    625c:	70 95       	com	r23
    625e:	80 95       	com	r24
    6260:	90 95       	com	r25
    6262:	9b 01       	movw	r18, r22
    6264:	ac 01       	movw	r20, r24
    6266:	bd 01       	movw	r22, r26
    6268:	cf 01       	movw	r24, r30
    626a:	08 95       	ret

0000626c <__divmodsi4>:
    626c:	97 fb       	bst	r25, 7
    626e:	09 2e       	mov	r0, r25
    6270:	05 26       	eor	r0, r21
    6272:	0e d0       	rcall	.+28     	; 0x6290 <__divmodsi4_neg1>
    6274:	57 fd       	sbrc	r21, 7
    6276:	04 d0       	rcall	.+8      	; 0x6280 <__divmodsi4_neg2>
    6278:	d7 df       	rcall	.-82     	; 0x6228 <__udivmodsi4>
    627a:	0a d0       	rcall	.+20     	; 0x6290 <__divmodsi4_neg1>
    627c:	00 1c       	adc	r0, r0
    627e:	38 f4       	brcc	.+14     	; 0x628e <__divmodsi4_exit>

00006280 <__divmodsi4_neg2>:
    6280:	50 95       	com	r21
    6282:	40 95       	com	r20
    6284:	30 95       	com	r19
    6286:	21 95       	neg	r18
    6288:	3f 4f       	sbci	r19, 0xFF	; 255
    628a:	4f 4f       	sbci	r20, 0xFF	; 255
    628c:	5f 4f       	sbci	r21, 0xFF	; 255

0000628e <__divmodsi4_exit>:
    628e:	08 95       	ret

00006290 <__divmodsi4_neg1>:
    6290:	f6 f7       	brtc	.-4      	; 0x628e <__divmodsi4_exit>
    6292:	90 95       	com	r25
    6294:	80 95       	com	r24
    6296:	70 95       	com	r23
    6298:	61 95       	neg	r22
    629a:	7f 4f       	sbci	r23, 0xFF	; 255
    629c:	8f 4f       	sbci	r24, 0xFF	; 255
    629e:	9f 4f       	sbci	r25, 0xFF	; 255
    62a0:	08 95       	ret

000062a2 <__prologue_saves__>:
    62a2:	2f 92       	push	r2
    62a4:	3f 92       	push	r3
    62a6:	4f 92       	push	r4
    62a8:	5f 92       	push	r5
    62aa:	6f 92       	push	r6
    62ac:	7f 92       	push	r7
    62ae:	8f 92       	push	r8
    62b0:	9f 92       	push	r9
    62b2:	af 92       	push	r10
    62b4:	bf 92       	push	r11
    62b6:	cf 92       	push	r12
    62b8:	df 92       	push	r13
    62ba:	ef 92       	push	r14
    62bc:	ff 92       	push	r15
    62be:	0f 93       	push	r16
    62c0:	1f 93       	push	r17
    62c2:	cf 93       	push	r28
    62c4:	df 93       	push	r29
    62c6:	cd b7       	in	r28, 0x3d	; 61
    62c8:	de b7       	in	r29, 0x3e	; 62
    62ca:	ca 1b       	sub	r28, r26
    62cc:	db 0b       	sbc	r29, r27
    62ce:	0f b6       	in	r0, 0x3f	; 63
    62d0:	f8 94       	cli
    62d2:	de bf       	out	0x3e, r29	; 62
    62d4:	0f be       	out	0x3f, r0	; 63
    62d6:	cd bf       	out	0x3d, r28	; 61
    62d8:	09 94       	ijmp

000062da <__epilogue_restores__>:
    62da:	2a 88       	ldd	r2, Y+18	; 0x12
    62dc:	39 88       	ldd	r3, Y+17	; 0x11
    62de:	48 88       	ldd	r4, Y+16	; 0x10
    62e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    62e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    62e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    62e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    62e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    62ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    62ec:	b9 84       	ldd	r11, Y+9	; 0x09
    62ee:	c8 84       	ldd	r12, Y+8	; 0x08
    62f0:	df 80       	ldd	r13, Y+7	; 0x07
    62f2:	ee 80       	ldd	r14, Y+6	; 0x06
    62f4:	fd 80       	ldd	r15, Y+5	; 0x05
    62f6:	0c 81       	ldd	r16, Y+4	; 0x04
    62f8:	1b 81       	ldd	r17, Y+3	; 0x03
    62fa:	aa 81       	ldd	r26, Y+2	; 0x02
    62fc:	b9 81       	ldd	r27, Y+1	; 0x01
    62fe:	ce 0f       	add	r28, r30
    6300:	d1 1d       	adc	r29, r1
    6302:	0f b6       	in	r0, 0x3f	; 63
    6304:	f8 94       	cli
    6306:	de bf       	out	0x3e, r29	; 62
    6308:	0f be       	out	0x3f, r0	; 63
    630a:	cd bf       	out	0x3d, r28	; 61
    630c:	ed 01       	movw	r28, r26
    630e:	08 95       	ret

00006310 <_exit>:
    6310:	f8 94       	cli

00006312 <__stop_program>:
    6312:	ff cf       	rjmp	.-2      	; 0x6312 <__stop_program>
